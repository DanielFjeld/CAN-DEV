
CAN-DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003608  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080036c8  080036c8  000136c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003740  08003740  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003740  08003740  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003740  08003740  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003740  08003740  00013740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000005c  080037a4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  080037a4  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001772c  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000350e  00000000  00000000  000377f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000bd5f  00000000  00000000  0003ad01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c18  00000000  00000000  00046a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000129b  00000000  00000000  00047678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a95d  00000000  00000000  00048913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c824  00000000  00000000  00063270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00097331  00000000  00000000  0007fa94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002a84  00000000  00000000  00116dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0011984c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080036b0 	.word	0x080036b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080036b0 	.word	0x080036b0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_f2iz>:
 8000244:	0241      	lsls	r1, r0, #9
 8000246:	0042      	lsls	r2, r0, #1
 8000248:	0fc3      	lsrs	r3, r0, #31
 800024a:	0a49      	lsrs	r1, r1, #9
 800024c:	2000      	movs	r0, #0
 800024e:	0e12      	lsrs	r2, r2, #24
 8000250:	2a7e      	cmp	r2, #126	; 0x7e
 8000252:	dd03      	ble.n	800025c <__aeabi_f2iz+0x18>
 8000254:	2a9d      	cmp	r2, #157	; 0x9d
 8000256:	dd02      	ble.n	800025e <__aeabi_f2iz+0x1a>
 8000258:	4a09      	ldr	r2, [pc, #36]	; (8000280 <__aeabi_f2iz+0x3c>)
 800025a:	1898      	adds	r0, r3, r2
 800025c:	4770      	bx	lr
 800025e:	2080      	movs	r0, #128	; 0x80
 8000260:	0400      	lsls	r0, r0, #16
 8000262:	4301      	orrs	r1, r0
 8000264:	2a95      	cmp	r2, #149	; 0x95
 8000266:	dc07      	bgt.n	8000278 <__aeabi_f2iz+0x34>
 8000268:	2096      	movs	r0, #150	; 0x96
 800026a:	1a82      	subs	r2, r0, r2
 800026c:	40d1      	lsrs	r1, r2
 800026e:	4248      	negs	r0, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d1f3      	bne.n	800025c <__aeabi_f2iz+0x18>
 8000274:	0008      	movs	r0, r1
 8000276:	e7f1      	b.n	800025c <__aeabi_f2iz+0x18>
 8000278:	3a96      	subs	r2, #150	; 0x96
 800027a:	4091      	lsls	r1, r2
 800027c:	e7f7      	b.n	800026e <__aeabi_f2iz+0x2a>
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	7fffffff 	.word	0x7fffffff

08000284 <__aeabi_ui2f>:
 8000284:	b570      	push	{r4, r5, r6, lr}
 8000286:	1e04      	subs	r4, r0, #0
 8000288:	d00e      	beq.n	80002a8 <__aeabi_ui2f+0x24>
 800028a:	f000 f843 	bl	8000314 <__clzsi2>
 800028e:	239e      	movs	r3, #158	; 0x9e
 8000290:	0001      	movs	r1, r0
 8000292:	1a1b      	subs	r3, r3, r0
 8000294:	2b96      	cmp	r3, #150	; 0x96
 8000296:	dc0c      	bgt.n	80002b2 <__aeabi_ui2f+0x2e>
 8000298:	2808      	cmp	r0, #8
 800029a:	d02c      	beq.n	80002f6 <__aeabi_ui2f+0x72>
 800029c:	3908      	subs	r1, #8
 800029e:	408c      	lsls	r4, r1
 80002a0:	0264      	lsls	r4, r4, #9
 80002a2:	0a64      	lsrs	r4, r4, #9
 80002a4:	b2d8      	uxtb	r0, r3
 80002a6:	e001      	b.n	80002ac <__aeabi_ui2f+0x28>
 80002a8:	2000      	movs	r0, #0
 80002aa:	2400      	movs	r4, #0
 80002ac:	05c0      	lsls	r0, r0, #23
 80002ae:	4320      	orrs	r0, r4
 80002b0:	bd70      	pop	{r4, r5, r6, pc}
 80002b2:	2b99      	cmp	r3, #153	; 0x99
 80002b4:	dd0a      	ble.n	80002cc <__aeabi_ui2f+0x48>
 80002b6:	0002      	movs	r2, r0
 80002b8:	0020      	movs	r0, r4
 80002ba:	321b      	adds	r2, #27
 80002bc:	4090      	lsls	r0, r2
 80002be:	0002      	movs	r2, r0
 80002c0:	1e50      	subs	r0, r2, #1
 80002c2:	4182      	sbcs	r2, r0
 80002c4:	2005      	movs	r0, #5
 80002c6:	1a40      	subs	r0, r0, r1
 80002c8:	40c4      	lsrs	r4, r0
 80002ca:	4314      	orrs	r4, r2
 80002cc:	2905      	cmp	r1, #5
 80002ce:	dc16      	bgt.n	80002fe <__aeabi_ui2f+0x7a>
 80002d0:	0022      	movs	r2, r4
 80002d2:	480f      	ldr	r0, [pc, #60]	; (8000310 <__aeabi_ui2f+0x8c>)
 80002d4:	4002      	ands	r2, r0
 80002d6:	0765      	lsls	r5, r4, #29
 80002d8:	d009      	beq.n	80002ee <__aeabi_ui2f+0x6a>
 80002da:	250f      	movs	r5, #15
 80002dc:	402c      	ands	r4, r5
 80002de:	2c04      	cmp	r4, #4
 80002e0:	d005      	beq.n	80002ee <__aeabi_ui2f+0x6a>
 80002e2:	3204      	adds	r2, #4
 80002e4:	0154      	lsls	r4, r2, #5
 80002e6:	d502      	bpl.n	80002ee <__aeabi_ui2f+0x6a>
 80002e8:	239f      	movs	r3, #159	; 0x9f
 80002ea:	4002      	ands	r2, r0
 80002ec:	1a5b      	subs	r3, r3, r1
 80002ee:	0192      	lsls	r2, r2, #6
 80002f0:	0a54      	lsrs	r4, r2, #9
 80002f2:	b2d8      	uxtb	r0, r3
 80002f4:	e7da      	b.n	80002ac <__aeabi_ui2f+0x28>
 80002f6:	0264      	lsls	r4, r4, #9
 80002f8:	2096      	movs	r0, #150	; 0x96
 80002fa:	0a64      	lsrs	r4, r4, #9
 80002fc:	e7d6      	b.n	80002ac <__aeabi_ui2f+0x28>
 80002fe:	1f4a      	subs	r2, r1, #5
 8000300:	4094      	lsls	r4, r2
 8000302:	0022      	movs	r2, r4
 8000304:	4802      	ldr	r0, [pc, #8]	; (8000310 <__aeabi_ui2f+0x8c>)
 8000306:	4002      	ands	r2, r0
 8000308:	0765      	lsls	r5, r4, #29
 800030a:	d0f0      	beq.n	80002ee <__aeabi_ui2f+0x6a>
 800030c:	e7e5      	b.n	80002da <__aeabi_ui2f+0x56>
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	fbffffff 	.word	0xfbffffff

08000314 <__clzsi2>:
 8000314:	211c      	movs	r1, #28
 8000316:	2301      	movs	r3, #1
 8000318:	041b      	lsls	r3, r3, #16
 800031a:	4298      	cmp	r0, r3
 800031c:	d301      	bcc.n	8000322 <__clzsi2+0xe>
 800031e:	0c00      	lsrs	r0, r0, #16
 8000320:	3910      	subs	r1, #16
 8000322:	0a1b      	lsrs	r3, r3, #8
 8000324:	4298      	cmp	r0, r3
 8000326:	d301      	bcc.n	800032c <__clzsi2+0x18>
 8000328:	0a00      	lsrs	r0, r0, #8
 800032a:	3908      	subs	r1, #8
 800032c:	091b      	lsrs	r3, r3, #4
 800032e:	4298      	cmp	r0, r3
 8000330:	d301      	bcc.n	8000336 <__clzsi2+0x22>
 8000332:	0900      	lsrs	r0, r0, #4
 8000334:	3904      	subs	r1, #4
 8000336:	a202      	add	r2, pc, #8	; (adr r2, 8000340 <__clzsi2+0x2c>)
 8000338:	5c10      	ldrb	r0, [r2, r0]
 800033a:	1840      	adds	r0, r0, r1
 800033c:	4770      	bx	lr
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	02020304 	.word	0x02020304
 8000344:	01010101 	.word	0x01010101
	...

08000350 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000350:	b510      	push	{r4, lr}
 8000352:	b084      	sub	sp, #16

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000354:	220c      	movs	r2, #12
 8000356:	2100      	movs	r1, #0
 8000358:	a801      	add	r0, sp, #4
 800035a:	f002 fd23 	bl	8002da4 <memset>
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800035e:	2104      	movs	r1, #4
  hadc.Instance = ADC1;
 8000360:	4c2c      	ldr	r4, [pc, #176]	; (8000414 <MX_ADC_Init+0xc4>)
 8000362:	4b2d      	ldr	r3, [pc, #180]	; (8000418 <MX_ADC_Init+0xc8>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000364:	6161      	str	r1, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000366:	2180      	movs	r1, #128	; 0x80
 8000368:	0249      	lsls	r1, r1, #9
  hadc.Instance = ADC1;
 800036a:	6023      	str	r3, [r4, #0]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800036c:	61a1      	str	r1, [r4, #24]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800036e:	2300      	movs	r3, #0
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000370:	21c2      	movs	r1, #194	; 0xc2
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000372:	2201      	movs	r2, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000374:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000376:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000378:	60e3      	str	r3, [r4, #12]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800037a:	31ff      	adds	r1, #255	; 0xff
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800037c:	6223      	str	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800037e:	0020      	movs	r0, r4
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000380:	3324      	adds	r3, #36	; 0x24
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000382:	6122      	str	r2, [r4, #16]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000384:	61e1      	str	r1, [r4, #28]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000386:	54e2      	strb	r2, [r4, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000388:	62a2      	str	r2, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800038a:	f000 fc5b 	bl	8000c44 <HAL_ADC_Init>
 800038e:	2800      	cmp	r0, #0
 8000390:	d12e      	bne.n	80003f0 <MX_ADC_Init+0xa0>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000392:	2301      	movs	r3, #1
 8000394:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000396:	2380      	movs	r3, #128	; 0x80
 8000398:	015b      	lsls	r3, r3, #5
 800039a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800039c:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800039e:	0020      	movs	r0, r4
 80003a0:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80003a2:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003a4:	f000 fdfe 	bl	8000fa4 <HAL_ADC_ConfigChannel>
 80003a8:	2800      	cmp	r0, #0
 80003aa:	d130      	bne.n	800040e <MX_ADC_Init+0xbe>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003ac:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003ae:	0020      	movs	r0, r4
 80003b0:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_2;
 80003b2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003b4:	f000 fdf6 	bl	8000fa4 <HAL_ADC_ConfigChannel>
 80003b8:	2800      	cmp	r0, #0
 80003ba:	d125      	bne.n	8000408 <MX_ADC_Init+0xb8>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003bc:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003be:	0020      	movs	r0, r4
 80003c0:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_3;
 80003c2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003c4:	f000 fdee 	bl	8000fa4 <HAL_ADC_ConfigChannel>
 80003c8:	2800      	cmp	r0, #0
 80003ca:	d11a      	bne.n	8000402 <MX_ADC_Init+0xb2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80003cc:	2310      	movs	r3, #16
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003ce:	0020      	movs	r0, r4
 80003d0:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80003d2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003d4:	f000 fde6 	bl	8000fa4 <HAL_ADC_ConfigChannel>
 80003d8:	2800      	cmp	r0, #0
 80003da:	d10f      	bne.n	80003fc <MX_ADC_Init+0xac>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80003dc:	2311      	movs	r3, #17
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003de:	0020      	movs	r0, r4
 80003e0:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80003e2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003e4:	f000 fdde 	bl	8000fa4 <HAL_ADC_ConfigChannel>
 80003e8:	2800      	cmp	r0, #0
 80003ea:	d104      	bne.n	80003f6 <MX_ADC_Init+0xa6>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003ec:	b004      	add	sp, #16
 80003ee:	bd10      	pop	{r4, pc}
    Error_Handler();
 80003f0:	f000 f9c8 	bl	8000784 <Error_Handler>
 80003f4:	e7cd      	b.n	8000392 <MX_ADC_Init+0x42>
    Error_Handler();
 80003f6:	f000 f9c5 	bl	8000784 <Error_Handler>
}
 80003fa:	e7f7      	b.n	80003ec <MX_ADC_Init+0x9c>
    Error_Handler();
 80003fc:	f000 f9c2 	bl	8000784 <Error_Handler>
 8000400:	e7ec      	b.n	80003dc <MX_ADC_Init+0x8c>
    Error_Handler();
 8000402:	f000 f9bf 	bl	8000784 <Error_Handler>
 8000406:	e7e1      	b.n	80003cc <MX_ADC_Init+0x7c>
    Error_Handler();
 8000408:	f000 f9bc 	bl	8000784 <Error_Handler>
 800040c:	e7d6      	b.n	80003bc <MX_ADC_Init+0x6c>
    Error_Handler();
 800040e:	f000 f9b9 	bl	8000784 <Error_Handler>
 8000412:	e7cb      	b.n	80003ac <MX_ADC_Init+0x5c>
 8000414:	20000078 	.word	0x20000078
 8000418:	40012400 	.word	0x40012400

0800041c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	0004      	movs	r4, r0
 8000420:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	2214      	movs	r2, #20
 8000424:	2100      	movs	r1, #0
 8000426:	a802      	add	r0, sp, #8
 8000428:	f002 fcbc 	bl	8002da4 <memset>
  if(adcHandle->Instance==ADC1)
 800042c:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <HAL_ADC_MspInit+0x98>)
 800042e:	6822      	ldr	r2, [r4, #0]
 8000430:	429a      	cmp	r2, r3
 8000432:	d001      	beq.n	8000438 <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000434:	b008      	add	sp, #32
 8000436:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000438:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 800043c:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <HAL_ADC_MspInit+0x9c>)
 800043e:	00b6      	lsls	r6, r6, #2
 8000440:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000444:	4332      	orrs	r2, r6
 8000446:	619a      	str	r2, [r3, #24]
 8000448:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044a:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 800044c:	4032      	ands	r2, r6
 800044e:	9200      	str	r2, [sp, #0]
 8000450:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000454:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	430a      	orrs	r2, r1
 8000458:	615a      	str	r2, [r3, #20]
 800045a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = ADC_GPIO_Pin|ADC_VCC_Pin|ADC_INA_Pin;
 800045c:	220e      	movs	r2, #14
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800045e:	400b      	ands	r3, r1
 8000460:	9301      	str	r3, [sp, #4]
 8000462:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ADC_GPIO_Pin|ADC_VCC_Pin|ADC_INA_Pin;
 8000464:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000466:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = ADC_GPIO_Pin|ADC_VCC_Pin|ADC_INA_Pin;
 8000468:	9202      	str	r2, [sp, #8]
 800046a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	f000 ffde 	bl	800142c <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000470:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8000472:	4d12      	ldr	r5, [pc, #72]	; (80004bc <HAL_ADC_MspInit+0xa0>)
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <HAL_ADC_MspInit+0xa4>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000476:	60ea      	str	r2, [r5, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	0112      	lsls	r2, r2, #4
    hdma_adc.Instance = DMA1_Channel1;
 800047c:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800047e:	616a      	str	r2, [r5, #20]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000480:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000482:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000484:	0028      	movs	r0, r5
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000486:	606b      	str	r3, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000488:	60ab      	str	r3, [r5, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800048a:	612e      	str	r6, [r5, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800048c:	61aa      	str	r2, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800048e:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000490:	f000 ff0a 	bl	80012a8 <HAL_DMA_Init>
 8000494:	2800      	cmp	r0, #0
 8000496:	d10a      	bne.n	80004ae <HAL_ADC_MspInit+0x92>
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000498:	2200      	movs	r2, #0
 800049a:	2100      	movs	r1, #0
 800049c:	200c      	movs	r0, #12
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800049e:	6325      	str	r5, [r4, #48]	; 0x30
 80004a0:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80004a2:	f000 fea9 	bl	80011f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80004a6:	200c      	movs	r0, #12
 80004a8:	f000 fed8 	bl	800125c <HAL_NVIC_EnableIRQ>
}
 80004ac:	e7c2      	b.n	8000434 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80004ae:	f000 f969 	bl	8000784 <Error_Handler>
 80004b2:	e7f1      	b.n	8000498 <HAL_ADC_MspInit+0x7c>
 80004b4:	40012400 	.word	0x40012400
 80004b8:	40021000 	.word	0x40021000
 80004bc:	200000b8 	.word	0x200000b8
 80004c0:	40020008 	.word	0x40020008

080004c4 <MX_CAN_Init>:
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80004c4:	480a      	ldr	r0, [pc, #40]	; (80004f0 <MX_CAN_Init+0x2c>)
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_CAN_Init+0x30>)
{
 80004c8:	b510      	push	{r4, lr}
  hcan.Instance = CAN;
 80004ca:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 16;
 80004cc:	2310      	movs	r3, #16
 80004ce:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004d0:	2300      	movs	r3, #0
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004d2:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004d4:	8383      	strh	r3, [r0, #28]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004d6:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004d8:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80004da:	6103      	str	r3, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004dc:	6143      	str	r3, [r0, #20]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004de:	f000 fdf5 	bl	80010cc <HAL_CAN_Init>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d100      	bne.n	80004e8 <MX_CAN_Init+0x24>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004e6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80004e8:	f000 f94c 	bl	8000784 <Error_Handler>
}
 80004ec:	e7fb      	b.n	80004e6 <MX_CAN_Init+0x22>
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	200000fc 	.word	0x200000fc
 80004f4:	40006400 	.word	0x40006400

080004f8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80004f8:	b510      	push	{r4, lr}
 80004fa:	0004      	movs	r4, r0
 80004fc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	2214      	movs	r2, #20
 8000500:	2100      	movs	r1, #0
 8000502:	a802      	add	r0, sp, #8
 8000504:	f002 fc4e 	bl	8002da4 <memset>
  if(canHandle->Instance==CAN)
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <HAL_CAN_MspInit+0x60>)
 800050a:	6822      	ldr	r2, [r4, #0]
 800050c:	429a      	cmp	r2, r3
 800050e:	d001      	beq.n	8000514 <HAL_CAN_MspInit+0x1c>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000510:	b008      	add	sp, #32
 8000512:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_CAN_MspInit+0x64>)
 8000518:	0489      	lsls	r1, r1, #18
 800051a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_CAN1_CLK_ENABLE();
 800051e:	430a      	orrs	r2, r1
 8000520:	61da      	str	r2, [r3, #28]
 8000522:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000526:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_CAN1_CLK_ENABLE();
 800052a:	9200      	str	r2, [sp, #0]
 800052c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	695a      	ldr	r2, [r3, #20]
 8000530:	0289      	lsls	r1, r1, #10
 8000532:	430a      	orrs	r2, r1
 8000534:	615a      	str	r2, [r3, #20]
 8000536:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000538:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	400b      	ands	r3, r1
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000540:	2302      	movs	r3, #2
 8000542:	0152      	lsls	r2, r2, #5
 8000544:	9202      	str	r2, [sp, #8]
 8000546:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000548:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800054e:	3301      	adds	r3, #1
 8000550:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000552:	f000 ff6b 	bl	800142c <HAL_GPIO_Init>
}
 8000556:	e7db      	b.n	8000510 <HAL_CAN_MspInit+0x18>
 8000558:	40006400 	.word	0x40006400
 800055c:	40021000 	.word	0x40021000

08000560 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000560:	2301      	movs	r3, #1
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <MX_DMA_Init+0x2c>)
{
 8000564:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	6951      	ldr	r1, [r2, #20]
{
 8000568:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056a:	4319      	orrs	r1, r3
 800056c:	6151      	str	r1, [r2, #20]
 800056e:	6952      	ldr	r2, [r2, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000570:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000572:	4013      	ands	r3, r2
 8000574:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800057a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800057c:	f000 fe3c 	bl	80011f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000580:	2009      	movs	r0, #9
 8000582:	f000 fe6b 	bl	800125c <HAL_NVIC_EnableIRQ>

}
 8000586:	b003      	add	sp, #12
 8000588:	bd00      	pop	{pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	40021000 	.word	0x40021000

08000590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	2214      	movs	r2, #20
 8000596:	2100      	movs	r1, #0
 8000598:	a804      	add	r0, sp, #16
 800059a:	f002 fc03 	bl	8002da4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <MX_GPIO_Init+0x90>)
 80005a2:	03c9      	lsls	r1, r1, #15
 80005a4:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NMOS_GPIO_Port, NMOS_Pin, GPIO_PIN_RESET);
 80005a6:	2590      	movs	r5, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a8:	430a      	orrs	r2, r1
 80005aa:	615a      	str	r2, [r3, #20]
 80005ac:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005ae:	4c1d      	ldr	r4, [pc, #116]	; (8000624 <MX_GPIO_Init+0x94>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005b0:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	695a      	ldr	r2, [r3, #20]
 80005ba:	0289      	lsls	r1, r1, #10
 80005bc:	430a      	orrs	r2, r1
 80005be:	615a      	str	r2, [r3, #20]
 80005c0:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(NMOS_GPIO_Port, NMOS_Pin, GPIO_PIN_RESET);
 80005c2:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c4:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	9202      	str	r2, [sp, #8]
 80005ca:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005cc:	695a      	ldr	r2, [r3, #20]
 80005ce:	02c9      	lsls	r1, r1, #11
 80005d0:	430a      	orrs	r2, r1
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(NMOS_GPIO_Port, NMOS_Pin, GPIO_PIN_RESET);
 80005d6:	0028      	movs	r0, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d8:	400b      	ands	r3, r1
 80005da:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(NMOS_GPIO_Port, NMOS_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(NMOS_GPIO_Port, NMOS_Pin, GPIO_PIN_RESET);
 80005e2:	f001 f821 	bl	8001628 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005e6:	0020      	movs	r0, r4
 80005e8:	2200      	movs	r2, #0
 80005ea:	2110      	movs	r1, #16
 80005ec:	f001 f81c 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NMOS_Pin;
 80005f0:	2600      	movs	r6, #0
 80005f2:	2220      	movs	r2, #32
 80005f4:	2301      	movs	r3, #1
 80005f6:	2700      	movs	r7, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(NMOS_GPIO_Port, &GPIO_InitStruct);
 80005f8:	0028      	movs	r0, r5
 80005fa:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = NMOS_Pin;
 80005fc:	9204      	str	r2, [sp, #16]
 80005fe:	9305      	str	r3, [sp, #20]
 8000600:	9606      	str	r6, [sp, #24]
 8000602:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(NMOS_GPIO_Port, &GPIO_InitStruct);
 8000604:	f000 ff12 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000608:	2210      	movs	r2, #16
 800060a:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800060c:	0020      	movs	r0, r4
 800060e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LED_Pin;
 8000610:	9204      	str	r2, [sp, #16]
 8000612:	9305      	str	r3, [sp, #20]
 8000614:	9606      	str	r6, [sp, #24]
 8000616:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000618:	f000 ff08 	bl	800142c <HAL_GPIO_Init>

}
 800061c:	b00b      	add	sp, #44	; 0x2c
 800061e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000620:	40021000 	.word	0x40021000
 8000624:	48000400 	.word	0x48000400

08000628 <my_printf.constprop.0>:
    if(0 < vsprintf(string,fmt,argp)) // build string
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xfffffff); // send message via UART
    }
}
void my_printf(const char *fmt, ...) // custom printf() function
 8000628:	b40f      	push	{r0, r1, r2, r3}
 800062a:	b510      	push	{r4, lr}
    if(0 < vsprintf(string,fmt,argp)) // build string
 800062c:	4c0b      	ldr	r4, [pc, #44]	; (800065c <my_printf.constprop.0+0x34>)
void my_printf(const char *fmt, ...) // custom printf() function
 800062e:	b082      	sub	sp, #8
{
    va_list argp;
    va_start(argp, fmt);
 8000630:	aa05      	add	r2, sp, #20
    if(0 < vsprintf(string,fmt,argp)) // build string
 8000632:	0020      	movs	r0, r4
 8000634:	490a      	ldr	r1, [pc, #40]	; (8000660 <my_printf.constprop.0+0x38>)
    va_start(argp, fmt);
 8000636:	9201      	str	r2, [sp, #4]
    if(0 < vsprintf(string,fmt,argp)) // build string
 8000638:	f002 fba8 	bl	8002d8c <vsiprintf>
 800063c:	2800      	cmp	r0, #0
 800063e:	dd08      	ble.n	8000652 <my_printf.constprop.0+0x2a>
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xfffffff); // send message via UART
 8000640:	0020      	movs	r0, r4
 8000642:	f7ff fd61 	bl	8000108 <strlen>
 8000646:	0021      	movs	r1, r4
 8000648:	b282      	uxth	r2, r0
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <my_printf.constprop.0+0x3c>)
 800064c:	4806      	ldr	r0, [pc, #24]	; (8000668 <my_printf.constprop.0+0x40>)
 800064e:	f001 fff9 	bl	8002644 <HAL_UART_Transmit>
    vprint(fmt, argp);
    va_end(argp);
}
 8000652:	b002      	add	sp, #8
 8000654:	bc10      	pop	{r4}
 8000656:	bc08      	pop	{r3}
 8000658:	b004      	add	sp, #16
 800065a:	4718      	bx	r3
 800065c:	20000124 	.word	0x20000124
 8000660:	080036c8 	.word	0x080036c8
 8000664:	0fffffff 	.word	0x0fffffff
 8000668:	200001d4 	.word	0x200001d4

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b530      	push	{r4, r5, lr}
 800066e:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000670:	222c      	movs	r2, #44	; 0x2c
 8000672:	2100      	movs	r1, #0
 8000674:	a80c      	add	r0, sp, #48	; 0x30
 8000676:	f002 fb95 	bl	8002da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067a:	2210      	movs	r2, #16
 800067c:	2100      	movs	r1, #0
 800067e:	4668      	mov	r0, sp
 8000680:	f002 fb90 	bl	8002da4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000684:	2218      	movs	r2, #24
 8000686:	2100      	movs	r1, #0
 8000688:	a804      	add	r0, sp, #16
 800068a:	f002 fb8b 	bl	8002da4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 800068e:	2301      	movs	r3, #1
 8000690:	2211      	movs	r2, #17
 8000692:	920a      	str	r2, [sp, #40]	; 0x28
 8000694:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000696:	2310      	movs	r3, #16
 8000698:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800069c:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a0:	025b      	lsls	r3, r3, #9
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80006a4:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a8:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f000 ffcb 	bl	8001644 <HAL_RCC_OscConfig>
 80006ae:	2800      	cmp	r0, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006bc:	2101      	movs	r1, #1
 80006be:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c4:	f001 fa74 	bl	8001bb0 <HAL_RCC_ClockConfig>
 80006c8:	2800      	cmp	r0, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x64>
 80006cc:	b672      	cpsid	i
  while (1)
 80006ce:	e7fe      	b.n	80006ce <SystemClock_Config+0x62>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006d0:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d2:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006d4:	9504      	str	r5, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d6:	f001 fb93 	bl	8001e00 <HAL_RCCEx_PeriphCLKConfig>
 80006da:	2800      	cmp	r0, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x76>
 80006de:	b672      	cpsid	i
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <SystemClock_Config+0x74>
}
 80006e2:	b019      	add	sp, #100	; 0x64
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)

080006e8 <main>:
{
 80006e8:	b570      	push	{r4, r5, r6, lr}
	  uint32_t temp_VCC = value[1]*43; //5V = 120mV measured
 80006ea:	252b      	movs	r5, #43	; 0x2b
{
 80006ec:	b086      	sub	sp, #24
  HAL_Init();
 80006ee:	f000 fa1b 	bl	8000b28 <HAL_Init>
  SystemClock_Config();
 80006f2:	f7ff ffbb 	bl	800066c <SystemClock_Config>
  MX_GPIO_Init();
 80006f6:	f7ff ff4b 	bl	8000590 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fa:	f7ff ff31 	bl	8000560 <MX_DMA_Init>
  MX_ADC_Init();
 80006fe:	f7ff fe27 	bl	8000350 <MX_ADC_Init>
  MX_CAN_Init();
 8000702:	f7ff fedf 	bl	80004c4 <MX_CAN_Init>
  MX_TIM1_Init();
 8000706:	f000 f89d 	bl	8000844 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800070a:	f000 f955 	bl	80009b8 <MX_USART1_UART_Init>
  HAL_ADC_Start_DMA(&hadc, value, 5); // start adc in DMA mode
 800070e:	2205      	movs	r2, #5
 8000710:	a901      	add	r1, sp, #4
 8000712:	4816      	ldr	r0, [pc, #88]	; (800076c <main+0x84>)
 8000714:	f000 fb3e 	bl	8000d94 <HAL_ADC_Start_DMA>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000718:	2100      	movs	r1, #0
 800071a:	4815      	ldr	r0, [pc, #84]	; (8000770 <main+0x88>)
 800071c:	f001 feea 	bl	80024f4 <HAL_TIMEx_PWMN_Start>
  input_t CAN_in = {
 8000720:	4e14      	ldr	r6, [pc, #80]	; (8000774 <main+0x8c>)
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000722:	2110      	movs	r1, #16
 8000724:	4814      	ldr	r0, [pc, #80]	; (8000778 <main+0x90>)
 8000726:	f000 ff85 	bl	8001634 <HAL_GPIO_TogglePin>
	  float temp_INA_gram = (float)(value[2]-INA_OFFSET);//*VCC*3300.0f/4095.0f;//*3300/4095*VCC/2;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <main+0x94>)
 800072c:	9803      	ldr	r0, [sp, #12]
 800072e:	469c      	mov	ip, r3
 8000730:	4460      	add	r0, ip
 8000732:	f7ff fda7 	bl	8000284 <__aeabi_ui2f>
	  my_printf("%UL\t%d\n", (int32_t)temp_INA_gram, temp_VCC);
 8000736:	f7ff fd85 	bl	8000244 <__aeabi_f2iz>
	  uint32_t temp_VCC = value[1]*43; //5V = 120mV measured
 800073a:	9c02      	ldr	r4, [sp, #8]
	  my_printf("%UL\t%d\n", (int32_t)temp_INA_gram, temp_VCC);
 800073c:	0001      	movs	r1, r0
	  uint32_t temp_VCC = value[1]*43; //5V = 120mV measured
 800073e:	436c      	muls	r4, r5
	  my_printf("%UL\t%d\n", (int32_t)temp_INA_gram, temp_VCC);
 8000740:	0030      	movs	r0, r6
 8000742:	0022      	movs	r2, r4
 8000744:	f7ff ff70 	bl	8000628 <my_printf.constprop.0>
	TIM1->CCR1 = duty_us*AAR/period_us; //pulse width
 8000748:	22fa      	movs	r2, #250	; 0xfa
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <main+0x98>)
 800074c:	0212      	lsls	r2, r2, #8
 800074e:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_GPIO_WritePin(NMOS_GPIO_Port, NMOS_Pin, CAN_in.NMOS);
 8000750:	2090      	movs	r0, #144	; 0x90
	TIM1->ARR = AAR;
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->PSC =  prescale;
 8000754:	2200      	movs	r2, #0
	  HAL_GPIO_WritePin(NMOS_GPIO_Port, NMOS_Pin, CAN_in.NMOS);
 8000756:	2120      	movs	r1, #32
	TIM1->PSC =  prescale;
 8000758:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_GPIO_WritePin(NMOS_GPIO_Port, NMOS_Pin, CAN_in.NMOS);
 800075a:	05c0      	lsls	r0, r0, #23
 800075c:	3201      	adds	r2, #1
 800075e:	f000 ff63 	bl	8001628 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f000 fa02 	bl	8000b6c <HAL_Delay>
  while (1)
 8000768:	e7db      	b.n	8000722 <main+0x3a>
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	20000078 	.word	0x20000078
 8000770:	2000018c 	.word	0x2000018c
 8000774:	080036c8 	.word	0x080036c8
 8000778:	48000400 	.word	0x48000400
 800077c:	fffff835 	.word	0xfffff835
 8000780:	40012c00 	.word	0x40012c00

08000784 <Error_Handler>:
 8000784:	b672      	cpsid	i
  while (1)
 8000786:	e7fe      	b.n	8000786 <Error_Handler+0x2>

08000788 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000788:	2201      	movs	r2, #1
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_MspInit+0x34>)
{
 800078c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	6999      	ldr	r1, [r3, #24]
 8000790:	4311      	orrs	r1, r2
 8000792:	6199      	str	r1, [r3, #24]
 8000794:	6999      	ldr	r1, [r3, #24]
 8000796:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	9200      	str	r2, [sp, #0]
 800079c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	69da      	ldr	r2, [r3, #28]
 80007a0:	0549      	lsls	r1, r1, #21
 80007a2:	430a      	orrs	r2, r1
 80007a4:	61da      	str	r2, [r3, #28]
 80007a6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 80007a8:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <HAL_MspInit+0x38>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	400b      	ands	r3, r1
  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 80007ac:	2110      	movs	r1, #16
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	9b01      	ldr	r3, [sp, #4]
  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 80007b2:	6813      	ldr	r3, [r2, #0]
 80007b4:	430b      	orrs	r3, r1
 80007b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b8:	b002      	add	sp, #8
 80007ba:	4770      	bx	lr
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40010000 	.word	0x40010000

080007c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <NMI_Handler>
 80007c6:	46c0      	nop			; (mov r8, r8)

080007c8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <HardFault_Handler>
 80007ca:	46c0      	nop			; (mov r8, r8)

080007cc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007cc:	4770      	bx	lr
 80007ce:	46c0      	nop			; (mov r8, r8)

080007d0 <PendSV_Handler>:
 80007d0:	4770      	bx	lr
 80007d2:	46c0      	nop			; (mov r8, r8)

080007d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d6:	f000 f9b7 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007da:	bd10      	pop	{r4, pc}

080007dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80007de:	4802      	ldr	r0, [pc, #8]	; (80007e8 <DMA1_Channel1_IRQHandler+0xc>)
 80007e0:	f000 fdd6 	bl	8001390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007e4:	bd10      	pop	{r4, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	200000b8 	.word	0x200000b8

080007ec <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 80007ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80007ee:	4802      	ldr	r0, [pc, #8]	; (80007f8 <ADC1_IRQHandler+0xc>)
 80007f0:	f000 fb6e 	bl	8000ed0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80007f4:	bd10      	pop	{r4, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	20000078 	.word	0x20000078

080007fc <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007fc:	490c      	ldr	r1, [pc, #48]	; (8000830 <_sbrk+0x34>)
 80007fe:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <_sbrk+0x38>)
{
 8000800:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000802:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000804:	490c      	ldr	r1, [pc, #48]	; (8000838 <_sbrk+0x3c>)
{
 8000806:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000808:	6808      	ldr	r0, [r1, #0]
 800080a:	2800      	cmp	r0, #0
 800080c:	d004      	beq.n	8000818 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080e:	18c3      	adds	r3, r0, r3
 8000810:	4293      	cmp	r3, r2
 8000812:	d806      	bhi.n	8000822 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000814:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8000816:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 800081a:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 800081c:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800081e:	4293      	cmp	r3, r2
 8000820:	d9f8      	bls.n	8000814 <_sbrk+0x18>
    errno = ENOMEM;
 8000822:	f002 fac7 	bl	8002db4 <__errno>
 8000826:	230c      	movs	r3, #12
 8000828:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800082a:	2001      	movs	r0, #1
 800082c:	4240      	negs	r0, r0
 800082e:	e7f2      	b.n	8000816 <_sbrk+0x1a>
 8000830:	00000400 	.word	0x00000400
 8000834:	20001800 	.word	0x20001800
 8000838:	20000188 	.word	0x20000188
 800083c:	200003a8 	.word	0x200003a8

08000840 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000840:	4770      	bx	lr
 8000842:	46c0      	nop			; (mov r8, r8)

08000844 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000844:	b510      	push	{r4, lr}
 8000846:	b09e      	sub	sp, #120	; 0x78

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000848:	2210      	movs	r2, #16
 800084a:	2100      	movs	r1, #0
 800084c:	a804      	add	r0, sp, #16
 800084e:	f002 faa9 	bl	8002da4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000852:	2208      	movs	r2, #8
 8000854:	2100      	movs	r1, #0
 8000856:	a802      	add	r0, sp, #8
 8000858:	f002 faa4 	bl	8002da4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085c:	221c      	movs	r2, #28
 800085e:	2100      	movs	r1, #0
 8000860:	a80e      	add	r0, sp, #56	; 0x38
 8000862:	f002 fa9f 	bl	8002da4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000866:	2220      	movs	r2, #32
 8000868:	2100      	movs	r1, #0
 800086a:	a816      	add	r0, sp, #88	; 0x58
 800086c:	f002 fa9a 	bl	8002da4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000870:	4c42      	ldr	r4, [pc, #264]	; (800097c <MX_TIM1_Init+0x138>)
 8000872:	4b43      	ldr	r3, [pc, #268]	; (8000980 <MX_TIM1_Init+0x13c>)
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
 8000874:	4a43      	ldr	r2, [pc, #268]	; (8000984 <MX_TIM1_Init+0x140>)
  htim1.Instance = TIM1;
 8000876:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
 8000878:	2300      	movs	r3, #0
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800087a:	0020      	movs	r0, r4
  htim1.Init.Prescaler = 0;
 800087c:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087e:	60a3      	str	r3, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000880:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8000882:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000884:	3380      	adds	r3, #128	; 0x80
  htim1.Init.Period = 65535;
 8000886:	60e2      	str	r2, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000888:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800088a:	f001 fb69 	bl	8001f60 <HAL_TIM_Base_Init>
 800088e:	2800      	cmp	r0, #0
 8000890:	d14b      	bne.n	800092a <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000892:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000894:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000896:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000898:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800089c:	f001 fd72 	bl	8002384 <HAL_TIM_ConfigClockSource>
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d151      	bne.n	8000948 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008a4:	0020      	movs	r0, r4
 80008a6:	f001 fbd5 	bl	8002054 <HAL_TIM_PWM_Init>
 80008aa:	2800      	cmp	r0, #0
 80008ac:	d149      	bne.n	8000942 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ae:	2200      	movs	r2, #0
 80008b0:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b2:	0020      	movs	r0, r4
 80008b4:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	9202      	str	r2, [sp, #8]
 80008b8:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ba:	f001 fe63 	bl	8002584 <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d13c      	bne.n	800093c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c2:	2360      	movs	r3, #96	; 0x60
 80008c4:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008c6:	2300      	movs	r3, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c8:	2200      	movs	r2, #0
  sConfigOC.Pulse = 0;
 80008ca:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008cc:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ce:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	9212      	str	r2, [sp, #72]	; 0x48
 80008d4:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80008d6:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d8:	0020      	movs	r0, r4
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80008da:	009b      	lsls	r3, r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008dc:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80008de:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e0:	f001 fc30 	bl	8002144 <HAL_TIM_PWM_ConfigChannel>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d126      	bne.n	8000936 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80008e8:	2108      	movs	r1, #8
 80008ea:	6822      	ldr	r2, [r4, #0]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ec:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80008ee:	6993      	ldr	r3, [r2, #24]
 80008f0:	438b      	bics	r3, r1
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008f2:	2180      	movs	r1, #128	; 0x80
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80008f4:	6193      	str	r3, [r2, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008f6:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008f8:	0189      	lsls	r1, r1, #6
 80008fa:	901a      	str	r0, [sp, #104]	; 0x68
 80008fc:	911b      	str	r1, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008fe:	0020      	movs	r0, r4
 8000900:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000902:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000904:	9317      	str	r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000906:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.DeadTime = 0;
 8000908:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800090a:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800090c:	f001 fe68 	bl	80025e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000910:	2800      	cmp	r0, #0
 8000912:	d10d      	bne.n	8000930 <MX_TIM1_Init+0xec>
  }
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	2214      	movs	r2, #20
 8000916:	2100      	movs	r1, #0
 8000918:	a808      	add	r0, sp, #32
 800091a:	f002 fa43 	bl	8002da4 <memset>
  if(timHandle->Instance==TIM1)
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_TIM1_Init+0x13c>)
 8000920:	6822      	ldr	r2, [r4, #0]
 8000922:	429a      	cmp	r2, r3
 8000924:	d013      	beq.n	800094e <MX_TIM1_Init+0x10a>
}
 8000926:	b01e      	add	sp, #120	; 0x78
 8000928:	bd10      	pop	{r4, pc}
    Error_Handler();
 800092a:	f7ff ff2b 	bl	8000784 <Error_Handler>
 800092e:	e7b0      	b.n	8000892 <MX_TIM1_Init+0x4e>
    Error_Handler();
 8000930:	f7ff ff28 	bl	8000784 <Error_Handler>
 8000934:	e7ee      	b.n	8000914 <MX_TIM1_Init+0xd0>
    Error_Handler();
 8000936:	f7ff ff25 	bl	8000784 <Error_Handler>
 800093a:	e7d5      	b.n	80008e8 <MX_TIM1_Init+0xa4>
    Error_Handler();
 800093c:	f7ff ff22 	bl	8000784 <Error_Handler>
 8000940:	e7bf      	b.n	80008c2 <MX_TIM1_Init+0x7e>
    Error_Handler();
 8000942:	f7ff ff1f 	bl	8000784 <Error_Handler>
 8000946:	e7b2      	b.n	80008ae <MX_TIM1_Init+0x6a>
    Error_Handler();
 8000948:	f7ff ff1c 	bl	8000784 <Error_Handler>
 800094c:	e7aa      	b.n	80008a4 <MX_TIM1_Init+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2180      	movs	r1, #128	; 0x80
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <MX_TIM1_Init+0x144>)
 8000952:	0289      	lsls	r1, r1, #10
 8000954:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	430a      	orrs	r2, r1
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800095e:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	400b      	ands	r3, r1
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000966:	2302      	movs	r3, #2
 8000968:	9208      	str	r2, [sp, #32]
 800096a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800096c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	a908      	add	r1, sp, #32
 8000970:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000972:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f000 fd5a 	bl	800142c <HAL_GPIO_Init>
}
 8000978:	e7d5      	b.n	8000926 <MX_TIM1_Init+0xe2>
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	2000018c 	.word	0x2000018c
 8000980:	40012c00 	.word	0x40012c00
 8000984:	0000ffff 	.word	0x0000ffff
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM1)
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_TIM_Base_MspInit+0x24>)
 800098e:	6802      	ldr	r2, [r0, #0]
{
 8000990:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8000992:	429a      	cmp	r2, r3
 8000994:	d001      	beq.n	800099a <HAL_TIM_Base_MspInit+0xe>
}
 8000996:	b002      	add	sp, #8
 8000998:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <HAL_TIM_Base_MspInit+0x28>)
 800099e:	0109      	lsls	r1, r1, #4
 80009a0:	699a      	ldr	r2, [r3, #24]
 80009a2:	430a      	orrs	r2, r1
 80009a4:	619a      	str	r2, [r3, #24]
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	400b      	ands	r3, r1
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	9b01      	ldr	r3, [sp, #4]
}
 80009ae:	e7f2      	b.n	8000996 <HAL_TIM_Base_MspInit+0xa>
 80009b0:	40012c00 	.word	0x40012c00
 80009b4:	40021000 	.word	0x40021000

080009b8 <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <MX_USART1_UART_Init+0x34>)
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <MX_USART1_UART_Init+0x38>)
{
 80009bc:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80009be:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80009c0:	23e1      	movs	r3, #225	; 0xe1
 80009c2:	025b      	lsls	r3, r3, #9
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c4:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80009c6:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c8:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ca:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009cc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ce:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d0:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009da:	f002 f8fb 	bl	8002bd4 <HAL_UART_Init>
 80009de:	2800      	cmp	r0, #0
 80009e0:	d100      	bne.n	80009e4 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009e2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80009e4:	f7ff fece 	bl	8000784 <Error_Handler>
}
 80009e8:	e7fb      	b.n	80009e2 <MX_USART1_UART_Init+0x2a>
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	200001d4 	.word	0x200001d4
 80009f0:	40013800 	.word	0x40013800

080009f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009f4:	b510      	push	{r4, lr}
 80009f6:	0004      	movs	r4, r0
 80009f8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	2214      	movs	r2, #20
 80009fc:	2100      	movs	r1, #0
 80009fe:	a802      	add	r0, sp, #8
 8000a00:	f002 f9d0 	bl	8002da4 <memset>
  if(uartHandle->Instance==USART1)
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_UART_MspInit+0x58>)
 8000a06:	6822      	ldr	r2, [r4, #0]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d001      	beq.n	8000a10 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a0c:	b008      	add	sp, #32
 8000a0e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_UART_MspInit+0x5c>)
 8000a14:	01c9      	lsls	r1, r1, #7
 8000a16:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	480e      	ldr	r0, [pc, #56]	; (8000a54 <HAL_UART_MspInit+0x60>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	619a      	str	r2, [r3, #24]
 8000a1e:	699a      	ldr	r2, [r3, #24]
 8000a20:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a24:	9200      	str	r2, [sp, #0]
 8000a26:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a28:	695a      	ldr	r2, [r3, #20]
 8000a2a:	02c9      	lsls	r1, r1, #11
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	615a      	str	r2, [r3, #20]
 8000a30:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a32:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a34:	400b      	ands	r3, r1
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	9202      	str	r2, [sp, #8]
 8000a3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a40:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a44:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f000 fcf1 	bl	800142c <HAL_GPIO_Init>
}
 8000a4a:	e7df      	b.n	8000a0c <HAL_UART_MspInit+0x18>
 8000a4c:	40013800 	.word	0x40013800
 8000a50:	40021000 	.word	0x40021000
 8000a54:	48000400 	.word	0x48000400

08000a58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a58:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a5a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a5c:	f7ff fef0 	bl	8000840 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000a60:	4812      	ldr	r0, [pc, #72]	; (8000aac <LoopForever+0x6>)
    LDR R1, [R0]
 8000a62:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000a64:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <LoopForever+0xa>)
    CMP R1, R2
 8000a68:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000a6a:	d105      	bne.n	8000a78 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a6e:	4912      	ldr	r1, [pc, #72]	; (8000ab8 <LoopForever+0x12>)
    STR R1, [R0]
 8000a70:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a72:	4812      	ldr	r0, [pc, #72]	; (8000abc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a74:	4912      	ldr	r1, [pc, #72]	; (8000ac0 <LoopForever+0x1a>)
    STR R1, [R0]
 8000a76:	6001      	str	r1, [r0, #0]

08000a78 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a78:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000a7a:	4913      	ldr	r1, [pc, #76]	; (8000ac8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000a7c:	4a13      	ldr	r2, [pc, #76]	; (8000acc <LoopForever+0x26>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000a90:	4c10      	ldr	r4, [pc, #64]	; (8000ad4 <LoopForever+0x2e>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a9e:	f002 f98f 	bl	8002dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa2:	f7ff fe21 	bl	80006e8 <main>

08000aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa6:	e7fe      	b.n	8000aa6 <LoopForever>
  ldr   r0, =_estack
 8000aa8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000aac:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000ab0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000ab4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000ab8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000abc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000ac0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000acc:	08003748 	.word	0x08003748
  ldr r2, =_sbss
 8000ad0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ad4:	200003a8 	.word	0x200003a8

08000ad8 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <CEC_CAN_IRQHandler>
	...

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	20fa      	movs	r0, #250	; 0xfa
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_InitTick+0x40>)
 8000ae4:	0080      	lsls	r0, r0, #2
 8000ae6:	7819      	ldrb	r1, [r3, #0]
 8000ae8:	f7ff fb20 	bl	800012c <__udivsi3>
 8000aec:	4d0c      	ldr	r5, [pc, #48]	; (8000b20 <HAL_InitTick+0x44>)
 8000aee:	0001      	movs	r1, r0
 8000af0:	6828      	ldr	r0, [r5, #0]
 8000af2:	f7ff fb1b 	bl	800012c <__udivsi3>
 8000af6:	f000 fbbd 	bl	8001274 <HAL_SYSTICK_Config>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d10c      	bne.n	8000b18 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8000afe:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b00:	2c03      	cmp	r4, #3
 8000b02:	d900      	bls.n	8000b06 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000b04:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b06:	3802      	subs	r0, #2
 8000b08:	2200      	movs	r2, #0
 8000b0a:	0021      	movs	r1, r4
 8000b0c:	f000 fb74 	bl	80011f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <HAL_InitTick+0x48>)
 8000b12:	2000      	movs	r0, #0
 8000b14:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000b16:	e7f5      	b.n	8000b04 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8000b18:	2001      	movs	r0, #1
 8000b1a:	e7f3      	b.n	8000b04 <HAL_InitTick+0x28>
 8000b1c:	20000004 	.word	0x20000004
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000008 	.word	0x20000008

08000b28 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_Init+0x1c>)
{
 8000b2c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2e:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b30:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b32:	430b      	orrs	r3, r1
 8000b34:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b36:	f7ff ffd1 	bl	8000adc <HAL_InitTick>
  HAL_MspInit();
 8000b3a:	f7ff fe25 	bl	8000788 <HAL_MspInit>
}
 8000b3e:	2000      	movs	r0, #0
 8000b40:	bd10      	pop	{r4, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b48:	4a03      	ldr	r2, [pc, #12]	; (8000b58 <HAL_IncTick+0x10>)
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <HAL_IncTick+0x14>)
 8000b4c:	6811      	ldr	r1, [r2, #0]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	185b      	adds	r3, r3, r1
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	4770      	bx	lr
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	2000025c 	.word	0x2000025c
 8000b5c:	20000004 	.word	0x20000004

08000b60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b60:	4b01      	ldr	r3, [pc, #4]	; (8000b68 <HAL_GetTick+0x8>)
 8000b62:	6818      	ldr	r0, [r3, #0]
}
 8000b64:	4770      	bx	lr
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	2000025c 	.word	0x2000025c

08000b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b70:	f7ff fff6 	bl	8000b60 <HAL_GetTick>
 8000b74:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b76:	1c63      	adds	r3, r4, #1
 8000b78:	d002      	beq.n	8000b80 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <HAL_Delay+0x20>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b80:	f7ff ffee 	bl	8000b60 <HAL_GetTick>
 8000b84:	1b40      	subs	r0, r0, r5
 8000b86:	42a0      	cmp	r0, r4
 8000b88:	d3fa      	bcc.n	8000b80 <HAL_Delay+0x14>
  {
  }
}
 8000b8a:	bd70      	pop	{r4, r5, r6, pc}
 8000b8c:	20000004 	.word	0x20000004

08000b90 <ADC_Enable.constprop.0>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000b90:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8000b92:	b570      	push	{r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b94:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8000b96:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8000b98:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b9a:	6891      	ldr	r1, [r2, #8]
 8000b9c:	3303      	adds	r3, #3
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8000b9e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ba0:	400b      	ands	r3, r1
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d037      	beq.n	8000c16 <ADC_Enable.constprop.0+0x86>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000ba6:	6891      	ldr	r1, [r2, #8]
 8000ba8:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <ADC_Enable.constprop.0+0xa8>)
 8000baa:	4219      	tst	r1, r3
 8000bac:	d129      	bne.n	8000c02 <ADC_Enable.constprop.0+0x72>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	6893      	ldr	r3, [r2, #8]
 8000bb2:	430b      	orrs	r3, r1
 8000bb4:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <ADC_Enable.constprop.0+0xac>)
 8000bb8:	4921      	ldr	r1, [pc, #132]	; (8000c40 <ADC_Enable.constprop.0+0xb0>)
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	f7ff fab6 	bl	800012c <__udivsi3>
 8000bc0:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8000bc2:	9b01      	ldr	r3, [sp, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d005      	beq.n	8000bd4 <ADC_Enable.constprop.0+0x44>
    {
      wait_loop_index--;
 8000bc8:	9b01      	ldr	r3, [sp, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000bce:	9b01      	ldr	r3, [sp, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1f9      	bne.n	8000bc8 <ADC_Enable.constprop.0+0x38>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000bd4:	f7ff ffc4 	bl	8000b60 <HAL_GetTick>
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000bd8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000bda:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000bdc:	681b      	ldr	r3, [r3, #0]
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000bde:	2501      	movs	r5, #1
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000be0:	07db      	lsls	r3, r3, #31
 8000be2:	d40b      	bmi.n	8000bfc <ADC_Enable.constprop.0+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000be4:	f7ff ffbc 	bl	8000b60 <HAL_GetTick>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000be8:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000bea:	1b80      	subs	r0, r0, r6
 8000bec:	2802      	cmp	r0, #2
 8000bee:	d902      	bls.n	8000bf6 <ADC_Enable.constprop.0+0x66>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	4215      	tst	r5, r2
 8000bf4:	d016      	beq.n	8000c24 <ADC_Enable.constprop.0+0x94>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	421d      	tst	r5, r3
 8000bfa:	d0f3      	beq.n	8000be4 <ADC_Enable.constprop.0+0x54>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000bfc:	2000      	movs	r0, #0
}
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c02:	2210      	movs	r2, #16
 8000c04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8000c06:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c0e:	3a0f      	subs	r2, #15
 8000c10:	4313      	orrs	r3, r2
 8000c12:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8000c14:	e7f3      	b.n	8000bfe <ADC_Enable.constprop.0+0x6e>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c16:	6811      	ldr	r1, [r2, #0]
 8000c18:	420b      	tst	r3, r1
 8000c1a:	d1ef      	bne.n	8000bfc <ADC_Enable.constprop.0+0x6c>
 8000c1c:	68d3      	ldr	r3, [r2, #12]
 8000c1e:	041b      	lsls	r3, r3, #16
 8000c20:	d4ec      	bmi.n	8000bfc <ADC_Enable.constprop.0+0x6c>
 8000c22:	e7c0      	b.n	8000ba6 <ADC_Enable.constprop.0+0x16>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c24:	2210      	movs	r2, #16
 8000c26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_ERROR;
 8000c28:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c30:	432b      	orrs	r3, r5
 8000c32:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8000c34:	e7e3      	b.n	8000bfe <ADC_Enable.constprop.0+0x6e>
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	80000017 	.word	0x80000017
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	000f4240 	.word	0x000f4240

08000c44 <HAL_ADC_Init>:
{
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8000c48:	d100      	bne.n	8000c4c <HAL_ADC_Init+0x8>
 8000c4a:	e082      	b.n	8000d52 <HAL_ADC_Init+0x10e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d069      	beq.n	8000d26 <HAL_ADC_Init+0xe2>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000c54:	06db      	lsls	r3, r3, #27
 8000c56:	d460      	bmi.n	8000d1a <HAL_ADC_Init+0xd6>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c58:	6822      	ldr	r2, [r4, #0]
 8000c5a:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000c5c:	075b      	lsls	r3, r3, #29
 8000c5e:	d45c      	bmi.n	8000d1a <HAL_ADC_Init+0xd6>
    ADC_STATE_CLR_SET(hadc->State,
 8000c60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000c62:	4949      	ldr	r1, [pc, #292]	; (8000d88 <HAL_ADC_Init+0x144>)
 8000c64:	400b      	ands	r3, r1
 8000c66:	3106      	adds	r1, #6
 8000c68:	31ff      	adds	r1, #255	; 0xff
 8000c6a:	430b      	orrs	r3, r1
 8000c6c:	63a3      	str	r3, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c6e:	2303      	movs	r3, #3
 8000c70:	6891      	ldr	r1, [r2, #8]
 8000c72:	400b      	ands	r3, r1
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d05c      	beq.n	8000d32 <HAL_ADC_Init+0xee>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c78:	2118      	movs	r1, #24
 8000c7a:	68d3      	ldr	r3, [r2, #12]
 8000c7c:	438b      	bics	r3, r1
 8000c7e:	68a1      	ldr	r1, [r4, #8]
 8000c80:	430b      	orrs	r3, r1
 8000c82:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000c84:	6913      	ldr	r3, [r2, #16]
 8000c86:	6861      	ldr	r1, [r4, #4]
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000c90:	68d3      	ldr	r3, [r2, #12]
 8000c92:	493e      	ldr	r1, [pc, #248]	; (8000d8c <HAL_ADC_Init+0x148>)
 8000c94:	400b      	ands	r3, r1
 8000c96:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c98:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c9a:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c9c:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c9e:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ca0:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ca2:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ca4:	68e1      	ldr	r1, [r4, #12]
 8000ca6:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ca8:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000caa:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000cac:	2124      	movs	r1, #36	; 0x24
 8000cae:	5c61      	ldrb	r1, [r4, r1]
 8000cb0:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000cb2:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000cb4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000cb6:	3901      	subs	r1, #1
 8000cb8:	1e4d      	subs	r5, r1, #1
 8000cba:	41a9      	sbcs	r1, r5
 8000cbc:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000cbe:	430b      	orrs	r3, r1
 8000cc0:	6921      	ldr	r1, [r4, #16]
 8000cc2:	3902      	subs	r1, #2
 8000cc4:	424d      	negs	r5, r1
 8000cc6:	4169      	adcs	r1, r5
 8000cc8:	0089      	lsls	r1, r1, #2
 8000cca:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ccc:	7ee1      	ldrb	r1, [r4, #27]
 8000cce:	2901      	cmp	r1, #1
 8000cd0:	d04b      	beq.n	8000d6a <HAL_ADC_Init+0x126>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cd2:	20c2      	movs	r0, #194	; 0xc2
 8000cd4:	69e1      	ldr	r1, [r4, #28]
 8000cd6:	30ff      	adds	r0, #255	; 0xff
 8000cd8:	4281      	cmp	r1, r0
 8000cda:	d002      	beq.n	8000ce2 <HAL_ADC_Init+0x9e>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000cdc:	6a20      	ldr	r0, [r4, #32]
 8000cde:	4301      	orrs	r1, r0
 8000ce0:	430b      	orrs	r3, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000ce2:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ce4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000ce6:	4319      	orrs	r1, r3
 8000ce8:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	0549      	lsls	r1, r1, #21
 8000cee:	428d      	cmp	r5, r1
 8000cf0:	d026      	beq.n	8000d40 <HAL_ADC_Init+0xfc>
 8000cf2:	1e69      	subs	r1, r5, #1
 8000cf4:	2906      	cmp	r1, #6
 8000cf6:	d923      	bls.n	8000d40 <HAL_ADC_Init+0xfc>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000cf8:	68d2      	ldr	r2, [r2, #12]
 8000cfa:	4925      	ldr	r1, [pc, #148]	; (8000d90 <HAL_ADC_Init+0x14c>)
 8000cfc:	400a      	ands	r2, r1
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d029      	beq.n	8000d56 <HAL_ADC_Init+0x112>
      ADC_STATE_CLR_SET(hadc->State,
 8000d02:	2212      	movs	r2, #18
 8000d04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      tmp_hal_status = HAL_ERROR;
 8000d06:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000d08:	4393      	bics	r3, r2
 8000d0a:	3a02      	subs	r2, #2
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000d12:	3a0f      	subs	r2, #15
 8000d14:	4313      	orrs	r3, r2
 8000d16:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8000d18:	e004      	b.n	8000d24 <HAL_ADC_Init+0xe0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d1a:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 8000d1c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d20:	4313      	orrs	r3, r2
 8000d22:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000d24:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Lock = HAL_UNLOCKED;
 8000d26:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8000d28:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8000d2a:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8000d2c:	f7ff fb76 	bl	800041c <HAL_ADC_MspInit>
 8000d30:	e78f      	b.n	8000c52 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000d32:	6811      	ldr	r1, [r2, #0]
 8000d34:	420b      	tst	r3, r1
 8000d36:	d1ab      	bne.n	8000c90 <HAL_ADC_Init+0x4c>
 8000d38:	68d3      	ldr	r3, [r2, #12]
 8000d3a:	041b      	lsls	r3, r3, #16
 8000d3c:	d4a8      	bmi.n	8000c90 <HAL_ADC_Init+0x4c>
 8000d3e:	e79b      	b.n	8000c78 <HAL_ADC_Init+0x34>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d40:	2107      	movs	r1, #7
 8000d42:	6950      	ldr	r0, [r2, #20]
 8000d44:	4388      	bics	r0, r1
 8000d46:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000d48:	6950      	ldr	r0, [r2, #20]
 8000d4a:	4029      	ands	r1, r5
 8000d4c:	4301      	orrs	r1, r0
 8000d4e:	6151      	str	r1, [r2, #20]
 8000d50:	e7d2      	b.n	8000cf8 <HAL_ADC_Init+0xb4>
    return HAL_ERROR;
 8000d52:	2001      	movs	r0, #1
 8000d54:	e7e6      	b.n	8000d24 <HAL_ADC_Init+0xe0>
      ADC_CLEAR_ERRORCODE(hadc);
 8000d56:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000d58:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000d5a:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8000d5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d5e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000d60:	4393      	bics	r3, r2
 8000d62:	3a02      	subs	r2, #2
 8000d64:	4313      	orrs	r3, r2
 8000d66:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d68:	e7dc      	b.n	8000d24 <HAL_ADC_Init+0xe0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d6a:	2800      	cmp	r0, #0
 8000d6c:	d103      	bne.n	8000d76 <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d6e:	2180      	movs	r1, #128	; 0x80
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	430b      	orrs	r3, r1
 8000d74:	e7ad      	b.n	8000cd2 <HAL_ADC_Init+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d76:	2520      	movs	r5, #32
 8000d78:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d7a:	4328      	orrs	r0, r5
 8000d7c:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d7e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000d80:	4301      	orrs	r1, r0
 8000d82:	63e1      	str	r1, [r4, #60]	; 0x3c
 8000d84:	e7a5      	b.n	8000cd2 <HAL_ADC_Init+0x8e>
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	fffffefd 	.word	0xfffffefd
 8000d8c:	fffe0219 	.word	0xfffe0219
 8000d90:	833fffe7 	.word	0x833fffe7

08000d94 <HAL_ADC_Start_DMA>:
{
 8000d94:	b5d0      	push	{r4, r6, r7, lr}
 8000d96:	000e      	movs	r6, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d98:	6801      	ldr	r1, [r0, #0]
{
 8000d9a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d9c:	688b      	ldr	r3, [r1, #8]
{
 8000d9e:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000da0:	075b      	lsls	r3, r3, #29
 8000da2:	d435      	bmi.n	8000e10 <HAL_ADC_Start_DMA+0x7c>
    __HAL_LOCK(hadc);
 8000da4:	2334      	movs	r3, #52	; 0x34
 8000da6:	5cc2      	ldrb	r2, [r0, r3]
 8000da8:	2a01      	cmp	r2, #1
 8000daa:	d031      	beq.n	8000e10 <HAL_ADC_Start_DMA+0x7c>
 8000dac:	2201      	movs	r2, #1
 8000dae:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000db0:	7e43      	ldrb	r3, [r0, #25]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d004      	beq.n	8000dc0 <HAL_ADC_Start_DMA+0x2c>
      tmp_hal_status = ADC_Enable(hadc);
 8000db6:	f7ff feeb 	bl	8000b90 <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	d127      	bne.n	8000e0e <HAL_ADC_Start_DMA+0x7a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000dbe:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8000dc0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <HAL_ADC_Start_DMA+0x80>)
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 8000dce:	2234      	movs	r2, #52	; 0x34
      ADC_CLEAR_ERRORCODE(hadc);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63e3      	str	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8000dd4:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000dd6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_ADC_Start_DMA+0x84>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000dda:	3a24      	subs	r2, #36	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ddc:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_ADC_Start_DMA+0x88>)
 8000de0:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_ADC_Start_DMA+0x8c>)
 8000de4:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000de6:	231c      	movs	r3, #28
 8000de8:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000dea:	684b      	ldr	r3, [r1, #4]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000df0:	68cb      	ldr	r3, [r1, #12]
 8000df2:	3a0f      	subs	r2, #15
 8000df4:	4313      	orrs	r3, r2
 8000df6:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000df8:	0032      	movs	r2, r6
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	3140      	adds	r1, #64	; 0x40
 8000dfe:	f000 fa87 	bl	8001310 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000e02:	2104      	movs	r1, #4
 8000e04:	2000      	movs	r0, #0
 8000e06:	6822      	ldr	r2, [r4, #0]
 8000e08:	6893      	ldr	r3, [r2, #8]
 8000e0a:	430b      	orrs	r3, r1
 8000e0c:	6093      	str	r3, [r2, #8]
}
 8000e0e:	bdd0      	pop	{r4, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 8000e10:	2002      	movs	r0, #2
 8000e12:	e7fc      	b.n	8000e0e <HAL_ADC_Start_DMA+0x7a>
 8000e14:	fffff0fe 	.word	0xfffff0fe
 8000e18:	08000e29 	.word	0x08000e29
 8000e1c:	08000ea1 	.word	0x08000ea1
 8000e20:	08000eb5 	.word	0x08000eb5

08000e24 <HAL_ADC_ConvCpltCallback>:
 8000e24:	4770      	bx	lr
 8000e26:	46c0      	nop			; (mov r8, r8)

08000e28 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000e28:	2150      	movs	r1, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e2a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000e2c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e30:	4211      	tst	r1, r2
 8000e32:	d10e      	bne.n	8000e52 <ADC_DMAConvCplt+0x2a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000e38:	0092      	lsls	r2, r2, #2
 8000e3a:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e3c:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000e3e:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	0109      	lsls	r1, r1, #4
 8000e44:	68d0      	ldr	r0, [r2, #12]
 8000e46:	4208      	tst	r0, r1
 8000e48:	d007      	beq.n	8000e5a <ADC_DMAConvCplt+0x32>

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f7ff ffea 	bl	8000e24 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8000e50:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4798      	blx	r3
}
 8000e58:	e7fa      	b.n	8000e50 <ADC_DMAConvCplt+0x28>
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e5a:	7e99      	ldrb	r1, [r3, #26]
 8000e5c:	2900      	cmp	r1, #0
 8000e5e:	d1f4      	bne.n	8000e4a <ADC_DMAConvCplt+0x22>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000e60:	6811      	ldr	r1, [r2, #0]
 8000e62:	0709      	lsls	r1, r1, #28
 8000e64:	d5f1      	bpl.n	8000e4a <ADC_DMAConvCplt+0x22>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e66:	6891      	ldr	r1, [r2, #8]
 8000e68:	0749      	lsls	r1, r1, #29
 8000e6a:	d40b      	bmi.n	8000e84 <ADC_DMAConvCplt+0x5c>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000e6c:	200c      	movs	r0, #12
 8000e6e:	6851      	ldr	r1, [r2, #4]
 8000e70:	4381      	bics	r1, r0
 8000e72:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8000e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e76:	4908      	ldr	r1, [pc, #32]	; (8000e98 <ADC_DMAConvCplt+0x70>)
 8000e78:	400a      	ands	r2, r1
 8000e7a:	3104      	adds	r1, #4
 8000e7c:	31ff      	adds	r1, #255	; 0xff
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	639a      	str	r2, [r3, #56]	; 0x38
 8000e82:	e7e2      	b.n	8000e4a <ADC_DMAConvCplt+0x22>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e84:	2120      	movs	r1, #32
 8000e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e8e:	391f      	subs	r1, #31
 8000e90:	430a      	orrs	r2, r1
 8000e92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e94:	e7d9      	b.n	8000e4a <ADC_DMAConvCplt+0x22>
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	fffffefe 	.word	0xfffffefe

08000e9c <HAL_ADC_ConvHalfCpltCallback>:
 8000e9c:	4770      	bx	lr
 8000e9e:	46c0      	nop			; (mov r8, r8)

08000ea0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000ea0:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000ea2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000ea4:	f7ff fffa 	bl	8000e9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000ea8:	bd10      	pop	{r4, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)

08000eac <HAL_ADC_LevelOutOfWindowCallback>:
 8000eac:	4770      	bx	lr
 8000eae:	46c0      	nop			; (mov r8, r8)

08000eb0 <HAL_ADC_ErrorCallback>:
 8000eb0:	4770      	bx	lr
 8000eb2:	46c0      	nop			; (mov r8, r8)

08000eb4 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000eb4:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000eb6:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000eb8:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000eba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000ec0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000ec2:	3a3c      	subs	r2, #60	; 0x3c
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8000ec8:	f7ff fff2 	bl	8000eb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000ecc:	bd10      	pop	{r4, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)

08000ed0 <HAL_ADC_IRQHandler>:
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000ed0:	2204      	movs	r2, #4
{
 8000ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000ed4:	6803      	ldr	r3, [r0, #0]
{
 8000ed6:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000ed8:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000eda:	685f      	ldr	r7, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000edc:	4232      	tst	r2, r6
 8000ede:	d044      	beq.n	8000f6a <HAL_ADC_IRQHandler+0x9a>
 8000ee0:	423a      	tst	r2, r7
 8000ee2:	d042      	beq.n	8000f6a <HAL_ADC_IRQHandler+0x9a>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ee4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ee6:	06d2      	lsls	r2, r2, #27
 8000ee8:	d404      	bmi.n	8000ef4 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000eee:	0092      	lsls	r2, r2, #2
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	63a2      	str	r2, [r4, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ef4:	22c0      	movs	r2, #192	; 0xc0
 8000ef6:	68d9      	ldr	r1, [r3, #12]
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	4211      	tst	r1, r2
 8000efc:	d112      	bne.n	8000f24 <HAL_ADC_IRQHandler+0x54>
 8000efe:	7ea2      	ldrb	r2, [r4, #26]
 8000f00:	2a00      	cmp	r2, #0
 8000f02:	d10f      	bne.n	8000f24 <HAL_ADC_IRQHandler+0x54>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8000f04:	0732      	lsls	r2, r6, #28
 8000f06:	d50d      	bpl.n	8000f24 <HAL_ADC_IRQHandler+0x54>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	0752      	lsls	r2, r2, #29
 8000f0c:	d43e      	bmi.n	8000f8c <HAL_ADC_IRQHandler+0xbc>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f0e:	210c      	movs	r1, #12
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	438a      	bics	r2, r1
 8000f14:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8000f16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f18:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <HAL_ADC_IRQHandler+0xd0>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	3204      	adds	r2, #4
 8000f1e:	32ff      	adds	r2, #255	; 0xff
 8000f20:	4313      	orrs	r3, r2
 8000f22:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_ADC_ConvCpltCallback(hadc);
 8000f24:	0020      	movs	r0, r4
 8000f26:	f7ff ff7d 	bl	8000e24 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8000f30:	2580      	movs	r5, #128	; 0x80
 8000f32:	4235      	tst	r5, r6
 8000f34:	d001      	beq.n	8000f3a <HAL_ADC_IRQHandler+0x6a>
 8000f36:	423d      	tst	r5, r7
 8000f38:	d11d      	bne.n	8000f76 <HAL_ADC_IRQHandler+0xa6>
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8000f3a:	2210      	movs	r2, #16
 8000f3c:	4232      	tst	r2, r6
 8000f3e:	d013      	beq.n	8000f68 <HAL_ADC_IRQHandler+0x98>
 8000f40:	423a      	tst	r2, r7
 8000f42:	d011      	beq.n	8000f68 <HAL_ADC_IRQHandler+0x98>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000f44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f46:	2a01      	cmp	r2, #1
 8000f48:	d002      	beq.n	8000f50 <HAL_ADC_IRQHandler+0x80>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8000f4a:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000f4c:	07d2      	lsls	r2, r2, #31
 8000f4e:	d509      	bpl.n	8000f64 <HAL_ADC_IRQHandler+0x94>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000f50:	2102      	movs	r1, #2
 8000f52:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      HAL_ADC_ErrorCallback(hadc);
 8000f54:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000f56:	430a      	orrs	r2, r1
 8000f58:	63e2      	str	r2, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8000f5e:	f7ff ffa7 	bl	8000eb0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	2210      	movs	r2, #16
 8000f66:	601a      	str	r2, [r3, #0]
}
 8000f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000f6a:	2208      	movs	r2, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000f6c:	4232      	tst	r2, r6
 8000f6e:	d0df      	beq.n	8000f30 <HAL_ADC_IRQHandler+0x60>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000f70:	423a      	tst	r2, r7
 8000f72:	d0dd      	beq.n	8000f30 <HAL_ADC_IRQHandler+0x60>
 8000f74:	e7b6      	b.n	8000ee4 <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000f7a:	025b      	lsls	r3, r3, #9
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f80:	0020      	movs	r0, r4
 8000f82:	f7ff ff93 	bl	8000eac <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	601d      	str	r5, [r3, #0]
 8000f8a:	e7d6      	b.n	8000f3a <HAL_ADC_IRQHandler+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f90:	4313      	orrs	r3, r2
 8000f92:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000f96:	3a1f      	subs	r2, #31
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000f9c:	e7c2      	b.n	8000f24 <HAL_ADC_IRQHandler+0x54>
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	fffffefe 	.word	0xfffffefe

08000fa4 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000fa4:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8000fa6:	2234      	movs	r2, #52	; 0x34
{
 8000fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000faa:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8000fac:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000fae:	5c83      	ldrb	r3, [r0, r2]
{
 8000fb0:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fb2:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d060      	beq.n	800107a <HAL_ADC_ConfigChannel+0xd6>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	5483      	strb	r3, [r0, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fbc:	6805      	ldr	r5, [r0, #0]
 8000fbe:	68aa      	ldr	r2, [r5, #8]
 8000fc0:	0752      	lsls	r2, r2, #29
 8000fc2:	d509      	bpl.n	8000fd8 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	6383      	str	r3, [r0, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000fcc:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000fce:	2334      	movs	r3, #52	; 0x34
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	54e2      	strb	r2, [r4, r3]
}
 8000fd4:	b003      	add	sp, #12
 8000fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8000fd8:	4a36      	ldr	r2, [pc, #216]	; (80010b4 <HAL_ADC_ConfigChannel+0x110>)
 8000fda:	6848      	ldr	r0, [r1, #4]
 8000fdc:	4290      	cmp	r0, r2
 8000fde:	d030      	beq.n	8001042 <HAL_ADC_ConfigChannel+0x9e>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000fe0:	680a      	ldr	r2, [r1, #0]
 8000fe2:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8000fe4:	4093      	lsls	r3, r2
 8000fe6:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fe8:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000fea:	4338      	orrs	r0, r7
 8000fec:	62a8      	str	r0, [r5, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fee:	055b      	lsls	r3, r3, #21
 8000ff0:	429e      	cmp	r6, r3
 8000ff2:	d00f      	beq.n	8001014 <HAL_ADC_ConfigChannel+0x70>
 8000ff4:	3e01      	subs	r6, #1
 8000ff6:	2e06      	cmp	r6, #6
 8000ff8:	d90c      	bls.n	8001014 <HAL_ADC_ConfigChannel+0x70>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	6888      	ldr	r0, [r1, #8]
 8000ffe:	6969      	ldr	r1, [r5, #20]
 8001000:	4019      	ands	r1, r3
 8001002:	4288      	cmp	r0, r1
 8001004:	d006      	beq.n	8001014 <HAL_ADC_ConfigChannel+0x70>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001006:	6969      	ldr	r1, [r5, #20]
 8001008:	4399      	bics	r1, r3
 800100a:	6169      	str	r1, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800100c:	6969      	ldr	r1, [r5, #20]
 800100e:	4003      	ands	r3, r0
 8001010:	430b      	orrs	r3, r1
 8001012:	616b      	str	r3, [r5, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001014:	0013      	movs	r3, r2
 8001016:	3b10      	subs	r3, #16
 8001018:	2b02      	cmp	r3, #2
 800101a:	d810      	bhi.n	800103e <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800101c:	4926      	ldr	r1, [pc, #152]	; (80010b8 <HAL_ADC_ConfigChannel+0x114>)
 800101e:	680b      	ldr	r3, [r1, #0]
 8001020:	2a10      	cmp	r2, #16
 8001022:	d02e      	beq.n	8001082 <HAL_ADC_ConfigChannel+0xde>
 8001024:	3a11      	subs	r2, #17
 8001026:	1e50      	subs	r0, r2, #1
 8001028:	4182      	sbcs	r2, r0
 800102a:	20c0      	movs	r0, #192	; 0xc0
 800102c:	4252      	negs	r2, r2
 800102e:	0400      	lsls	r0, r0, #16
 8001030:	4002      	ands	r2, r0
 8001032:	2080      	movs	r0, #128	; 0x80
 8001034:	03c0      	lsls	r0, r0, #15
 8001036:	4684      	mov	ip, r0
 8001038:	4462      	add	r2, ip
 800103a:	4313      	orrs	r3, r2
 800103c:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103e:	2000      	movs	r0, #0
 8001040:	e7c5      	b.n	8000fce <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001042:	680a      	ldr	r2, [r1, #0]
 8001044:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001046:	4093      	lsls	r3, r2
 8001048:	4398      	bics	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800104a:	0013      	movs	r3, r2
 800104c:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800104e:	62a8      	str	r0, [r5, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001050:	2b02      	cmp	r3, #2
 8001052:	d8f4      	bhi.n	800103e <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_ADC_ConfigChannel+0x114>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2a10      	cmp	r2, #16
 800105a:	d010      	beq.n	800107e <HAL_ADC_ConfigChannel+0xda>
 800105c:	3a11      	subs	r2, #17
 800105e:	4251      	negs	r1, r2
 8001060:	414a      	adcs	r2, r1
 8001062:	21c0      	movs	r1, #192	; 0xc0
 8001064:	4252      	negs	r2, r2
 8001066:	0409      	lsls	r1, r1, #16
 8001068:	400a      	ands	r2, r1
 800106a:	4914      	ldr	r1, [pc, #80]	; (80010bc <HAL_ADC_ConfigChannel+0x118>)
 800106c:	468c      	mov	ip, r1
 800106e:	4462      	add	r2, ip
 8001070:	401a      	ands	r2, r3
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_ADC_ConfigChannel+0x114>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001074:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e7a9      	b.n	8000fce <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800107a:	2002      	movs	r0, #2
 800107c:	e7aa      	b.n	8000fd4 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <HAL_ADC_ConfigChannel+0x11c>)
 8001080:	e7f6      	b.n	8001070 <HAL_ADC_ConfigChannel+0xcc>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	0412      	lsls	r2, r2, #16
 8001086:	4313      	orrs	r3, r2
 8001088:	600b      	str	r3, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_ADC_ConfigChannel+0x120>)
 800108c:	490e      	ldr	r1, [pc, #56]	; (80010c8 <HAL_ADC_ConfigChannel+0x124>)
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	f7ff f84c 	bl	800012c <__udivsi3>
 8001094:	0083      	lsls	r3, r0, #2
 8001096:	181b      	adds	r3, r3, r0
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800109c:	9b01      	ldr	r3, [sp, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0cd      	beq.n	800103e <HAL_ADC_ConfigChannel+0x9a>
            wait_loop_index--;
 80010a2:	9b01      	ldr	r3, [sp, #4]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80010a8:	9b01      	ldr	r3, [sp, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f9      	bne.n	80010a2 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ae:	2000      	movs	r0, #0
 80010b0:	e78d      	b.n	8000fce <HAL_ADC_ConfigChannel+0x2a>
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	00001001 	.word	0x00001001
 80010b8:	40012708 	.word	0x40012708
 80010bc:	feffffff 	.word	0xfeffffff
 80010c0:	ff7fffff 	.word	0xff7fffff
 80010c4:	20000000 	.word	0x20000000
 80010c8:	000f4240 	.word	0x000f4240

080010cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010cc:	b570      	push	{r4, r5, r6, lr}
 80010ce:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010d0:	d100      	bne.n	80010d4 <HAL_CAN_Init+0x8>
 80010d2:	e076      	b.n	80011c2 <HAL_CAN_Init+0xf6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010d4:	2320      	movs	r3, #32
 80010d6:	5cc3      	ldrb	r3, [r0, r3]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d06a      	beq.n	80011b2 <HAL_CAN_Init+0xe6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010dc:	2101      	movs	r1, #1
 80010de:	6822      	ldr	r2, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010e0:	2601      	movs	r6, #1
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010e2:	6813      	ldr	r3, [r2, #0]
 80010e4:	430b      	orrs	r3, r1
 80010e6:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80010e8:	f7ff fd3a 	bl	8000b60 <HAL_GetTick>
 80010ec:	0005      	movs	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010ee:	e004      	b.n	80010fa <HAL_CAN_Init+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f0:	f7ff fd36 	bl	8000b60 <HAL_GetTick>
 80010f4:	1b40      	subs	r0, r0, r5
 80010f6:	280a      	cmp	r0, #10
 80010f8:	d851      	bhi.n	800119e <HAL_CAN_Init+0xd2>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010fa:	6823      	ldr	r3, [r4, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4216      	tst	r6, r2
 8001100:	d0f6      	beq.n	80010f0 <HAL_CAN_Init+0x24>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001102:	2102      	movs	r1, #2
 8001104:	681a      	ldr	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001106:	2602      	movs	r6, #2
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001108:	438a      	bics	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800110c:	f7ff fd28 	bl	8000b60 <HAL_GetTick>
 8001110:	0005      	movs	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001112:	e004      	b.n	800111e <HAL_CAN_Init+0x52>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001114:	f7ff fd24 	bl	8000b60 <HAL_GetTick>
 8001118:	1b40      	subs	r0, r0, r5
 800111a:	280a      	cmp	r0, #10
 800111c:	d83f      	bhi.n	800119e <HAL_CAN_Init+0xd2>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4216      	tst	r6, r2
 8001124:	d1f6      	bne.n	8001114 <HAL_CAN_Init+0x48>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001126:	7e22      	ldrb	r2, [r4, #24]
 8001128:	2a01      	cmp	r2, #1
 800112a:	d045      	beq.n	80011b8 <HAL_CAN_Init+0xec>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	438a      	bics	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001134:	7e62      	ldrb	r2, [r4, #25]
 8001136:	2a01      	cmp	r2, #1
 8001138:	d059      	beq.n	80011ee <HAL_CAN_Init+0x122>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800113a:	2140      	movs	r1, #64	; 0x40
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	438a      	bics	r2, r1
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001142:	7ea2      	ldrb	r2, [r4, #26]
 8001144:	2a01      	cmp	r2, #1
 8001146:	d04d      	beq.n	80011e4 <HAL_CAN_Init+0x118>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001148:	2120      	movs	r1, #32
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	438a      	bics	r2, r1
 800114e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001150:	7ee2      	ldrb	r2, [r4, #27]
 8001152:	2a01      	cmp	r2, #1
 8001154:	d041      	beq.n	80011da <HAL_CAN_Init+0x10e>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001156:	2110      	movs	r1, #16
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800115e:	7f22      	ldrb	r2, [r4, #28]
 8001160:	2a01      	cmp	r2, #1
 8001162:	d035      	beq.n	80011d0 <HAL_CAN_Init+0x104>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001164:	2108      	movs	r1, #8
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	438a      	bics	r2, r1
 800116a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800116c:	7f62      	ldrb	r2, [r4, #29]
 800116e:	2a01      	cmp	r2, #1
 8001170:	d029      	beq.n	80011c6 <HAL_CAN_Init+0xfa>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001172:	2104      	movs	r1, #4
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	438a      	bics	r2, r1
 8001178:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800117a:	68e1      	ldr	r1, [r4, #12]
 800117c:	68a2      	ldr	r2, [r4, #8]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
 800117e:	2000      	movs	r0, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001180:	430a      	orrs	r2, r1
 8001182:	6921      	ldr	r1, [r4, #16]
 8001184:	430a      	orrs	r2, r1
 8001186:	6961      	ldr	r1, [r4, #20]
 8001188:	430a      	orrs	r2, r1
 800118a:	6861      	ldr	r1, [r4, #4]
 800118c:	3901      	subs	r1, #1
 800118e:	430a      	orrs	r2, r1
 8001190:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001192:	2300      	movs	r3, #0
  hcan->State = HAL_CAN_STATE_READY;
 8001194:	2201      	movs	r2, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001196:	6263      	str	r3, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001198:	3320      	adds	r3, #32
 800119a:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800119c:	e008      	b.n	80011b0 <HAL_CAN_Init+0xe4>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011a2:	029b      	lsls	r3, r3, #10
 80011a4:	4313      	orrs	r3, r2
 80011a6:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80011a8:	2205      	movs	r2, #5
 80011aa:	2320      	movs	r3, #32
      return HAL_ERROR;
 80011ac:	2001      	movs	r0, #1
      hcan->State = HAL_CAN_STATE_ERROR;
 80011ae:	54e2      	strb	r2, [r4, r3]
}
 80011b0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_CAN_MspInit(hcan);
 80011b2:	f7ff f9a1 	bl	80004f8 <HAL_CAN_MspInit>
 80011b6:	e791      	b.n	80010dc <HAL_CAN_Init+0x10>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e7b8      	b.n	8001134 <HAL_CAN_Init+0x68>
    return HAL_ERROR;
 80011c2:	2001      	movs	r0, #1
 80011c4:	e7f4      	b.n	80011b0 <HAL_CAN_Init+0xe4>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011c6:	2104      	movs	r1, #4
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e7d4      	b.n	800117a <HAL_CAN_Init+0xae>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011d0:	2108      	movs	r1, #8
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e7c8      	b.n	800116c <HAL_CAN_Init+0xa0>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011da:	2110      	movs	r1, #16
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	438a      	bics	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e7bc      	b.n	800115e <HAL_CAN_Init+0x92>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011e4:	2120      	movs	r1, #32
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e7b0      	b.n	8001150 <HAL_CAN_Init+0x84>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ee:	2140      	movs	r1, #64	; 0x40
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e7a4      	b.n	8001142 <HAL_CAN_Init+0x76>

080011f8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f8:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80011fa:	2800      	cmp	r0, #0
 80011fc:	db14      	blt.n	8001228 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_NVIC_SetPriority+0x5c>)
 8001200:	2203      	movs	r2, #3
 8001202:	469c      	mov	ip, r3
 8001204:	23ff      	movs	r3, #255	; 0xff
 8001206:	0884      	lsrs	r4, r0, #2
 8001208:	4002      	ands	r2, r0
 800120a:	0018      	movs	r0, r3
 800120c:	26c0      	movs	r6, #192	; 0xc0
 800120e:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001210:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001212:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001214:	400b      	ands	r3, r1
 8001216:	4093      	lsls	r3, r2
 8001218:	00a4      	lsls	r4, r4, #2
 800121a:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800121c:	00b6      	lsls	r6, r6, #2
 800121e:	59a5      	ldr	r5, [r4, r6]
 8001220:	4385      	bics	r5, r0
 8001222:	432b      	orrs	r3, r5
 8001224:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001226:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001228:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_NVIC_SetPriority+0x60>)
 800122a:	230f      	movs	r3, #15
 800122c:	4694      	mov	ip, r2
 800122e:	2203      	movs	r2, #3
 8001230:	4003      	ands	r3, r0
 8001232:	4010      	ands	r0, r2
 8001234:	32fc      	adds	r2, #252	; 0xfc
 8001236:	0015      	movs	r5, r2
 8001238:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800123a:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800123c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800123e:	400a      	ands	r2, r1
 8001240:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001242:	3b08      	subs	r3, #8
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4463      	add	r3, ip
 800124a:	69dc      	ldr	r4, [r3, #28]
 800124c:	43ac      	bics	r4, r5
 800124e:	4322      	orrs	r2, r4
 8001250:	61da      	str	r2, [r3, #28]
 8001252:	e7e8      	b.n	8001226 <HAL_NVIC_SetPriority+0x2e>
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800125c:	2800      	cmp	r0, #0
 800125e:	db05      	blt.n	800126c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001260:	221f      	movs	r2, #31
 8001262:	2301      	movs	r3, #1
 8001264:	4002      	ands	r2, r0
 8001266:	4093      	lsls	r3, r2
 8001268:	4a01      	ldr	r2, [pc, #4]	; (8001270 <HAL_NVIC_EnableIRQ+0x14>)
 800126a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800126c:	4770      	bx	lr
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	e000e100 	.word	0xe000e100

08001274 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	1e43      	subs	r3, r0, #1
 8001278:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800127c:	4293      	cmp	r3, r2
 800127e:	d20e      	bcs.n	800129e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001280:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001284:	4807      	ldr	r0, [pc, #28]	; (80012a4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001288:	6a03      	ldr	r3, [r0, #32]
 800128a:	0609      	lsls	r1, r1, #24
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	430b      	orrs	r3, r1
 8001292:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001296:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	3307      	adds	r3, #7
 800129c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800129e:	4770      	bx	lr
 80012a0:	e000e010 	.word	0xe000e010
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012a8:	b570      	push	{r4, r5, r6, lr}
 80012aa:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80012ac:	d027      	beq.n	80012fe <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012ae:	2521      	movs	r5, #33	; 0x21
 80012b0:	2302      	movs	r3, #2
 80012b2:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012b4:	6800      	ldr	r0, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80012b8:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012ba:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012bc:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80012be:	6863      	ldr	r3, [r4, #4]
 80012c0:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c2:	68e1      	ldr	r1, [r4, #12]
 80012c4:	430b      	orrs	r3, r1
 80012c6:	6921      	ldr	r1, [r4, #16]
 80012c8:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ca:	6961      	ldr	r1, [r4, #20]
 80012cc:	430b      	orrs	r3, r1
 80012ce:	69a1      	ldr	r1, [r4, #24]
 80012d0:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80012d2:	69e1      	ldr	r1, [r4, #28]
 80012d4:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80012d6:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012d8:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_DMA_Init+0x60>)
 80012dc:	2114      	movs	r1, #20
 80012de:	469c      	mov	ip, r3
 80012e0:	4460      	add	r0, ip
 80012e2:	f7fe ff23 	bl	800012c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 80012e8:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 80012ea:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ec:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012ee:	0080      	lsls	r0, r0, #2
 80012f0:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 80012f2:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f4:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80012f6:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 80012f8:	321f      	adds	r2, #31
 80012fa:	54a3      	strb	r3, [r4, r2]
}
 80012fc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80012fe:	2001      	movs	r0, #1
 8001300:	e7fc      	b.n	80012fc <HAL_DMA_Init+0x54>
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	ffffc00f 	.word	0xffffc00f
 8001308:	bffdfff8 	.word	0xbffdfff8
 800130c:	40020000 	.word	0x40020000

08001310 <HAL_DMA_Start_IT>:
{
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001312:	2420      	movs	r4, #32
 8001314:	5d05      	ldrb	r5, [r0, r4]
 8001316:	2d01      	cmp	r5, #1
 8001318:	d037      	beq.n	800138a <HAL_DMA_Start_IT+0x7a>
 800131a:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 800131c:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 800131e:	5505      	strb	r5, [r0, r4]
  if (HAL_DMA_STATE_READY == hdma->State)
 8001320:	5dc5      	ldrb	r5, [r0, r7]
 8001322:	b2ee      	uxtb	r6, r5
 8001324:	2d01      	cmp	r5, #1
 8001326:	d003      	beq.n	8001330 <HAL_DMA_Start_IT+0x20>
    __HAL_UNLOCK(hdma);
 8001328:	2300      	movs	r3, #0
 800132a:	5503      	strb	r3, [r0, r4]
    status = HAL_BUSY;
 800132c:	2002      	movs	r0, #2
}
 800132e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001330:	3c1e      	subs	r4, #30
 8001332:	55c4      	strb	r4, [r0, r7]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001334:	2400      	movs	r4, #0
 8001336:	6384      	str	r4, [r0, #56]	; 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001338:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800133a:	6c07      	ldr	r7, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800133c:	6825      	ldr	r5, [r4, #0]
 800133e:	43b5      	bics	r5, r6
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001340:	40be      	lsls	r6, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001342:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001344:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001346:	606e      	str	r6, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 8001348:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800134a:	6843      	ldr	r3, [r0, #4]
 800134c:	2b10      	cmp	r3, #16
 800134e:	d00e      	beq.n	800136e <HAL_DMA_Start_IT+0x5e>
    if (NULL != hdma->XferHalfCpltCallback)
 8001350:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = SrcAddress;
 8001352:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8001354:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00e      	beq.n	8001378 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800135a:	220e      	movs	r2, #14
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	4313      	orrs	r3, r2
 8001360:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001362:	2201      	movs	r2, #1
 8001364:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001366:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001368:	4313      	orrs	r3, r2
 800136a:	6023      	str	r3, [r4, #0]
 800136c:	e7df      	b.n	800132e <HAL_DMA_Start_IT+0x1e>
    if (NULL != hdma->XferHalfCpltCallback)
 800136e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8001370:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001372:	60e1      	str	r1, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f0      	bne.n	800135a <HAL_DMA_Start_IT+0x4a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001378:	220a      	movs	r2, #10
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	4313      	orrs	r3, r2
 800137e:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	3a06      	subs	r2, #6
 8001384:	4393      	bics	r3, r2
 8001386:	6023      	str	r3, [r4, #0]
 8001388:	e7eb      	b.n	8001362 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 800138a:	2002      	movs	r0, #2
 800138c:	e7cf      	b.n	800132e <HAL_DMA_Start_IT+0x1e>
 800138e:	46c0      	nop			; (mov r8, r8)

08001390 <HAL_DMA_IRQHandler>:
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001390:	2104      	movs	r1, #4
{
 8001392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001394:	000c      	movs	r4, r1
 8001396:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001398:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800139a:	409c      	lsls	r4, r3
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800139c:	683a      	ldr	r2, [r7, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800139e:	6806      	ldr	r6, [r0, #0]
 80013a0:	6835      	ldr	r5, [r6, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80013a2:	4222      	tst	r2, r4
 80013a4:	d00d      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x32>
 80013a6:	4229      	tst	r1, r5
 80013a8:	d00b      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013aa:	6833      	ldr	r3, [r6, #0]
 80013ac:	069b      	lsls	r3, r3, #26
 80013ae:	d402      	bmi.n	80013b6 <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80013b0:	6833      	ldr	r3, [r6, #0]
 80013b2:	438b      	bics	r3, r1
 80013b4:	6033      	str	r3, [r6, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80013b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80013b8:	607c      	str	r4, [r7, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d000      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 80013be:	4798      	blx	r3
}
 80013c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80013c2:	2102      	movs	r1, #2
 80013c4:	000c      	movs	r4, r1
 80013c6:	409c      	lsls	r4, r3
 80013c8:	4222      	tst	r2, r4
 80013ca:	d014      	beq.n	80013f6 <HAL_DMA_IRQHandler+0x66>
 80013cc:	4229      	tst	r1, r5
 80013ce:	d012      	beq.n	80013f6 <HAL_DMA_IRQHandler+0x66>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013d0:	6833      	ldr	r3, [r6, #0]
 80013d2:	069b      	lsls	r3, r3, #26
 80013d4:	d406      	bmi.n	80013e4 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80013d6:	220a      	movs	r2, #10
 80013d8:	6833      	ldr	r3, [r6, #0]
 80013da:	4393      	bics	r3, r2
 80013dc:	6033      	str	r3, [r6, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80013de:	2321      	movs	r3, #33	; 0x21
 80013e0:	3a09      	subs	r2, #9
 80013e2:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80013e4:	2320      	movs	r3, #32
 80013e6:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80013e8:	607c      	str	r4, [r7, #4]
    __HAL_UNLOCK(hdma);
 80013ea:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 80013ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0e6      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 80013f2:	4798      	blx	r3
 80013f4:	e7e4      	b.n	80013c0 <HAL_DMA_IRQHandler+0x30>
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013f6:	2108      	movs	r1, #8
 80013f8:	000c      	movs	r4, r1
 80013fa:	409c      	lsls	r4, r3
 80013fc:	4222      	tst	r2, r4
 80013fe:	d0df      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x30>
 8001400:	4229      	tst	r1, r5
 8001402:	d0dd      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001404:	6832      	ldr	r2, [r6, #0]
 8001406:	3106      	adds	r1, #6
 8001408:	438a      	bics	r2, r1
 800140a:	6032      	str	r2, [r6, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800140c:	2201      	movs	r2, #1
 800140e:	0011      	movs	r1, r2
 8001410:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001412:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001414:	6079      	str	r1, [r7, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001416:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001418:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800141a:	2200      	movs	r2, #0
 800141c:	3b01      	subs	r3, #1
 800141e:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8001420:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0cc      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x30>
      hdma->XferErrorCallback(hdma);
 8001426:	4798      	blx	r3
 8001428:	e7ca      	b.n	80013c0 <HAL_DMA_IRQHandler+0x30>
 800142a:	46c0      	nop			; (mov r8, r8)

0800142c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142e:	46de      	mov	lr, fp
 8001430:	4657      	mov	r7, sl
 8001432:	464e      	mov	r6, r9
 8001434:	4645      	mov	r5, r8
 8001436:	b5e0      	push	{r5, r6, r7, lr}
 8001438:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143a:	6809      	ldr	r1, [r1, #0]
 800143c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800143e:	2300      	movs	r3, #0
{
 8001440:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	2900      	cmp	r1, #0
 8001444:	d100      	bne.n	8001448 <HAL_GPIO_Init+0x1c>
 8001446:	e0d0      	b.n	80015ea <HAL_GPIO_Init+0x1be>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001448:	4c72      	ldr	r4, [pc, #456]	; (8001614 <HAL_GPIO_Init+0x1e8>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800144a:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144c:	46a3      	mov	fp, r4
 800144e:	e064      	b.n	800151a <HAL_GPIO_Init+0xee>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001450:	4665      	mov	r5, ip
 8001452:	2d03      	cmp	r5, #3
 8001454:	d000      	beq.n	8001458 <HAL_GPIO_Init+0x2c>
 8001456:	e0b6      	b.n	80015c6 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001458:	4666      	mov	r6, ip
 800145a:	4096      	lsls	r6, r2
 800145c:	43f5      	mvns	r5, r6
 800145e:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 8001460:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001462:	9d02      	ldr	r5, [sp, #8]
 8001464:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001466:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001468:	25c0      	movs	r5, #192	; 0xc0
 800146a:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 800146c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800146e:	422c      	tst	r4, r5
 8001470:	d04d      	beq.n	800150e <HAL_GPIO_Init+0xe2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	465d      	mov	r5, fp
 8001474:	2601      	movs	r6, #1
 8001476:	465f      	mov	r7, fp
 8001478:	69ad      	ldr	r5, [r5, #24]
 800147a:	4335      	orrs	r5, r6
 800147c:	61bd      	str	r5, [r7, #24]
 800147e:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001480:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	4035      	ands	r5, r6
 8001484:	4e64      	ldr	r6, [pc, #400]	; (8001618 <HAL_GPIO_Init+0x1ec>)
 8001486:	9505      	str	r5, [sp, #20]
 8001488:	46b4      	mov	ip, r6
 800148a:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800148c:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 800148e:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001490:	00bf      	lsls	r7, r7, #2
 8001492:	00ad      	lsls	r5, r5, #2
 8001494:	4465      	add	r5, ip
 8001496:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 8001498:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800149a:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 800149c:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800149e:	4666      	mov	r6, ip
 80014a0:	40b7      	lsls	r7, r6
 80014a2:	003e      	movs	r6, r7
 80014a4:	464f      	mov	r7, r9
 80014a6:	43b7      	bics	r7, r6
 80014a8:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014aa:	2790      	movs	r7, #144	; 0x90
 80014ac:	05ff      	lsls	r7, r7, #23
 80014ae:	42b8      	cmp	r0, r7
 80014b0:	d00e      	beq.n	80014d0 <HAL_GPIO_Init+0xa4>
 80014b2:	4f5a      	ldr	r7, [pc, #360]	; (800161c <HAL_GPIO_Init+0x1f0>)
 80014b4:	42b8      	cmp	r0, r7
 80014b6:	d100      	bne.n	80014ba <HAL_GPIO_Init+0x8e>
 80014b8:	e09e      	b.n	80015f8 <HAL_GPIO_Init+0x1cc>
 80014ba:	4f59      	ldr	r7, [pc, #356]	; (8001620 <HAL_GPIO_Init+0x1f4>)
 80014bc:	42b8      	cmp	r0, r7
 80014be:	d100      	bne.n	80014c2 <HAL_GPIO_Init+0x96>
 80014c0:	e0a1      	b.n	8001606 <HAL_GPIO_Init+0x1da>
 80014c2:	4666      	mov	r6, ip
 80014c4:	2705      	movs	r7, #5
 80014c6:	40b7      	lsls	r7, r6
 80014c8:	003e      	movs	r6, r7
 80014ca:	464f      	mov	r7, r9
 80014cc:	4337      	orrs	r7, r6
 80014ce:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014d0:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014d2:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014d4:	60ae      	str	r6, [r5, #8]
        temp = EXTI->RTSR;
 80014d6:	4d53      	ldr	r5, [pc, #332]	; (8001624 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 80014d8:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014da:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 80014dc:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 80014de:	68ad      	ldr	r5, [r5, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014e0:	423c      	tst	r4, r7
 80014e2:	d17f      	bne.n	80015e4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(iocurrent);
 80014e4:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80014e6:	4f4f      	ldr	r7, [pc, #316]	; (8001624 <HAL_GPIO_Init+0x1f8>)
 80014e8:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 80014ea:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014ec:	02a7      	lsls	r7, r4, #10
 80014ee:	d476      	bmi.n	80015de <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 80014f0:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80014f2:	4f4c      	ldr	r7, [pc, #304]	; (8001624 <HAL_GPIO_Init+0x1f8>)
 80014f4:	60fd      	str	r5, [r7, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80014f6:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f8:	03a7      	lsls	r7, r4, #14
 80014fa:	d46d      	bmi.n	80015d8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 80014fc:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80014fe:	4f49      	ldr	r7, [pc, #292]	; (8001624 <HAL_GPIO_Init+0x1f8>)
 8001500:	607d      	str	r5, [r7, #4]

        temp = EXTI->IMR;
 8001502:	683d      	ldr	r5, [r7, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001504:	03e4      	lsls	r4, r4, #15
 8001506:	d463      	bmi.n	80015d0 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 8001508:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800150a:	4c46      	ldr	r4, [pc, #280]	; (8001624 <HAL_GPIO_Init+0x1f8>)
 800150c:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150e:	000c      	movs	r4, r1
      }
    }

    position++;
 8001510:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001512:	40dc      	lsrs	r4, r3
 8001514:	3202      	adds	r2, #2
 8001516:	2c00      	cmp	r4, #0
 8001518:	d067      	beq.n	80015ea <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800151a:	2601      	movs	r6, #1
 800151c:	000c      	movs	r4, r1
 800151e:	409e      	lsls	r6, r3
 8001520:	4034      	ands	r4, r6
 8001522:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8001524:	4231      	tst	r1, r6
 8001526:	d0f2      	beq.n	800150e <HAL_GPIO_Init+0xe2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001528:	4654      	mov	r4, sl
 800152a:	2503      	movs	r5, #3
 800152c:	6864      	ldr	r4, [r4, #4]
 800152e:	4025      	ands	r5, r4
 8001530:	46ac      	mov	ip, r5
 8001532:	3d01      	subs	r5, #1
 8001534:	2d01      	cmp	r5, #1
 8001536:	d88b      	bhi.n	8001450 <HAL_GPIO_Init+0x24>
        temp = GPIOx->OSPEEDR;
 8001538:	6885      	ldr	r5, [r0, #8]
 800153a:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800153c:	2503      	movs	r5, #3
 800153e:	4095      	lsls	r5, r2
 8001540:	46a8      	mov	r8, r5
 8001542:	43ed      	mvns	r5, r5
 8001544:	464f      	mov	r7, r9
 8001546:	9502      	str	r5, [sp, #8]
 8001548:	4645      	mov	r5, r8
 800154a:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800154c:	4655      	mov	r5, sl
 800154e:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001550:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001552:	002f      	movs	r7, r5
 8001554:	4097      	lsls	r7, r2
 8001556:	46b8      	mov	r8, r7
 8001558:	464f      	mov	r7, r9
 800155a:	4645      	mov	r5, r8
 800155c:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 800155e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001560:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001562:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001564:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001566:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001568:	0926      	lsrs	r6, r4, #4
 800156a:	402e      	ands	r6, r5
 800156c:	409e      	lsls	r6, r3
 800156e:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8001570:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8001572:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001574:	9d02      	ldr	r5, [sp, #8]
 8001576:	402e      	ands	r6, r5
 8001578:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800157a:	4656      	mov	r6, sl
 800157c:	68b6      	ldr	r6, [r6, #8]
 800157e:	4647      	mov	r7, r8
 8001580:	4096      	lsls	r6, r2
 8001582:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8001584:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001586:	4667      	mov	r7, ip
 8001588:	4666      	mov	r6, ip
 800158a:	4096      	lsls	r6, r2
 800158c:	2f02      	cmp	r7, #2
 800158e:	d000      	beq.n	8001592 <HAL_GPIO_Init+0x166>
 8001590:	e766      	b.n	8001460 <HAL_GPIO_Init+0x34>
        temp = GPIOx->AFR[position >> 3u];
 8001592:	08dd      	lsrs	r5, r3, #3
 8001594:	00ad      	lsls	r5, r5, #2
 8001596:	46ac      	mov	ip, r5
 8001598:	4484      	add	ip, r0
 800159a:	4665      	mov	r5, ip
 800159c:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800159e:	2507      	movs	r5, #7
 80015a0:	401d      	ands	r5, r3
 80015a2:	00ad      	lsls	r5, r5, #2
 80015a4:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 80015a6:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015a8:	250f      	movs	r5, #15
 80015aa:	4647      	mov	r7, r8
 80015ac:	40bd      	lsls	r5, r7
 80015ae:	9f03      	ldr	r7, [sp, #12]
 80015b0:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015b2:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015b4:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015b6:	4647      	mov	r7, r8
 80015b8:	692d      	ldr	r5, [r5, #16]
 80015ba:	40bd      	lsls	r5, r7
 80015bc:	9f03      	ldr	r7, [sp, #12]
 80015be:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 80015c0:	4665      	mov	r5, ip
 80015c2:	622f      	str	r7, [r5, #32]
 80015c4:	e74c      	b.n	8001460 <HAL_GPIO_Init+0x34>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015c6:	2503      	movs	r5, #3
 80015c8:	4095      	lsls	r5, r2
 80015ca:	43ed      	mvns	r5, r5
 80015cc:	9502      	str	r5, [sp, #8]
 80015ce:	e7d0      	b.n	8001572 <HAL_GPIO_Init+0x146>
          temp |= iocurrent;
 80015d0:	9c01      	ldr	r4, [sp, #4]
 80015d2:	432c      	orrs	r4, r5
 80015d4:	0025      	movs	r5, r4
 80015d6:	e798      	b.n	800150a <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 80015d8:	9f01      	ldr	r7, [sp, #4]
 80015da:	433d      	orrs	r5, r7
 80015dc:	e78f      	b.n	80014fe <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 80015de:	9f01      	ldr	r7, [sp, #4]
 80015e0:	433d      	orrs	r5, r7
 80015e2:	e786      	b.n	80014f2 <HAL_GPIO_Init+0xc6>
          temp |= iocurrent;
 80015e4:	9f01      	ldr	r7, [sp, #4]
 80015e6:	433d      	orrs	r5, r7
 80015e8:	e77d      	b.n	80014e6 <HAL_GPIO_Init+0xba>
  } 
}
 80015ea:	b007      	add	sp, #28
 80015ec:	bcf0      	pop	{r4, r5, r6, r7}
 80015ee:	46bb      	mov	fp, r7
 80015f0:	46b2      	mov	sl, r6
 80015f2:	46a9      	mov	r9, r5
 80015f4:	46a0      	mov	r8, r4
 80015f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015f8:	4667      	mov	r7, ip
 80015fa:	2601      	movs	r6, #1
 80015fc:	40be      	lsls	r6, r7
 80015fe:	464f      	mov	r7, r9
 8001600:	4337      	orrs	r7, r6
 8001602:	46b9      	mov	r9, r7
 8001604:	e764      	b.n	80014d0 <HAL_GPIO_Init+0xa4>
 8001606:	4667      	mov	r7, ip
 8001608:	2602      	movs	r6, #2
 800160a:	40be      	lsls	r6, r7
 800160c:	464f      	mov	r7, r9
 800160e:	4337      	orrs	r7, r6
 8001610:	46b9      	mov	r9, r7
 8001612:	e75d      	b.n	80014d0 <HAL_GPIO_Init+0xa4>
 8001614:	40021000 	.word	0x40021000
 8001618:	40010000 	.word	0x40010000
 800161c:	48000400 	.word	0x48000400
 8001620:	48000800 	.word	0x48000800
 8001624:	40010400 	.word	0x40010400

08001628 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001628:	2a00      	cmp	r2, #0
 800162a:	d001      	beq.n	8001630 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800162c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800162e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001630:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001632:	e7fc      	b.n	800162e <HAL_GPIO_WritePin+0x6>

08001634 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001634:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001636:	0013      	movs	r3, r2
 8001638:	400b      	ands	r3, r1
 800163a:	041b      	lsls	r3, r3, #16
 800163c:	4391      	bics	r1, r2
 800163e:	430b      	orrs	r3, r1
 8001640:	6183      	str	r3, [r0, #24]
}
 8001642:	4770      	bx	lr

08001644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001646:	46ce      	mov	lr, r9
 8001648:	4647      	mov	r7, r8
 800164a:	b580      	push	{r7, lr}
 800164c:	0004      	movs	r4, r0
 800164e:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001650:	2800      	cmp	r0, #0
 8001652:	d100      	bne.n	8001656 <HAL_RCC_OscConfig+0x12>
 8001654:	e115      	b.n	8001882 <HAL_RCC_OscConfig+0x23e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	6803      	ldr	r3, [r0, #0]
 8001658:	07da      	lsls	r2, r3, #31
 800165a:	d52f      	bpl.n	80016bc <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800165c:	210c      	movs	r1, #12
 800165e:	48c6      	ldr	r0, [pc, #792]	; (8001978 <HAL_RCC_OscConfig+0x334>)
 8001660:	6842      	ldr	r2, [r0, #4]
 8001662:	400a      	ands	r2, r1
 8001664:	2a04      	cmp	r2, #4
 8001666:	d100      	bne.n	800166a <HAL_RCC_OscConfig+0x26>
 8001668:	e12d      	b.n	80018c6 <HAL_RCC_OscConfig+0x282>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800166a:	6842      	ldr	r2, [r0, #4]
 800166c:	4011      	ands	r1, r2
 800166e:	2908      	cmp	r1, #8
 8001670:	d100      	bne.n	8001674 <HAL_RCC_OscConfig+0x30>
 8001672:	e11f      	b.n	80018b4 <HAL_RCC_OscConfig+0x270>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001674:	6863      	ldr	r3, [r4, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d100      	bne.n	800167c <HAL_RCC_OscConfig+0x38>
 800167a:	e12e      	b.n	80018da <HAL_RCC_OscConfig+0x296>
 800167c:	2b00      	cmp	r3, #0
 800167e:	d100      	bne.n	8001682 <HAL_RCC_OscConfig+0x3e>
 8001680:	e150      	b.n	8001924 <HAL_RCC_OscConfig+0x2e0>
 8001682:	2b05      	cmp	r3, #5
 8001684:	d100      	bne.n	8001688 <HAL_RCC_OscConfig+0x44>
 8001686:	e27b      	b.n	8001b80 <HAL_RCC_OscConfig+0x53c>
 8001688:	4bbb      	ldr	r3, [pc, #748]	; (8001978 <HAL_RCC_OscConfig+0x334>)
 800168a:	49bc      	ldr	r1, [pc, #752]	; (800197c <HAL_RCC_OscConfig+0x338>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	400a      	ands	r2, r1
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	49ba      	ldr	r1, [pc, #744]	; (8001980 <HAL_RCC_OscConfig+0x33c>)
 8001696:	400a      	ands	r2, r1
 8001698:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff fa61 	bl	8000b60 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80016a0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	4fb5      	ldr	r7, [pc, #724]	; (8001978 <HAL_RCC_OscConfig+0x334>)
 80016a4:	02b6      	lsls	r6, r6, #10
 80016a6:	e005      	b.n	80016b4 <HAL_RCC_OscConfig+0x70>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff fa5a 	bl	8000b60 <HAL_GetTick>
 80016ac:	1b40      	subs	r0, r0, r5
 80016ae:	2864      	cmp	r0, #100	; 0x64
 80016b0:	d900      	bls.n	80016b4 <HAL_RCC_OscConfig+0x70>
 80016b2:	e135      	b.n	8001920 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	4233      	tst	r3, r6
 80016b8:	d0f6      	beq.n	80016a8 <HAL_RCC_OscConfig+0x64>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	079a      	lsls	r2, r3, #30
 80016be:	d529      	bpl.n	8001714 <HAL_RCC_OscConfig+0xd0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016c0:	220c      	movs	r2, #12
 80016c2:	49ad      	ldr	r1, [pc, #692]	; (8001978 <HAL_RCC_OscConfig+0x334>)
 80016c4:	6848      	ldr	r0, [r1, #4]
 80016c6:	4202      	tst	r2, r0
 80016c8:	d100      	bne.n	80016cc <HAL_RCC_OscConfig+0x88>
 80016ca:	e0d3      	b.n	8001874 <HAL_RCC_OscConfig+0x230>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016cc:	6848      	ldr	r0, [r1, #4]
 80016ce:	4002      	ands	r2, r0
 80016d0:	2a08      	cmp	r2, #8
 80016d2:	d100      	bne.n	80016d6 <HAL_RCC_OscConfig+0x92>
 80016d4:	e0c5      	b.n	8001862 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d6:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d8:	4da7      	ldr	r5, [pc, #668]	; (8001978 <HAL_RCC_OscConfig+0x334>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d100      	bne.n	80016e0 <HAL_RCC_OscConfig+0x9c>
 80016de:	e165      	b.n	80019ac <HAL_RCC_OscConfig+0x368>
        __HAL_RCC_HSI_ENABLE();
 80016e0:	2201      	movs	r2, #1
 80016e2:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e4:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 80016e6:	4313      	orrs	r3, r2
 80016e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016ea:	f7ff fa39 	bl	8000b60 <HAL_GetTick>
 80016ee:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	e005      	b.n	80016fe <HAL_RCC_OscConfig+0xba>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f2:	f7ff fa35 	bl	8000b60 <HAL_GetTick>
 80016f6:	1b80      	subs	r0, r0, r6
 80016f8:	2802      	cmp	r0, #2
 80016fa:	d900      	bls.n	80016fe <HAL_RCC_OscConfig+0xba>
 80016fc:	e110      	b.n	8001920 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	682b      	ldr	r3, [r5, #0]
 8001700:	421f      	tst	r7, r3
 8001702:	d0f6      	beq.n	80016f2 <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	21f8      	movs	r1, #248	; 0xf8
 8001706:	682a      	ldr	r2, [r5, #0]
 8001708:	6923      	ldr	r3, [r4, #16]
 800170a:	438a      	bics	r2, r1
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4313      	orrs	r3, r2
 8001710:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	071a      	lsls	r2, r3, #28
 8001716:	d42d      	bmi.n	8001774 <HAL_RCC_OscConfig+0x130>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001718:	075a      	lsls	r2, r3, #29
 800171a:	d545      	bpl.n	80017a8 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800171e:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001720:	4b95      	ldr	r3, [pc, #596]	; (8001978 <HAL_RCC_OscConfig+0x334>)
 8001722:	0552      	lsls	r2, r2, #21
 8001724:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001726:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001728:	4211      	tst	r1, r2
 800172a:	d108      	bne.n	800173e <HAL_RCC_OscConfig+0xfa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172c:	69d9      	ldr	r1, [r3, #28]
 800172e:	4311      	orrs	r1, r2
 8001730:	61d9      	str	r1, [r3, #28]
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	4013      	ands	r3, r2
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800173a:	2301      	movs	r3, #1
 800173c:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173e:	2780      	movs	r7, #128	; 0x80
 8001740:	4e90      	ldr	r6, [pc, #576]	; (8001984 <HAL_RCC_OscConfig+0x340>)
 8001742:	007f      	lsls	r7, r7, #1
 8001744:	6833      	ldr	r3, [r6, #0]
 8001746:	423b      	tst	r3, r7
 8001748:	d100      	bne.n	800174c <HAL_RCC_OscConfig+0x108>
 800174a:	e0cd      	b.n	80018e8 <HAL_RCC_OscConfig+0x2a4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174c:	68a3      	ldr	r3, [r4, #8]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d100      	bne.n	8001754 <HAL_RCC_OscConfig+0x110>
 8001752:	e13e      	b.n	80019d2 <HAL_RCC_OscConfig+0x38e>
 8001754:	2b00      	cmp	r3, #0
 8001756:	d100      	bne.n	800175a <HAL_RCC_OscConfig+0x116>
 8001758:	e0fd      	b.n	8001956 <HAL_RCC_OscConfig+0x312>
 800175a:	2b05      	cmp	r3, #5
 800175c:	d100      	bne.n	8001760 <HAL_RCC_OscConfig+0x11c>
 800175e:	e1cb      	b.n	8001af8 <HAL_RCC_OscConfig+0x4b4>
 8001760:	2101      	movs	r1, #1
 8001762:	4b85      	ldr	r3, [pc, #532]	; (8001978 <HAL_RCC_OscConfig+0x334>)
 8001764:	6a1a      	ldr	r2, [r3, #32]
 8001766:	438a      	bics	r2, r1
 8001768:	621a      	str	r2, [r3, #32]
 800176a:	6a1a      	ldr	r2, [r3, #32]
 800176c:	3103      	adds	r1, #3
 800176e:	438a      	bics	r2, r1
 8001770:	621a      	str	r2, [r3, #32]
 8001772:	e132      	b.n	80019da <HAL_RCC_OscConfig+0x396>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001774:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8001776:	4d80      	ldr	r5, [pc, #512]	; (8001978 <HAL_RCC_OscConfig+0x334>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001778:	2b00      	cmp	r3, #0
 800177a:	d100      	bne.n	800177e <HAL_RCC_OscConfig+0x13a>
 800177c:	e087      	b.n	800188e <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 800177e:	2201      	movs	r2, #1
 8001780:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001784:	4313      	orrs	r3, r2
 8001786:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001788:	f7ff f9ea 	bl	8000b60 <HAL_GetTick>
 800178c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178e:	e005      	b.n	800179c <HAL_RCC_OscConfig+0x158>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff f9e6 	bl	8000b60 <HAL_GetTick>
 8001794:	1b80      	subs	r0, r0, r6
 8001796:	2802      	cmp	r0, #2
 8001798:	d900      	bls.n	800179c <HAL_RCC_OscConfig+0x158>
 800179a:	e0c1      	b.n	8001920 <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800179e:	421f      	tst	r7, r3
 80017a0:	d0f6      	beq.n	8001790 <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	075a      	lsls	r2, r3, #29
 80017a6:	d4b9      	bmi.n	800171c <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80017a8:	06da      	lsls	r2, r3, #27
 80017aa:	d512      	bpl.n	80017d2 <HAL_RCC_OscConfig+0x18e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80017ac:	6962      	ldr	r2, [r4, #20]
 80017ae:	2a01      	cmp	r2, #1
 80017b0:	d100      	bne.n	80017b4 <HAL_RCC_OscConfig+0x170>
 80017b2:	e1c6      	b.n	8001b42 <HAL_RCC_OscConfig+0x4fe>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80017b4:	3205      	adds	r2, #5
 80017b6:	d000      	beq.n	80017ba <HAL_RCC_OscConfig+0x176>
 80017b8:	e121      	b.n	80019fe <HAL_RCC_OscConfig+0x3ba>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017ba:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017bc:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80017be:	496e      	ldr	r1, [pc, #440]	; (8001978 <HAL_RCC_OscConfig+0x334>)
 80017c0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80017c2:	4382      	bics	r2, r0
 80017c4:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017c6:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80017c8:	69a2      	ldr	r2, [r4, #24]
 80017ca:	43a8      	bics	r0, r5
 80017cc:	00d2      	lsls	r2, r2, #3
 80017ce:	4302      	orrs	r2, r0
 80017d0:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017d2:	069b      	lsls	r3, r3, #26
 80017d4:	d524      	bpl.n	8001820 <HAL_RCC_OscConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017d6:	220c      	movs	r2, #12
 80017d8:	4967      	ldr	r1, [pc, #412]	; (8001978 <HAL_RCC_OscConfig+0x334>)
 80017da:	684b      	ldr	r3, [r1, #4]
 80017dc:	4013      	ands	r3, r2
 80017de:	2b0c      	cmp	r3, #12
 80017e0:	d100      	bne.n	80017e4 <HAL_RCC_OscConfig+0x1a0>
 80017e2:	e12c      	b.n	8001a3e <HAL_RCC_OscConfig+0x3fa>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017e4:	684b      	ldr	r3, [r1, #4]
 80017e6:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017e8:	2a08      	cmp	r2, #8
 80017ea:	d100      	bne.n	80017ee <HAL_RCC_OscConfig+0x1aa>
 80017ec:	e120      	b.n	8001a30 <HAL_RCC_OscConfig+0x3ec>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017ee:	6a23      	ldr	r3, [r4, #32]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017f0:	4d61      	ldr	r5, [pc, #388]	; (8001978 <HAL_RCC_OscConfig+0x334>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <HAL_RCC_OscConfig+0x1b4>
 80017f6:	e12c      	b.n	8001a52 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_HSI48_ENABLE();
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80017fc:	025b      	lsls	r3, r3, #9
 80017fe:	4313      	orrs	r3, r2
 8001800:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff f9ad 	bl	8000b60 <HAL_GetTick>
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001806:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001808:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800180a:	02bf      	lsls	r7, r7, #10
 800180c:	e005      	b.n	800181a <HAL_RCC_OscConfig+0x1d6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800180e:	f7ff f9a7 	bl	8000b60 <HAL_GetTick>
 8001812:	1b80      	subs	r0, r0, r6
 8001814:	2802      	cmp	r0, #2
 8001816:	d900      	bls.n	800181a <HAL_RCC_OscConfig+0x1d6>
 8001818:	e082      	b.n	8001920 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800181a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800181c:	423b      	tst	r3, r7
 800181e:	d0f6      	beq.n	800180e <HAL_RCC_OscConfig+0x1ca>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001822:	2b00      	cmp	r3, #0
 8001824:	d01b      	beq.n	800185e <HAL_RCC_OscConfig+0x21a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001826:	220c      	movs	r2, #12
 8001828:	4d53      	ldr	r5, [pc, #332]	; (8001978 <HAL_RCC_OscConfig+0x334>)
 800182a:	6869      	ldr	r1, [r5, #4]
 800182c:	400a      	ands	r2, r1
 800182e:	2a08      	cmp	r2, #8
 8001830:	d100      	bne.n	8001834 <HAL_RCC_OscConfig+0x1f0>
 8001832:	e16b      	b.n	8001b0c <HAL_RCC_OscConfig+0x4c8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001834:	2b02      	cmp	r3, #2
 8001836:	d100      	bne.n	800183a <HAL_RCC_OscConfig+0x1f6>
 8001838:	e126      	b.n	8001a88 <HAL_RCC_OscConfig+0x444>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	4a52      	ldr	r2, [pc, #328]	; (8001988 <HAL_RCC_OscConfig+0x344>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001840:	4013      	ands	r3, r2
 8001842:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001844:	f7ff f98c 	bl	8000b60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001848:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800184a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184c:	e004      	b.n	8001858 <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff f987 	bl	8000b60 <HAL_GetTick>
 8001852:	1b00      	subs	r0, r0, r4
 8001854:	2802      	cmp	r0, #2
 8001856:	d863      	bhi.n	8001920 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001858:	682b      	ldr	r3, [r5, #0]
 800185a:	4233      	tst	r3, r6
 800185c:	d1f7      	bne.n	800184e <HAL_RCC_OscConfig+0x20a>
        }
      }
    }
  }

  return HAL_OK;
 800185e:	2000      	movs	r0, #0
 8001860:	e010      	b.n	8001884 <HAL_RCC_OscConfig+0x240>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001862:	684a      	ldr	r2, [r1, #4]
 8001864:	21c0      	movs	r1, #192	; 0xc0
 8001866:	0249      	lsls	r1, r1, #9
 8001868:	400a      	ands	r2, r1
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	0209      	lsls	r1, r1, #8
 800186e:	428a      	cmp	r2, r1
 8001870:	d000      	beq.n	8001874 <HAL_RCC_OscConfig+0x230>
 8001872:	e730      	b.n	80016d6 <HAL_RCC_OscConfig+0x92>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001874:	4a40      	ldr	r2, [pc, #256]	; (8001978 <HAL_RCC_OscConfig+0x334>)
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	0792      	lsls	r2, r2, #30
 800187a:	d545      	bpl.n	8001908 <HAL_RCC_OscConfig+0x2c4>
 800187c:	68e2      	ldr	r2, [r4, #12]
 800187e:	2a01      	cmp	r2, #1
 8001880:	d042      	beq.n	8001908 <HAL_RCC_OscConfig+0x2c4>
    return HAL_ERROR;
 8001882:	2001      	movs	r0, #1
}
 8001884:	b003      	add	sp, #12
 8001886:	bcc0      	pop	{r6, r7}
 8001888:	46b9      	mov	r9, r7
 800188a:	46b0      	mov	r8, r6
 800188c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 800188e:	2201      	movs	r2, #1
 8001890:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001892:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8001894:	4393      	bics	r3, r2
 8001896:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001898:	f7ff f962 	bl	8000b60 <HAL_GetTick>
 800189c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189e:	e004      	b.n	80018aa <HAL_RCC_OscConfig+0x266>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff f95e 	bl	8000b60 <HAL_GetTick>
 80018a4:	1b80      	subs	r0, r0, r6
 80018a6:	2802      	cmp	r0, #2
 80018a8:	d83a      	bhi.n	8001920 <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80018ac:	421f      	tst	r7, r3
 80018ae:	d1f7      	bne.n	80018a0 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	e777      	b.n	80017a4 <HAL_RCC_OscConfig+0x160>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b4:	21c0      	movs	r1, #192	; 0xc0
 80018b6:	6842      	ldr	r2, [r0, #4]
 80018b8:	0249      	lsls	r1, r1, #9
 80018ba:	400a      	ands	r2, r1
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	0249      	lsls	r1, r1, #9
 80018c0:	428a      	cmp	r2, r1
 80018c2:	d000      	beq.n	80018c6 <HAL_RCC_OscConfig+0x282>
 80018c4:	e6d6      	b.n	8001674 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c6:	4a2c      	ldr	r2, [pc, #176]	; (8001978 <HAL_RCC_OscConfig+0x334>)
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	0392      	lsls	r2, r2, #14
 80018cc:	d400      	bmi.n	80018d0 <HAL_RCC_OscConfig+0x28c>
 80018ce:	e6f5      	b.n	80016bc <HAL_RCC_OscConfig+0x78>
 80018d0:	6862      	ldr	r2, [r4, #4]
 80018d2:	2a00      	cmp	r2, #0
 80018d4:	d000      	beq.n	80018d8 <HAL_RCC_OscConfig+0x294>
 80018d6:	e6f1      	b.n	80016bc <HAL_RCC_OscConfig+0x78>
 80018d8:	e7d3      	b.n	8001882 <HAL_RCC_OscConfig+0x23e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	4a26      	ldr	r2, [pc, #152]	; (8001978 <HAL_RCC_OscConfig+0x334>)
 80018de:	025b      	lsls	r3, r3, #9
 80018e0:	6811      	ldr	r1, [r2, #0]
 80018e2:	430b      	orrs	r3, r1
 80018e4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e6:	e6d8      	b.n	800169a <HAL_RCC_OscConfig+0x56>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e8:	6833      	ldr	r3, [r6, #0]
 80018ea:	433b      	orrs	r3, r7
 80018ec:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80018ee:	f7ff f937 	bl	8000b60 <HAL_GetTick>
 80018f2:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f4:	e004      	b.n	8001900 <HAL_RCC_OscConfig+0x2bc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f6:	f7ff f933 	bl	8000b60 <HAL_GetTick>
 80018fa:	1b40      	subs	r0, r0, r5
 80018fc:	2864      	cmp	r0, #100	; 0x64
 80018fe:	d80f      	bhi.n	8001920 <HAL_RCC_OscConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	6833      	ldr	r3, [r6, #0]
 8001902:	423b      	tst	r3, r7
 8001904:	d0f7      	beq.n	80018f6 <HAL_RCC_OscConfig+0x2b2>
 8001906:	e721      	b.n	800174c <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001908:	25f8      	movs	r5, #248	; 0xf8
 800190a:	481b      	ldr	r0, [pc, #108]	; (8001978 <HAL_RCC_OscConfig+0x334>)
 800190c:	6922      	ldr	r2, [r4, #16]
 800190e:	6801      	ldr	r1, [r0, #0]
 8001910:	00d2      	lsls	r2, r2, #3
 8001912:	43a9      	bics	r1, r5
 8001914:	430a      	orrs	r2, r1
 8001916:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001918:	071a      	lsls	r2, r3, #28
 800191a:	d400      	bmi.n	800191e <HAL_RCC_OscConfig+0x2da>
 800191c:	e6fc      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 800191e:	e729      	b.n	8001774 <HAL_RCC_OscConfig+0x130>
            return HAL_TIMEOUT;
 8001920:	2003      	movs	r0, #3
 8001922:	e7af      	b.n	8001884 <HAL_RCC_OscConfig+0x240>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001924:	4d14      	ldr	r5, [pc, #80]	; (8001978 <HAL_RCC_OscConfig+0x334>)
 8001926:	4a15      	ldr	r2, [pc, #84]	; (800197c <HAL_RCC_OscConfig+0x338>)
 8001928:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192c:	4013      	ands	r3, r2
 800192e:	602b      	str	r3, [r5, #0]
 8001930:	682b      	ldr	r3, [r5, #0]
 8001932:	4a13      	ldr	r2, [pc, #76]	; (8001980 <HAL_RCC_OscConfig+0x33c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001934:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001936:	4013      	ands	r3, r2
 8001938:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800193a:	f7ff f911 	bl	8000b60 <HAL_GetTick>
 800193e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001940:	e004      	b.n	800194c <HAL_RCC_OscConfig+0x308>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001942:	f7ff f90d 	bl	8000b60 <HAL_GetTick>
 8001946:	1b80      	subs	r0, r0, r6
 8001948:	2864      	cmp	r0, #100	; 0x64
 800194a:	d8e9      	bhi.n	8001920 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194c:	682b      	ldr	r3, [r5, #0]
 800194e:	423b      	tst	r3, r7
 8001950:	d1f7      	bne.n	8001942 <HAL_RCC_OscConfig+0x2fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	e6b2      	b.n	80016bc <HAL_RCC_OscConfig+0x78>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001956:	2201      	movs	r2, #1
 8001958:	4e07      	ldr	r6, [pc, #28]	; (8001978 <HAL_RCC_OscConfig+0x334>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	4d0c      	ldr	r5, [pc, #48]	; (800198c <HAL_RCC_OscConfig+0x348>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195c:	6a33      	ldr	r3, [r6, #32]
 800195e:	4393      	bics	r3, r2
 8001960:	6233      	str	r3, [r6, #32]
 8001962:	6a33      	ldr	r3, [r6, #32]
 8001964:	3203      	adds	r2, #3
 8001966:	4393      	bics	r3, r2
 8001968:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800196a:	f7ff f8f9 	bl	8000b60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196e:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8001970:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001972:	4698      	mov	r8, r3
 8001974:	e011      	b.n	800199a <HAL_RCC_OscConfig+0x356>
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	40021000 	.word	0x40021000
 800197c:	fffeffff 	.word	0xfffeffff
 8001980:	fffbffff 	.word	0xfffbffff
 8001984:	40007000 	.word	0x40007000
 8001988:	feffffff 	.word	0xfeffffff
 800198c:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001990:	f7ff f8e6 	bl	8000b60 <HAL_GetTick>
 8001994:	1bc0      	subs	r0, r0, r7
 8001996:	42a8      	cmp	r0, r5
 8001998:	d8c2      	bhi.n	8001920 <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199a:	4642      	mov	r2, r8
 800199c:	6a33      	ldr	r3, [r6, #32]
 800199e:	421a      	tst	r2, r3
 80019a0:	d1f6      	bne.n	8001990 <HAL_RCC_OscConfig+0x34c>
    if(pwrclkchanged == SET)
 80019a2:	464b      	mov	r3, r9
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d068      	beq.n	8001a7a <HAL_RCC_OscConfig+0x436>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	e6fd      	b.n	80017a8 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80019ac:	2201      	movs	r2, #1
 80019ae:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b0:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80019b2:	4393      	bics	r3, r2
 80019b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019b6:	f7ff f8d3 	bl	8000b60 <HAL_GetTick>
 80019ba:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019bc:	e004      	b.n	80019c8 <HAL_RCC_OscConfig+0x384>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff f8cf 	bl	8000b60 <HAL_GetTick>
 80019c2:	1b80      	subs	r0, r0, r6
 80019c4:	2802      	cmp	r0, #2
 80019c6:	d8ab      	bhi.n	8001920 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c8:	682b      	ldr	r3, [r5, #0]
 80019ca:	421f      	tst	r7, r3
 80019cc:	d1f7      	bne.n	80019be <HAL_RCC_OscConfig+0x37a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	e6a0      	b.n	8001714 <HAL_RCC_OscConfig+0xd0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d2:	4971      	ldr	r1, [pc, #452]	; (8001b98 <HAL_RCC_OscConfig+0x554>)
 80019d4:	6a0a      	ldr	r2, [r1, #32]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80019da:	f7ff f8c1 	bl	8000b60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019de:	4b6e      	ldr	r3, [pc, #440]	; (8001b98 <HAL_RCC_OscConfig+0x554>)
      tickstart = HAL_GetTick();
 80019e0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e2:	4698      	mov	r8, r3
 80019e4:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	4d6d      	ldr	r5, [pc, #436]	; (8001b9c <HAL_RCC_OscConfig+0x558>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e8:	e004      	b.n	80019f4 <HAL_RCC_OscConfig+0x3b0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f7ff f8b9 	bl	8000b60 <HAL_GetTick>
 80019ee:	1b80      	subs	r0, r0, r6
 80019f0:	42a8      	cmp	r0, r5
 80019f2:	d895      	bhi.n	8001920 <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f4:	4643      	mov	r3, r8
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	421f      	tst	r7, r3
 80019fa:	d0f6      	beq.n	80019ea <HAL_RCC_OscConfig+0x3a6>
 80019fc:	e7d1      	b.n	80019a2 <HAL_RCC_OscConfig+0x35e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80019fe:	2204      	movs	r2, #4
 8001a00:	4d65      	ldr	r5, [pc, #404]	; (8001b98 <HAL_RCC_OscConfig+0x554>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a02:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a04:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a06:	4313      	orrs	r3, r2
 8001a08:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001a0a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a0c:	3a03      	subs	r2, #3
 8001a0e:	4393      	bics	r3, r2
 8001a10:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001a12:	f7ff f8a5 	bl	8000b60 <HAL_GetTick>
 8001a16:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a18:	e005      	b.n	8001a26 <HAL_RCC_OscConfig+0x3e2>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a1a:	f7ff f8a1 	bl	8000b60 <HAL_GetTick>
 8001a1e:	1b80      	subs	r0, r0, r6
 8001a20:	2802      	cmp	r0, #2
 8001a22:	d900      	bls.n	8001a26 <HAL_RCC_OscConfig+0x3e2>
 8001a24:	e77c      	b.n	8001920 <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a26:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a28:	421f      	tst	r7, r3
 8001a2a:	d1f6      	bne.n	8001a1a <HAL_RCC_OscConfig+0x3d6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	e6d0      	b.n	80017d2 <HAL_RCC_OscConfig+0x18e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a30:	22c0      	movs	r2, #192	; 0xc0
 8001a32:	684b      	ldr	r3, [r1, #4]
 8001a34:	0252      	lsls	r2, r2, #9
 8001a36:	4013      	ands	r3, r2
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d000      	beq.n	8001a3e <HAL_RCC_OscConfig+0x3fa>
 8001a3c:	e6d7      	b.n	80017ee <HAL_RCC_OscConfig+0x1aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a3e:	4b56      	ldr	r3, [pc, #344]	; (8001b98 <HAL_RCC_OscConfig+0x554>)
 8001a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a42:	039b      	lsls	r3, r3, #14
 8001a44:	d400      	bmi.n	8001a48 <HAL_RCC_OscConfig+0x404>
 8001a46:	e6eb      	b.n	8001820 <HAL_RCC_OscConfig+0x1dc>
 8001a48:	6a23      	ldr	r3, [r4, #32]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d000      	beq.n	8001a50 <HAL_RCC_OscConfig+0x40c>
 8001a4e:	e718      	b.n	8001882 <HAL_RCC_OscConfig+0x23e>
 8001a50:	e6e6      	b.n	8001820 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI48_DISABLE();
 8001a52:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a54:	4a52      	ldr	r2, [pc, #328]	; (8001ba0 <HAL_RCC_OscConfig+0x55c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a56:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8001a58:	4013      	ands	r3, r2
 8001a5a:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f880 	bl	8000b60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a60:	02bf      	lsls	r7, r7, #10
        tickstart = HAL_GetTick();
 8001a62:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a64:	e005      	b.n	8001a72 <HAL_RCC_OscConfig+0x42e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a66:	f7ff f87b 	bl	8000b60 <HAL_GetTick>
 8001a6a:	1b80      	subs	r0, r0, r6
 8001a6c:	2802      	cmp	r0, #2
 8001a6e:	d900      	bls.n	8001a72 <HAL_RCC_OscConfig+0x42e>
 8001a70:	e756      	b.n	8001920 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a72:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a74:	423b      	tst	r3, r7
 8001a76:	d1f6      	bne.n	8001a66 <HAL_RCC_OscConfig+0x422>
 8001a78:	e6d2      	b.n	8001820 <HAL_RCC_OscConfig+0x1dc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7a:	4a47      	ldr	r2, [pc, #284]	; (8001b98 <HAL_RCC_OscConfig+0x554>)
 8001a7c:	4949      	ldr	r1, [pc, #292]	; (8001ba4 <HAL_RCC_OscConfig+0x560>)
 8001a7e:	69d3      	ldr	r3, [r2, #28]
 8001a80:	400b      	ands	r3, r1
 8001a82:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	e68f      	b.n	80017a8 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_PLL_DISABLE();
 8001a88:	682b      	ldr	r3, [r5, #0]
 8001a8a:	4a47      	ldr	r2, [pc, #284]	; (8001ba8 <HAL_RCC_OscConfig+0x564>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001a8e:	4013      	ands	r3, r2
 8001a90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a92:	f7ff f865 	bl	8000b60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a96:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8001a98:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9a:	e005      	b.n	8001aa8 <HAL_RCC_OscConfig+0x464>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f860 	bl	8000b60 <HAL_GetTick>
 8001aa0:	1b80      	subs	r0, r0, r6
 8001aa2:	2802      	cmp	r0, #2
 8001aa4:	d900      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x464>
 8001aa6:	e73b      	b.n	8001920 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa8:	682b      	ldr	r3, [r5, #0]
 8001aaa:	423b      	tst	r3, r7
 8001aac:	d1f6      	bne.n	8001a9c <HAL_RCC_OscConfig+0x458>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aae:	220f      	movs	r2, #15
 8001ab0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab2:	4e39      	ldr	r6, [pc, #228]	; (8001b98 <HAL_RCC_OscConfig+0x554>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab4:	4393      	bics	r3, r2
 8001ab6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001abc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001abe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ac0:	686a      	ldr	r2, [r5, #4]
 8001ac2:	430b      	orrs	r3, r1
 8001ac4:	4939      	ldr	r1, [pc, #228]	; (8001bac <HAL_RCC_OscConfig+0x568>)
 8001ac6:	400a      	ands	r2, r1
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	682a      	ldr	r2, [r5, #0]
 8001ad0:	045b      	lsls	r3, r3, #17
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f843 	bl	8000b60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ada:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001adc:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ade:	04ad      	lsls	r5, r5, #18
 8001ae0:	e005      	b.n	8001aee <HAL_RCC_OscConfig+0x4aa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7ff f83d 	bl	8000b60 <HAL_GetTick>
 8001ae6:	1b00      	subs	r0, r0, r4
 8001ae8:	2802      	cmp	r0, #2
 8001aea:	d900      	bls.n	8001aee <HAL_RCC_OscConfig+0x4aa>
 8001aec:	e718      	b.n	8001920 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aee:	6833      	ldr	r3, [r6, #0]
 8001af0:	422b      	tst	r3, r5
 8001af2:	d0f6      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x49e>
  return HAL_OK;
 8001af4:	2000      	movs	r0, #0
 8001af6:	e6c5      	b.n	8001884 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af8:	2104      	movs	r1, #4
 8001afa:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_RCC_OscConfig+0x554>)
 8001afc:	6a1a      	ldr	r2, [r3, #32]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	621a      	str	r2, [r3, #32]
 8001b02:	6a1a      	ldr	r2, [r3, #32]
 8001b04:	3903      	subs	r1, #3
 8001b06:	430a      	orrs	r2, r1
 8001b08:	621a      	str	r2, [r3, #32]
 8001b0a:	e766      	b.n	80019da <HAL_RCC_OscConfig+0x396>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d100      	bne.n	8001b12 <HAL_RCC_OscConfig+0x4ce>
 8001b10:	e6b7      	b.n	8001882 <HAL_RCC_OscConfig+0x23e>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	23c0      	movs	r3, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8001b14:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001b18:	025b      	lsls	r3, r3, #9
        pll_config2 = RCC->CFGR2;
 8001b1a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	428b      	cmp	r3, r1
 8001b20:	d000      	beq.n	8001b24 <HAL_RCC_OscConfig+0x4e0>
 8001b22:	e6ae      	b.n	8001882 <HAL_RCC_OscConfig+0x23e>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b24:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	6b21      	ldr	r1, [r4, #48]	; 0x30
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b28:	4003      	ands	r3, r0
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	428b      	cmp	r3, r1
 8001b2c:	d000      	beq.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
 8001b2e:	e6a8      	b.n	8001882 <HAL_RCC_OscConfig+0x23e>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b30:	23f0      	movs	r3, #240	; 0xf0
 8001b32:	039b      	lsls	r3, r3, #14
 8001b34:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d000      	beq.n	8001b3e <HAL_RCC_OscConfig+0x4fa>
 8001b3c:	e6a1      	b.n	8001882 <HAL_RCC_OscConfig+0x23e>
  return HAL_OK;
 8001b3e:	2000      	movs	r0, #0
 8001b40:	e6a0      	b.n	8001884 <HAL_RCC_OscConfig+0x240>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b42:	2104      	movs	r1, #4
 8001b44:	4d14      	ldr	r5, [pc, #80]	; (8001b98 <HAL_RCC_OscConfig+0x554>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b46:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b48:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b4a:	430b      	orrs	r3, r1
 8001b4c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001b4e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b50:	4313      	orrs	r3, r2
 8001b52:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001b54:	f7ff f804 	bl	8000b60 <HAL_GetTick>
 8001b58:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b5a:	e005      	b.n	8001b68 <HAL_RCC_OscConfig+0x524>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b5c:	f7ff f800 	bl	8000b60 <HAL_GetTick>
 8001b60:	1b80      	subs	r0, r0, r6
 8001b62:	2802      	cmp	r0, #2
 8001b64:	d900      	bls.n	8001b68 <HAL_RCC_OscConfig+0x524>
 8001b66:	e6db      	b.n	8001920 <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b68:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b6a:	421f      	tst	r7, r3
 8001b6c:	d0f6      	beq.n	8001b5c <HAL_RCC_OscConfig+0x518>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b6e:	21f8      	movs	r1, #248	; 0xf8
 8001b70:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001b72:	69a3      	ldr	r3, [r4, #24]
 8001b74:	438a      	bics	r2, r1
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	636b      	str	r3, [r5, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	e628      	b.n	80017d2 <HAL_RCC_OscConfig+0x18e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b80:	2280      	movs	r2, #128	; 0x80
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCC_OscConfig+0x554>)
 8001b84:	02d2      	lsls	r2, r2, #11
 8001b86:	6819      	ldr	r1, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	6819      	ldr	r1, [r3, #0]
 8001b90:	0252      	lsls	r2, r2, #9
 8001b92:	430a      	orrs	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	e580      	b.n	800169a <HAL_RCC_OscConfig+0x56>
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	00001388 	.word	0x00001388
 8001ba0:	fffeffff 	.word	0xfffeffff
 8001ba4:	efffffff 	.word	0xefffffff
 8001ba8:	feffffff 	.word	0xfeffffff
 8001bac:	ffc27fff 	.word	0xffc27fff

08001bb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb2:	46ce      	mov	lr, r9
 8001bb4:	4647      	mov	r7, r8
 8001bb6:	0004      	movs	r4, r0
 8001bb8:	000d      	movs	r5, r1
 8001bba:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d00d      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	4959      	ldr	r1, [pc, #356]	; (8001d28 <HAL_RCC_ClockConfig+0x178>)
 8001bc4:	680a      	ldr	r2, [r1, #0]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	42aa      	cmp	r2, r5
 8001bca:	d20c      	bcs.n	8001be6 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bcc:	680a      	ldr	r2, [r1, #0]
 8001bce:	439a      	bics	r2, r3
 8001bd0:	432a      	orrs	r2, r5
 8001bd2:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd4:	680a      	ldr	r2, [r1, #0]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	42ab      	cmp	r3, r5
 8001bda:	d004      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8001bdc:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8001bde:	bcc0      	pop	{r6, r7}
 8001be0:	46b9      	mov	r9, r7
 8001be2:	46b0      	mov	r8, r6
 8001be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	079a      	lsls	r2, r3, #30
 8001bea:	d50e      	bpl.n	8001c0a <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	075a      	lsls	r2, r3, #29
 8001bee:	d505      	bpl.n	8001bfc <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bf0:	22e0      	movs	r2, #224	; 0xe0
 8001bf2:	494e      	ldr	r1, [pc, #312]	; (8001d2c <HAL_RCC_ClockConfig+0x17c>)
 8001bf4:	00d2      	lsls	r2, r2, #3
 8001bf6:	6848      	ldr	r0, [r1, #4]
 8001bf8:	4302      	orrs	r2, r0
 8001bfa:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bfc:	20f0      	movs	r0, #240	; 0xf0
 8001bfe:	494b      	ldr	r1, [pc, #300]	; (8001d2c <HAL_RCC_ClockConfig+0x17c>)
 8001c00:	684a      	ldr	r2, [r1, #4]
 8001c02:	4382      	bics	r2, r0
 8001c04:	68a0      	ldr	r0, [r4, #8]
 8001c06:	4302      	orrs	r2, r0
 8001c08:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0a:	07db      	lsls	r3, r3, #31
 8001c0c:	d524      	bpl.n	8001c58 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c10:	4b46      	ldr	r3, [pc, #280]	; (8001d2c <HAL_RCC_ClockConfig+0x17c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c12:	2a01      	cmp	r2, #1
 8001c14:	d05c      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x120>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c16:	2a02      	cmp	r2, #2
 8001c18:	d054      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x114>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001c1a:	2a03      	cmp	r2, #3
 8001c1c:	d07a      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x164>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	079b      	lsls	r3, r3, #30
 8001c22:	d5db      	bpl.n	8001bdc <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c24:	2103      	movs	r1, #3
 8001c26:	4e41      	ldr	r6, [pc, #260]	; (8001d2c <HAL_RCC_ClockConfig+0x17c>)
 8001c28:	6873      	ldr	r3, [r6, #4]
 8001c2a:	438b      	bics	r3, r1
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001c30:	f7fe ff96 	bl	8000b60 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c34:	230c      	movs	r3, #12
 8001c36:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	4b3d      	ldr	r3, [pc, #244]	; (8001d30 <HAL_RCC_ClockConfig+0x180>)
    tickstart = HAL_GetTick();
 8001c3a:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3c:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	e004      	b.n	8001c4a <HAL_RCC_ClockConfig+0x9a>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c40:	f7fe ff8e 	bl	8000b60 <HAL_GetTick>
 8001c44:	1bc0      	subs	r0, r0, r7
 8001c46:	4548      	cmp	r0, r9
 8001c48:	d846      	bhi.n	8001cd8 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	4643      	mov	r3, r8
 8001c4c:	6872      	ldr	r2, [r6, #4]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	6863      	ldr	r3, [r4, #4]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d1f3      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4a33      	ldr	r2, [pc, #204]	; (8001d28 <HAL_RCC_ClockConfig+0x178>)
 8001c5c:	6813      	ldr	r3, [r2, #0]
 8001c5e:	400b      	ands	r3, r1
 8001c60:	42ab      	cmp	r3, r5
 8001c62:	d905      	bls.n	8001c70 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c64:	6813      	ldr	r3, [r2, #0]
 8001c66:	438b      	bics	r3, r1
 8001c68:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	6813      	ldr	r3, [r2, #0]
 8001c6c:	4219      	tst	r1, r3
 8001c6e:	d1b5      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	075b      	lsls	r3, r3, #29
 8001c74:	d41e      	bmi.n	8001cb4 <HAL_RCC_ClockConfig+0x104>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c76:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8001c78:	4a2c      	ldr	r2, [pc, #176]	; (8001d2c <HAL_RCC_ClockConfig+0x17c>)
 8001c7a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c7c:	4018      	ands	r0, r3
 8001c7e:	2808      	cmp	r0, #8
 8001c80:	d02c      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x12c>
 8001c82:	280c      	cmp	r0, #12
 8001c84:	d022      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x11c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c86:	3804      	subs	r0, #4
 8001c88:	1e43      	subs	r3, r0, #1
 8001c8a:	4198      	sbcs	r0, r3
 8001c8c:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <HAL_RCC_ClockConfig+0x184>)
 8001c8e:	4240      	negs	r0, r0
 8001c90:	4018      	ands	r0, r3
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <HAL_RCC_ClockConfig+0x188>)
 8001c94:	469c      	mov	ip, r3
 8001c96:	4460      	add	r0, ip
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c98:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_RCC_ClockConfig+0x17c>)
 8001c9a:	4a28      	ldr	r2, [pc, #160]	; (8001d3c <HAL_RCC_ClockConfig+0x18c>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4928      	ldr	r1, [pc, #160]	; (8001d40 <HAL_RCC_ClockConfig+0x190>)
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	0f1b      	lsrs	r3, r3, #28
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	40d8      	lsrs	r0, r3
 8001ca8:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001caa:	2003      	movs	r0, #3
 8001cac:	f7fe ff16 	bl	8000adc <HAL_InitTick>
  return HAL_OK;
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	e794      	b.n	8001bde <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb4:	4a1d      	ldr	r2, [pc, #116]	; (8001d2c <HAL_RCC_ClockConfig+0x17c>)
 8001cb6:	4923      	ldr	r1, [pc, #140]	; (8001d44 <HAL_RCC_ClockConfig+0x194>)
 8001cb8:	6853      	ldr	r3, [r2, #4]
 8001cba:	400b      	ands	r3, r1
 8001cbc:	68e1      	ldr	r1, [r4, #12]
 8001cbe:	430b      	orrs	r3, r1
 8001cc0:	6053      	str	r3, [r2, #4]
 8001cc2:	e7d8      	b.n	8001c76 <HAL_RCC_ClockConfig+0xc6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	019b      	lsls	r3, r3, #6
 8001cc8:	d4ac      	bmi.n	8001c24 <HAL_RCC_ClockConfig+0x74>
 8001cca:	e787      	b.n	8001bdc <HAL_RCC_ClockConfig+0x2c>
  switch (tmpreg & RCC_CFGR_SWS)
 8001ccc:	481e      	ldr	r0, [pc, #120]	; (8001d48 <HAL_RCC_ClockConfig+0x198>)
 8001cce:	e7e3      	b.n	8001c98 <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	039b      	lsls	r3, r3, #14
 8001cd4:	d4a6      	bmi.n	8001c24 <HAL_RCC_ClockConfig+0x74>
 8001cd6:	e781      	b.n	8001bdc <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8001cd8:	2003      	movs	r0, #3
 8001cda:	e780      	b.n	8001bde <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001cdc:	210f      	movs	r1, #15
 8001cde:	0c98      	lsrs	r0, r3, #18
 8001ce0:	4c1a      	ldr	r4, [pc, #104]	; (8001d4c <HAL_RCC_ClockConfig+0x19c>)
 8001ce2:	4008      	ands	r0, r1
 8001ce4:	5c24      	ldrb	r4, [r4, r0]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ce6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8001ce8:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <HAL_RCC_ClockConfig+0x1a0>)
 8001cea:	4001      	ands	r1, r0
 8001cec:	5c51      	ldrb	r1, [r2, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001cee:	22c0      	movs	r2, #192	; 0xc0
 8001cf0:	2080      	movs	r0, #128	; 0x80
 8001cf2:	0252      	lsls	r2, r2, #9
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	0240      	lsls	r0, r0, #9
 8001cf8:	4283      	cmp	r3, r0
 8001cfa:	d00f      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x16c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d004      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x15a>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d00:	4814      	ldr	r0, [pc, #80]	; (8001d54 <HAL_RCC_ClockConfig+0x1a4>)
 8001d02:	f7fe fa13 	bl	800012c <__udivsi3>
 8001d06:	4360      	muls	r0, r4
 8001d08:	e7c6      	b.n	8001c98 <HAL_RCC_ClockConfig+0xe8>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d0a:	480f      	ldr	r0, [pc, #60]	; (8001d48 <HAL_RCC_ClockConfig+0x198>)
 8001d0c:	f7fe fa0e 	bl	800012c <__udivsi3>
 8001d10:	4360      	muls	r0, r4
 8001d12:	e7c1      	b.n	8001c98 <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d16:	039b      	lsls	r3, r3, #14
 8001d18:	d484      	bmi.n	8001c24 <HAL_RCC_ClockConfig+0x74>
 8001d1a:	e75f      	b.n	8001bdc <HAL_RCC_ClockConfig+0x2c>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d1c:	4806      	ldr	r0, [pc, #24]	; (8001d38 <HAL_RCC_ClockConfig+0x188>)
 8001d1e:	f7fe fa05 	bl	800012c <__udivsi3>
 8001d22:	4360      	muls	r0, r4
 8001d24:	e7b8      	b.n	8001c98 <HAL_RCC_ClockConfig+0xe8>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	40022000 	.word	0x40022000
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	00001388 	.word	0x00001388
 8001d34:	ff85ee00 	.word	0xff85ee00
 8001d38:	00f42400 	.word	0x00f42400
 8001d3c:	080036d0 	.word	0x080036d0
 8001d40:	20000000 	.word	0x20000000
 8001d44:	fffff8ff 	.word	0xfffff8ff
 8001d48:	02dc6c00 	.word	0x02dc6c00
 8001d4c:	080036e8 	.word	0x080036e8
 8001d50:	080036f8 	.word	0x080036f8
 8001d54:	007a1200 	.word	0x007a1200

08001d58 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8001d58:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8001d5a:	4a1a      	ldr	r2, [pc, #104]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8001d5c:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001d5e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d60:	4018      	ands	r0, r3
 8001d62:	2808      	cmp	r0, #8
 8001d64:	d00d      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0x2a>
 8001d66:	280c      	cmp	r0, #12
 8001d68:	d009      	beq.n	8001d7e <HAL_RCC_GetSysClockFreq+0x26>
      sysclockfreq = HSE_VALUE;
 8001d6a:	3804      	subs	r0, #4
 8001d6c:	1e43      	subs	r3, r0, #1
 8001d6e:	4198      	sbcs	r0, r3
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x70>)
 8001d72:	4240      	negs	r0, r0
 8001d74:	4018      	ands	r0, r3
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x74>)
 8001d78:	469c      	mov	ip, r3
 8001d7a:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d7c:	bd10      	pop	{r4, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 8001d7e:	4814      	ldr	r0, [pc, #80]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001d80:	e7fc      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x24>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d82:	210f      	movs	r1, #15
 8001d84:	0c98      	lsrs	r0, r3, #18
 8001d86:	4c13      	ldr	r4, [pc, #76]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001d88:	4008      	ands	r0, r1
 8001d8a:	5c24      	ldrb	r4, [r4, r0]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d8c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8001d8e:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x80>)
 8001d90:	4001      	ands	r1, r0
 8001d92:	5c51      	ldrb	r1, [r2, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d94:	22c0      	movs	r2, #192	; 0xc0
 8001d96:	2080      	movs	r0, #128	; 0x80
 8001d98:	0252      	lsls	r2, r2, #9
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	0240      	lsls	r0, r0, #9
 8001d9e:	4283      	cmp	r3, r0
 8001da0:	d006      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x58>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d009      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x62>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001da6:	480d      	ldr	r0, [pc, #52]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x84>)
 8001da8:	f7fe f9c0 	bl	800012c <__udivsi3>
 8001dac:	4360      	muls	r0, r4
 8001dae:	e7e5      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001db0:	4806      	ldr	r0, [pc, #24]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x74>)
 8001db2:	f7fe f9bb 	bl	800012c <__udivsi3>
 8001db6:	4360      	muls	r0, r4
 8001db8:	e7e0      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001dbc:	f7fe f9b6 	bl	800012c <__udivsi3>
 8001dc0:	4360      	muls	r0, r4
 8001dc2:	e7db      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x24>
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	ff85ee00 	.word	0xff85ee00
 8001dcc:	00f42400 	.word	0x00f42400
 8001dd0:	02dc6c00 	.word	0x02dc6c00
 8001dd4:	080036e8 	.word	0x080036e8
 8001dd8:	080036f8 	.word	0x080036f8
 8001ddc:	007a1200 	.word	0x007a1200

08001de0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4905      	ldr	r1, [pc, #20]	; (8001dfc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001de8:	055b      	lsls	r3, r3, #21
 8001dea:	0f5b      	lsrs	r3, r3, #29
 8001dec:	5ccb      	ldrb	r3, [r1, r3]
 8001dee:	6810      	ldr	r0, [r2, #0]
 8001df0:	40d8      	lsrs	r0, r3
}    
 8001df2:	4770      	bx	lr
 8001df4:	40021000 	.word	0x40021000
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	080036e0 	.word	0x080036e0

08001e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e02:	46ce      	mov	lr, r9
 8001e04:	4647      	mov	r7, r8
 8001e06:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e08:	6803      	ldr	r3, [r0, #0]
{
 8001e0a:	0004      	movs	r4, r0
 8001e0c:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e0e:	03da      	lsls	r2, r3, #15
 8001e10:	d531      	bpl.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e12:	2280      	movs	r2, #128	; 0x80
 8001e14:	4b4c      	ldr	r3, [pc, #304]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001e16:	0552      	lsls	r2, r2, #21
 8001e18:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001e1a:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1c:	4211      	tst	r1, r2
 8001e1e:	d054      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0xca>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	2680      	movs	r6, #128	; 0x80
 8001e22:	4d4a      	ldr	r5, [pc, #296]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e24:	0076      	lsls	r6, r6, #1
 8001e26:	682b      	ldr	r3, [r5, #0]
 8001e28:	4233      	tst	r3, r6
 8001e2a:	d05c      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e2c:	4d46      	ldr	r5, [pc, #280]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001e2e:	23c0      	movs	r3, #192	; 0xc0
 8001e30:	6a2a      	ldr	r2, [r5, #32]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	0010      	movs	r0, r2
 8001e36:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e38:	421a      	tst	r2, r3
 8001e3a:	d100      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8001e3c:	e075      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8001e3e:	6861      	ldr	r1, [r4, #4]
 8001e40:	400b      	ands	r3, r1
 8001e42:	4283      	cmp	r3, r0
 8001e44:	d00e      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e46:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e48:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e4a:	6a2e      	ldr	r6, [r5, #32]
 8001e4c:	0240      	lsls	r0, r0, #9
 8001e4e:	4330      	orrs	r0, r6
 8001e50:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e52:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e54:	4a3e      	ldr	r2, [pc, #248]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e56:	4e3f      	ldr	r6, [pc, #252]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x154>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e58:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e5a:	4030      	ands	r0, r6
 8001e5c:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e5e:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e60:	07db      	lsls	r3, r3, #31
 8001e62:	d451      	bmi.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x108>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e64:	4a38      	ldr	r2, [pc, #224]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001e66:	483a      	ldr	r0, [pc, #232]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e68:	6a13      	ldr	r3, [r2, #32]
 8001e6a:	4003      	ands	r3, r0
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e70:	2f01      	cmp	r7, #1
 8001e72:	d063      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	07da      	lsls	r2, r3, #31
 8001e78:	d506      	bpl.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e7a:	2003      	movs	r0, #3
 8001e7c:	4932      	ldr	r1, [pc, #200]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001e7e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001e80:	4382      	bics	r2, r0
 8001e82:	68a0      	ldr	r0, [r4, #8]
 8001e84:	4302      	orrs	r2, r0
 8001e86:	630a      	str	r2, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e88:	069a      	lsls	r2, r3, #26
 8001e8a:	d506      	bpl.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e8c:	2010      	movs	r0, #16
 8001e8e:	492e      	ldr	r1, [pc, #184]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001e90:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001e92:	4382      	bics	r2, r0
 8001e94:	68e0      	ldr	r0, [r4, #12]
 8001e96:	4302      	orrs	r2, r0
 8001e98:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e9a:	039a      	lsls	r2, r3, #14
 8001e9c:	d506      	bpl.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e9e:	2080      	movs	r0, #128	; 0x80
 8001ea0:	4929      	ldr	r1, [pc, #164]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001ea2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001ea4:	4382      	bics	r2, r0
 8001ea6:	6960      	ldr	r0, [r4, #20]
 8001ea8:	4302      	orrs	r2, r0
 8001eaa:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001eac:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001eae:	055b      	lsls	r3, r3, #21
 8001eb0:	d506      	bpl.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001eb2:	2140      	movs	r1, #64	; 0x40
 8001eb4:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001eb6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001eb8:	438b      	bics	r3, r1
 8001eba:	6921      	ldr	r1, [r4, #16]
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001ec0:	b003      	add	sp, #12
 8001ec2:	bcc0      	pop	{r6, r7}
 8001ec4:	46b9      	mov	r9, r7
 8001ec6:	46b0      	mov	r8, r6
 8001ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eca:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ecc:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ece:	4d1f      	ldr	r5, [pc, #124]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ed0:	4311      	orrs	r1, r2
 8001ed2:	61d9      	str	r1, [r3, #28]
 8001ed4:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	4013      	ands	r3, r2
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 8001ee0:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee2:	4233      	tst	r3, r6
 8001ee4:	d1a2      	bne.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee6:	682b      	ldr	r3, [r5, #0]
 8001ee8:	4333      	orrs	r3, r6
 8001eea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001eec:	f7fe fe38 	bl	8000b60 <HAL_GetTick>
 8001ef0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef2:	682b      	ldr	r3, [r5, #0]
 8001ef4:	4233      	tst	r3, r6
 8001ef6:	d199      	bne.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef8:	f7fe fe32 	bl	8000b60 <HAL_GetTick>
 8001efc:	4643      	mov	r3, r8
 8001efe:	1ac0      	subs	r0, r0, r3
 8001f00:	2864      	cmp	r0, #100	; 0x64
 8001f02:	d9f6      	bls.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          return HAL_TIMEOUT;
 8001f04:	2003      	movs	r0, #3
 8001f06:	e7db      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        tickstart = HAL_GetTick();
 8001f08:	f7fe fe2a 	bl	8000b60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x158>)
        tickstart = HAL_GetTick();
 8001f12:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f14:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	e004      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x122>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f18:	f7fe fe22 	bl	8000b60 <HAL_GetTick>
 8001f1c:	1b80      	subs	r0, r0, r6
 8001f1e:	4548      	cmp	r0, r9
 8001f20:	d8f0      	bhi.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x104>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f22:	4642      	mov	r2, r8
 8001f24:	6a2b      	ldr	r3, [r5, #32]
 8001f26:	421a      	tst	r2, r3
 8001f28:	d0f6      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x118>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f2a:	4a07      	ldr	r2, [pc, #28]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001f2c:	4808      	ldr	r0, [pc, #32]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001f2e:	6a13      	ldr	r3, [r2, #32]
 8001f30:	6861      	ldr	r1, [r4, #4]
 8001f32:	4003      	ands	r3, r0
 8001f34:	430b      	orrs	r3, r1
 8001f36:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 8001f38:	2f01      	cmp	r7, #1
 8001f3a:	d19b      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x74>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3c:	69d3      	ldr	r3, [r2, #28]
 8001f3e:	4907      	ldr	r1, [pc, #28]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001f40:	400b      	ands	r3, r1
 8001f42:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	e796      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	fffffcff 	.word	0xfffffcff
 8001f54:	fffeffff 	.word	0xfffeffff
 8001f58:	00001388 	.word	0x00001388
 8001f5c:	efffffff 	.word	0xefffffff

08001f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f60:	b510      	push	{r4, lr}
 8001f62:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f64:	d066      	beq.n	8002034 <HAL_TIM_Base_Init+0xd4>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f66:	233d      	movs	r3, #61	; 0x3d
 8001f68:	5cc3      	ldrb	r3, [r0, r3]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d041      	beq.n	8001ff4 <HAL_TIM_Base_Init+0x94>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f70:	233d      	movs	r3, #61	; 0x3d
 8001f72:	2202      	movs	r2, #2
 8001f74:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f76:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f78:	492f      	ldr	r1, [pc, #188]	; (8002038 <HAL_TIM_Base_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8001f7a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f7c:	428a      	cmp	r2, r1
 8001f7e:	d045      	beq.n	800200c <HAL_TIM_Base_Init+0xac>
 8001f80:	2180      	movs	r1, #128	; 0x80
 8001f82:	05c9      	lsls	r1, r1, #23
 8001f84:	428a      	cmp	r2, r1
 8001f86:	d02c      	beq.n	8001fe2 <HAL_TIM_Base_Init+0x82>
 8001f88:	492c      	ldr	r1, [pc, #176]	; (800203c <HAL_TIM_Base_Init+0xdc>)
 8001f8a:	428a      	cmp	r2, r1
 8001f8c:	d029      	beq.n	8001fe2 <HAL_TIM_Base_Init+0x82>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f8e:	492c      	ldr	r1, [pc, #176]	; (8002040 <HAL_TIM_Base_Init+0xe0>)
 8001f90:	428a      	cmp	r2, r1
 8001f92:	d02a      	beq.n	8001fea <HAL_TIM_Base_Init+0x8a>
 8001f94:	492b      	ldr	r1, [pc, #172]	; (8002044 <HAL_TIM_Base_Init+0xe4>)
 8001f96:	428a      	cmp	r2, r1
 8001f98:	d03c      	beq.n	8002014 <HAL_TIM_Base_Init+0xb4>
 8001f9a:	492b      	ldr	r1, [pc, #172]	; (8002048 <HAL_TIM_Base_Init+0xe8>)
 8001f9c:	428a      	cmp	r2, r1
 8001f9e:	d039      	beq.n	8002014 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa0:	2180      	movs	r1, #128	; 0x80
 8001fa2:	438b      	bics	r3, r1
 8001fa4:	69a1      	ldr	r1, [r4, #24]
 8001fa6:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8001fa8:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001faa:	68e3      	ldr	r3, [r4, #12]
 8001fac:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fae:	6863      	ldr	r3, [r4, #4]
 8001fb0:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb6:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8001fb8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fba:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fbc:	3a08      	subs	r2, #8
 8001fbe:	54a3      	strb	r3, [r4, r2]
 8001fc0:	3201      	adds	r2, #1
 8001fc2:	54a3      	strb	r3, [r4, r2]
 8001fc4:	3201      	adds	r2, #1
 8001fc6:	54a3      	strb	r3, [r4, r2]
 8001fc8:	3201      	adds	r2, #1
 8001fca:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fcc:	3201      	adds	r2, #1
 8001fce:	54a3      	strb	r3, [r4, r2]
 8001fd0:	3201      	adds	r2, #1
 8001fd2:	54a3      	strb	r3, [r4, r2]
 8001fd4:	3201      	adds	r2, #1
 8001fd6:	54a3      	strb	r3, [r4, r2]
 8001fd8:	3201      	adds	r2, #1
 8001fda:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001fdc:	3a08      	subs	r2, #8
 8001fde:	54a3      	strb	r3, [r4, r2]
}
 8001fe0:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fe2:	2170      	movs	r1, #112	; 0x70
 8001fe4:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8001fe6:	68a1      	ldr	r1, [r4, #8]
 8001fe8:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fea:	4918      	ldr	r1, [pc, #96]	; (800204c <HAL_TIM_Base_Init+0xec>)
 8001fec:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fee:	6921      	ldr	r1, [r4, #16]
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	e7d5      	b.n	8001fa0 <HAL_TIM_Base_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 8001ff4:	333c      	adds	r3, #60	; 0x3c
 8001ff6:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001ff8:	f7fe fcc8 	bl	800098c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001ffc:	233d      	movs	r3, #61	; 0x3d
 8001ffe:	2202      	movs	r2, #2
 8002000:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002002:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002004:	490c      	ldr	r1, [pc, #48]	; (8002038 <HAL_TIM_Base_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8002006:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002008:	428a      	cmp	r2, r1
 800200a:	d1b9      	bne.n	8001f80 <HAL_TIM_Base_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800200c:	2170      	movs	r1, #112	; 0x70
 800200e:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8002010:	68a1      	ldr	r1, [r4, #8]
 8002012:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8002014:	490d      	ldr	r1, [pc, #52]	; (800204c <HAL_TIM_Base_Init+0xec>)
 8002016:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002018:	6921      	ldr	r1, [r4, #16]
 800201a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800201c:	2180      	movs	r1, #128	; 0x80
 800201e:	438b      	bics	r3, r1
 8002020:	69a1      	ldr	r1, [r4, #24]
 8002022:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002024:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002026:	68e3      	ldr	r3, [r4, #12]
 8002028:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800202a:	6863      	ldr	r3, [r4, #4]
 800202c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800202e:	6963      	ldr	r3, [r4, #20]
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	e7be      	b.n	8001fb2 <HAL_TIM_Base_Init+0x52>
    return HAL_ERROR;
 8002034:	2001      	movs	r0, #1
 8002036:	e7d3      	b.n	8001fe0 <HAL_TIM_Base_Init+0x80>
 8002038:	40012c00 	.word	0x40012c00
 800203c:	40000400 	.word	0x40000400
 8002040:	40002000 	.word	0x40002000
 8002044:	40014400 	.word	0x40014400
 8002048:	40014800 	.word	0x40014800
 800204c:	fffffcff 	.word	0xfffffcff

08002050 <HAL_TIM_PWM_MspInit>:
 8002050:	4770      	bx	lr
 8002052:	46c0      	nop			; (mov r8, r8)

08002054 <HAL_TIM_PWM_Init>:
{
 8002054:	b510      	push	{r4, lr}
 8002056:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002058:	d066      	beq.n	8002128 <HAL_TIM_PWM_Init+0xd4>
  if (htim->State == HAL_TIM_STATE_RESET)
 800205a:	233d      	movs	r3, #61	; 0x3d
 800205c:	5cc3      	ldrb	r3, [r0, r3]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d041      	beq.n	80020e8 <HAL_TIM_PWM_Init+0x94>
  htim->State = HAL_TIM_STATE_BUSY;
 8002064:	233d      	movs	r3, #61	; 0x3d
 8002066:	2202      	movs	r2, #2
 8002068:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800206a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800206c:	492f      	ldr	r1, [pc, #188]	; (800212c <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 800206e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002070:	428a      	cmp	r2, r1
 8002072:	d045      	beq.n	8002100 <HAL_TIM_PWM_Init+0xac>
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	05c9      	lsls	r1, r1, #23
 8002078:	428a      	cmp	r2, r1
 800207a:	d02c      	beq.n	80020d6 <HAL_TIM_PWM_Init+0x82>
 800207c:	492c      	ldr	r1, [pc, #176]	; (8002130 <HAL_TIM_PWM_Init+0xdc>)
 800207e:	428a      	cmp	r2, r1
 8002080:	d029      	beq.n	80020d6 <HAL_TIM_PWM_Init+0x82>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002082:	492c      	ldr	r1, [pc, #176]	; (8002134 <HAL_TIM_PWM_Init+0xe0>)
 8002084:	428a      	cmp	r2, r1
 8002086:	d02a      	beq.n	80020de <HAL_TIM_PWM_Init+0x8a>
 8002088:	492b      	ldr	r1, [pc, #172]	; (8002138 <HAL_TIM_PWM_Init+0xe4>)
 800208a:	428a      	cmp	r2, r1
 800208c:	d03c      	beq.n	8002108 <HAL_TIM_PWM_Init+0xb4>
 800208e:	492b      	ldr	r1, [pc, #172]	; (800213c <HAL_TIM_PWM_Init+0xe8>)
 8002090:	428a      	cmp	r2, r1
 8002092:	d039      	beq.n	8002108 <HAL_TIM_PWM_Init+0xb4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	438b      	bics	r3, r1
 8002098:	69a1      	ldr	r1, [r4, #24]
 800209a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800209c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800209e:	68e3      	ldr	r3, [r4, #12]
 80020a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80020a2:	6863      	ldr	r3, [r4, #4]
 80020a4:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80020a6:	2301      	movs	r3, #1
 80020a8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020aa:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 80020ac:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ae:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b0:	3a08      	subs	r2, #8
 80020b2:	54a3      	strb	r3, [r4, r2]
 80020b4:	3201      	adds	r2, #1
 80020b6:	54a3      	strb	r3, [r4, r2]
 80020b8:	3201      	adds	r2, #1
 80020ba:	54a3      	strb	r3, [r4, r2]
 80020bc:	3201      	adds	r2, #1
 80020be:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c0:	3201      	adds	r2, #1
 80020c2:	54a3      	strb	r3, [r4, r2]
 80020c4:	3201      	adds	r2, #1
 80020c6:	54a3      	strb	r3, [r4, r2]
 80020c8:	3201      	adds	r2, #1
 80020ca:	54a3      	strb	r3, [r4, r2]
 80020cc:	3201      	adds	r2, #1
 80020ce:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80020d0:	3a08      	subs	r2, #8
 80020d2:	54a3      	strb	r3, [r4, r2]
}
 80020d4:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d6:	2170      	movs	r1, #112	; 0x70
 80020d8:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80020da:	68a1      	ldr	r1, [r4, #8]
 80020dc:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80020de:	4918      	ldr	r1, [pc, #96]	; (8002140 <HAL_TIM_PWM_Init+0xec>)
 80020e0:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e2:	6921      	ldr	r1, [r4, #16]
 80020e4:	430b      	orrs	r3, r1
 80020e6:	e7d5      	b.n	8002094 <HAL_TIM_PWM_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 80020e8:	333c      	adds	r3, #60	; 0x3c
 80020ea:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80020ec:	f7ff ffb0 	bl	8002050 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80020f0:	233d      	movs	r3, #61	; 0x3d
 80020f2:	2202      	movs	r2, #2
 80020f4:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f8:	490c      	ldr	r1, [pc, #48]	; (800212c <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 80020fa:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020fc:	428a      	cmp	r2, r1
 80020fe:	d1b9      	bne.n	8002074 <HAL_TIM_PWM_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002100:	2170      	movs	r1, #112	; 0x70
 8002102:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8002104:	68a1      	ldr	r1, [r4, #8]
 8002106:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8002108:	490d      	ldr	r1, [pc, #52]	; (8002140 <HAL_TIM_PWM_Init+0xec>)
 800210a:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800210c:	6921      	ldr	r1, [r4, #16]
 800210e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002110:	2180      	movs	r1, #128	; 0x80
 8002112:	438b      	bics	r3, r1
 8002114:	69a1      	ldr	r1, [r4, #24]
 8002116:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002118:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800211a:	68e3      	ldr	r3, [r4, #12]
 800211c:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800211e:	6863      	ldr	r3, [r4, #4]
 8002120:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002122:	6963      	ldr	r3, [r4, #20]
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	e7be      	b.n	80020a6 <HAL_TIM_PWM_Init+0x52>
    return HAL_ERROR;
 8002128:	2001      	movs	r0, #1
 800212a:	e7d3      	b.n	80020d4 <HAL_TIM_PWM_Init+0x80>
 800212c:	40012c00 	.word	0x40012c00
 8002130:	40000400 	.word	0x40000400
 8002134:	40002000 	.word	0x40002000
 8002138:	40014400 	.word	0x40014400
 800213c:	40014800 	.word	0x40014800
 8002140:	fffffcff 	.word	0xfffffcff

08002144 <HAL_TIM_PWM_ConfigChannel>:
{
 8002144:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8002146:	203c      	movs	r0, #60	; 0x3c
{
 8002148:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800214a:	5c1c      	ldrb	r4, [r3, r0]
 800214c:	2c01      	cmp	r4, #1
 800214e:	d100      	bne.n	8002152 <HAL_TIM_PWM_ConfigChannel+0xe>
 8002150:	e0de      	b.n	8002310 <HAL_TIM_PWM_ConfigChannel+0x1cc>
 8002152:	2401      	movs	r4, #1
 8002154:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 8002156:	2a08      	cmp	r2, #8
 8002158:	d100      	bne.n	800215c <HAL_TIM_PWM_ConfigChannel+0x18>
 800215a:	e0ac      	b.n	80022b6 <HAL_TIM_PWM_ConfigChannel+0x172>
 800215c:	d834      	bhi.n	80021c8 <HAL_TIM_PWM_ConfigChannel+0x84>
 800215e:	2a00      	cmp	r2, #0
 8002160:	d100      	bne.n	8002164 <HAL_TIM_PWM_ConfigChannel+0x20>
 8002162:	e07d      	b.n	8002260 <HAL_TIM_PWM_ConfigChannel+0x11c>
 8002164:	2a04      	cmp	r2, #4
 8002166:	d161      	bne.n	800222c <HAL_TIM_PWM_ConfigChannel+0xe8>
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002168:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800216a:	681a      	ldr	r2, [r3, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800216c:	4d77      	ldr	r5, [pc, #476]	; (800234c <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800216e:	6a10      	ldr	r0, [r2, #32]
 8002170:	43a0      	bics	r0, r4
 8002172:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8002174:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8002176:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8002178:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800217a:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800217c:	680d      	ldr	r5, [r1, #0]
 800217e:	022d      	lsls	r5, r5, #8
 8002180:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002182:	2420      	movs	r4, #32
 8002184:	43a0      	bics	r0, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002186:	688c      	ldr	r4, [r1, #8]
 8002188:	0124      	lsls	r4, r4, #4
 800218a:	4304      	orrs	r4, r0

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800218c:	4870      	ldr	r0, [pc, #448]	; (8002350 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 800218e:	4282      	cmp	r2, r0
 8002190:	d057      	beq.n	8002242 <HAL_TIM_PWM_ConfigChannel+0xfe>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002192:	4870      	ldr	r0, [pc, #448]	; (8002354 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8002194:	4282      	cmp	r2, r0
 8002196:	d05b      	beq.n	8002250 <HAL_TIM_PWM_ConfigChannel+0x10c>
 8002198:	486f      	ldr	r0, [pc, #444]	; (8002358 <HAL_TIM_PWM_ConfigChannel+0x214>)
 800219a:	4282      	cmp	r2, r0
 800219c:	d058      	beq.n	8002250 <HAL_TIM_PWM_ConfigChannel+0x10c>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800219e:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80021a0:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80021a2:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80021a4:	6390      	str	r0, [r2, #56]	; 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021a6:	2080      	movs	r0, #128	; 0x80

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021a8:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021aa:	6994      	ldr	r4, [r2, #24]
 80021ac:	0100      	lsls	r0, r0, #4
 80021ae:	4320      	orrs	r0, r4
 80021b0:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021b2:	6990      	ldr	r0, [r2, #24]
 80021b4:	4c69      	ldr	r4, [pc, #420]	; (800235c <HAL_TIM_PWM_ConfigChannel+0x218>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021b6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021b8:	4020      	ands	r0, r4
 80021ba:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021bc:	6990      	ldr	r0, [r2, #24]
 80021be:	0209      	lsls	r1, r1, #8
 80021c0:	4301      	orrs	r1, r0
 80021c2:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80021c4:	2000      	movs	r0, #0
      break;
 80021c6:	e032      	b.n	800222e <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 80021c8:	2a0c      	cmp	r2, #12
 80021ca:	d12f      	bne.n	800222c <HAL_TIM_PWM_ConfigChannel+0xe8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021cc:	681a      	ldr	r2, [r3, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021ce:	4c64      	ldr	r4, [pc, #400]	; (8002360 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 80021d0:	6a10      	ldr	r0, [r2, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021d2:	4d5e      	ldr	r5, [pc, #376]	; (800234c <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021d4:	4020      	ands	r0, r4
 80021d6:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80021d8:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80021da:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80021dc:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021de:	4028      	ands	r0, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021e0:	680d      	ldr	r5, [r1, #0]
 80021e2:	022d      	lsls	r5, r5, #8
 80021e4:	4305      	orrs	r5, r0

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021e6:	485f      	ldr	r0, [pc, #380]	; (8002364 <HAL_TIM_PWM_ConfigChannel+0x220>)
 80021e8:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021ea:	6888      	ldr	r0, [r1, #8]
 80021ec:	0300      	lsls	r0, r0, #12
 80021ee:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021f0:	4c57      	ldr	r4, [pc, #348]	; (8002350 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 80021f2:	42a2      	cmp	r2, r4
 80021f4:	d01f      	beq.n	8002236 <HAL_TIM_PWM_ConfigChannel+0xf2>
 80021f6:	4c57      	ldr	r4, [pc, #348]	; (8002354 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80021f8:	42a2      	cmp	r2, r4
 80021fa:	d01c      	beq.n	8002236 <HAL_TIM_PWM_ConfigChannel+0xf2>
 80021fc:	4c56      	ldr	r4, [pc, #344]	; (8002358 <HAL_TIM_PWM_ConfigChannel+0x214>)
 80021fe:	42a2      	cmp	r2, r4
 8002200:	d019      	beq.n	8002236 <HAL_TIM_PWM_ConfigChannel+0xf2>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002202:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002204:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002206:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002208:	6414      	str	r4, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800220a:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800220c:	2080      	movs	r0, #128	; 0x80
 800220e:	69d4      	ldr	r4, [r2, #28]
 8002210:	0100      	lsls	r0, r0, #4
 8002212:	4320      	orrs	r0, r4
 8002214:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002216:	69d0      	ldr	r0, [r2, #28]
 8002218:	4c50      	ldr	r4, [pc, #320]	; (800235c <HAL_TIM_PWM_ConfigChannel+0x218>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800221a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800221c:	4020      	ands	r0, r4
 800221e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002220:	69d0      	ldr	r0, [r2, #28]
 8002222:	0209      	lsls	r1, r1, #8
 8002224:	4301      	orrs	r1, r0
 8002226:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002228:	2000      	movs	r0, #0
      break;
 800222a:	e000      	b.n	800222e <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 800222c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800222e:	223c      	movs	r2, #60	; 0x3c
 8002230:	2100      	movs	r1, #0
 8002232:	5499      	strb	r1, [r3, r2]
}
 8002234:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002236:	4c4c      	ldr	r4, [pc, #304]	; (8002368 <HAL_TIM_PWM_ConfigChannel+0x224>)
 8002238:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800223a:	694e      	ldr	r6, [r1, #20]
 800223c:	01b6      	lsls	r6, r6, #6
 800223e:	4326      	orrs	r6, r4
 8002240:	e7df      	b.n	8002202 <HAL_TIM_PWM_ConfigChannel+0xbe>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002242:	2080      	movs	r0, #128	; 0x80
 8002244:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002246:	68c8      	ldr	r0, [r1, #12]
 8002248:	0100      	lsls	r0, r0, #4
 800224a:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 800224c:	2040      	movs	r0, #64	; 0x40
 800224e:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002250:	4846      	ldr	r0, [pc, #280]	; (800236c <HAL_TIM_PWM_ConfigChannel+0x228>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002252:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002254:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002256:	698e      	ldr	r6, [r1, #24]
 8002258:	433e      	orrs	r6, r7
 800225a:	00b6      	lsls	r6, r6, #2
 800225c:	4306      	orrs	r6, r0
 800225e:	e79e      	b.n	800219e <HAL_TIM_PWM_ConfigChannel+0x5a>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002260:	2673      	movs	r6, #115	; 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002262:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002264:	6a10      	ldr	r0, [r2, #32]
 8002266:	43a0      	bics	r0, r4
 8002268:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 800226a:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800226c:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800226e:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002270:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8002272:	680e      	ldr	r6, [r1, #0]
 8002274:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC1P;
 8002276:	2602      	movs	r6, #2
 8002278:	43b0      	bics	r0, r6
  tmpccer |= OC_Config->OCPolarity;
 800227a:	688e      	ldr	r6, [r1, #8]
 800227c:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800227e:	4e34      	ldr	r6, [pc, #208]	; (8002350 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8002280:	42b2      	cmp	r2, r6
 8002282:	d047      	beq.n	8002314 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8002284:	4e33      	ldr	r6, [pc, #204]	; (8002354 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8002286:	42b2      	cmp	r2, r6
 8002288:	d044      	beq.n	8002314 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 800228a:	4e33      	ldr	r6, [pc, #204]	; (8002358 <HAL_TIM_PWM_ConfigChannel+0x214>)
 800228c:	42b2      	cmp	r2, r6
 800228e:	d041      	beq.n	8002314 <HAL_TIM_PWM_ConfigChannel+0x1d0>
  TIMx->CR2 = tmpcr2;
 8002290:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002292:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002294:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002296:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8002298:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800229a:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 800229c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800229e:	6990      	ldr	r0, [r2, #24]
 80022a0:	4320      	orrs	r0, r4
 80022a2:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022a4:	6990      	ldr	r0, [r2, #24]
 80022a6:	3c04      	subs	r4, #4
 80022a8:	43a0      	bics	r0, r4
 80022aa:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022ac:	6990      	ldr	r0, [r2, #24]
 80022ae:	4301      	orrs	r1, r0
 80022b0:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80022b2:	2000      	movs	r0, #0
      break;
 80022b4:	e7bb      	b.n	800222e <HAL_TIM_PWM_ConfigChannel+0xea>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022b6:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022b8:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022ba:	4c2d      	ldr	r4, [pc, #180]	; (8002370 <HAL_TIM_PWM_ConfigChannel+0x22c>)
 80022bc:	6a10      	ldr	r0, [r2, #32]
 80022be:	4020      	ands	r0, r4
 80022c0:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80022c2:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80022c4:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80022c6:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022c8:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 80022ca:	680e      	ldr	r6, [r1, #0]
 80022cc:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 80022ce:	4c29      	ldr	r4, [pc, #164]	; (8002374 <HAL_TIM_PWM_ConfigChannel+0x230>)
 80022d0:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022d2:	688c      	ldr	r4, [r1, #8]
 80022d4:	0224      	lsls	r4, r4, #8
 80022d6:	4320      	orrs	r0, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022d8:	4c1d      	ldr	r4, [pc, #116]	; (8002350 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 80022da:	42a2      	cmp	r2, r4
 80022dc:	d027      	beq.n	800232e <HAL_TIM_PWM_ConfigChannel+0x1ea>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022de:	4c1d      	ldr	r4, [pc, #116]	; (8002354 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d02b      	beq.n	800233c <HAL_TIM_PWM_ConfigChannel+0x1f8>
 80022e4:	4c1c      	ldr	r4, [pc, #112]	; (8002358 <HAL_TIM_PWM_ConfigChannel+0x214>)
 80022e6:	42a2      	cmp	r2, r4
 80022e8:	d028      	beq.n	800233c <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCR3 = OC_Config->Pulse;
 80022ea:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80022ec:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 80022ee:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80022f0:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022f2:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 80022f4:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022f6:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022f8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022fa:	4320      	orrs	r0, r4
 80022fc:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022fe:	69d0      	ldr	r0, [r2, #28]
 8002300:	3c04      	subs	r4, #4
 8002302:	43a0      	bics	r0, r4
 8002304:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002306:	69d0      	ldr	r0, [r2, #28]
 8002308:	4301      	orrs	r1, r0
 800230a:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800230c:	2000      	movs	r0, #0
      break;
 800230e:	e78e      	b.n	800222e <HAL_TIM_PWM_ConfigChannel+0xea>
  __HAL_LOCK(htim);
 8002310:	2002      	movs	r0, #2
 8002312:	e78f      	b.n	8002234 <HAL_TIM_PWM_ConfigChannel+0xf0>
    tmpccer &= ~TIM_CCER_CC1NP;
 8002314:	2608      	movs	r6, #8
 8002316:	43b0      	bics	r0, r6
    tmpccer |= OC_Config->OCNPolarity;
 8002318:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800231a:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800231c:	4330      	orrs	r0, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800231e:	2604      	movs	r6, #4
 8002320:	43b0      	bics	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002322:	4e15      	ldr	r6, [pc, #84]	; (8002378 <HAL_TIM_PWM_ConfigChannel+0x234>)
 8002324:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002326:	694d      	ldr	r5, [r1, #20]
 8002328:	433d      	orrs	r5, r7
 800232a:	4335      	orrs	r5, r6
 800232c:	e7b0      	b.n	8002290 <HAL_TIM_PWM_ConfigChannel+0x14c>
    tmpccer &= ~TIM_CCER_CC3NP;
 800232e:	4c13      	ldr	r4, [pc, #76]	; (800237c <HAL_TIM_PWM_ConfigChannel+0x238>)
 8002330:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002332:	68cc      	ldr	r4, [r1, #12]
 8002334:	0224      	lsls	r4, r4, #8
 8002336:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8002338:	4808      	ldr	r0, [pc, #32]	; (800235c <HAL_TIM_PWM_ConfigChannel+0x218>)
 800233a:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800233c:	4c10      	ldr	r4, [pc, #64]	; (8002380 <HAL_TIM_PWM_ConfigChannel+0x23c>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800233e:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002340:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002342:	698d      	ldr	r5, [r1, #24]
 8002344:	433d      	orrs	r5, r7
 8002346:	012d      	lsls	r5, r5, #4
 8002348:	4325      	orrs	r5, r4
 800234a:	e7ce      	b.n	80022ea <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800234c:	ffff8cff 	.word	0xffff8cff
 8002350:	40012c00 	.word	0x40012c00
 8002354:	40014400 	.word	0x40014400
 8002358:	40014800 	.word	0x40014800
 800235c:	fffffbff 	.word	0xfffffbff
 8002360:	ffffefff 	.word	0xffffefff
 8002364:	ffffdfff 	.word	0xffffdfff
 8002368:	ffffbfff 	.word	0xffffbfff
 800236c:	fffff3ff 	.word	0xfffff3ff
 8002370:	fffffeff 	.word	0xfffffeff
 8002374:	fffffdff 	.word	0xfffffdff
 8002378:	fffffcff 	.word	0xfffffcff
 800237c:	fffff7ff 	.word	0xfffff7ff
 8002380:	ffffcfff 	.word	0xffffcfff

08002384 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002384:	233c      	movs	r3, #60	; 0x3c
{
 8002386:	b570      	push	{r4, r5, r6, lr}
 8002388:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 800238a:	5cc0      	ldrb	r0, [r0, r3]
 800238c:	2801      	cmp	r0, #1
 800238e:	d100      	bne.n	8002392 <HAL_TIM_ConfigClockSource+0xe>
 8002390:	e075      	b.n	800247e <HAL_TIM_ConfigClockSource+0xfa>
 8002392:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8002396:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8002398:	3301      	adds	r3, #1
 800239a:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 800239c:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800239e:	4d52      	ldr	r5, [pc, #328]	; (80024e8 <HAL_TIM_ConfigClockSource+0x164>)
  tmpsmcr = htim->Instance->SMCR;
 80023a0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a2:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80023a4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80023a6:	680b      	ldr	r3, [r1, #0]
 80023a8:	2b60      	cmp	r3, #96	; 0x60
 80023aa:	d100      	bne.n	80023ae <HAL_TIM_ConfigClockSource+0x2a>
 80023ac:	e069      	b.n	8002482 <HAL_TIM_ConfigClockSource+0xfe>
 80023ae:	d823      	bhi.n	80023f8 <HAL_TIM_ConfigClockSource+0x74>
 80023b0:	2b40      	cmp	r3, #64	; 0x40
 80023b2:	d100      	bne.n	80023b6 <HAL_TIM_ConfigClockSource+0x32>
 80023b4:	e07f      	b.n	80024b6 <HAL_TIM_ConfigClockSource+0x132>
 80023b6:	d952      	bls.n	800245e <HAL_TIM_ConfigClockSource+0xda>
 80023b8:	2b50      	cmp	r3, #80	; 0x50
 80023ba:	d13b      	bne.n	8002434 <HAL_TIM_ConfigClockSource+0xb0>
                               sClockSourceConfig->ClockPolarity,
 80023bc:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80023be:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023c0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023c2:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023c4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023c6:	43a6      	bics	r6, r4
 80023c8:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ca:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80023cc:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ce:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023d0:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023d2:	240a      	movs	r4, #10
 80023d4:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80023d6:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023d8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80023da:	6201      	str	r1, [r0, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023dc:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80023de:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023e0:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023e2:	3919      	subs	r1, #25
 80023e4:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023e6:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80023e8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80023ea:	233d      	movs	r3, #61	; 0x3d
 80023ec:	2101      	movs	r1, #1
 80023ee:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 80023f0:	2100      	movs	r1, #0
 80023f2:	3b01      	subs	r3, #1
 80023f4:	54d1      	strb	r1, [r2, r3]
}
 80023f6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80023f8:	2480      	movs	r4, #128	; 0x80
 80023fa:	0164      	lsls	r4, r4, #5
 80023fc:	42a3      	cmp	r3, r4
 80023fe:	d03c      	beq.n	800247a <HAL_TIM_ConfigClockSource+0xf6>
 8002400:	2480      	movs	r4, #128	; 0x80
 8002402:	01a4      	lsls	r4, r4, #6
 8002404:	42a3      	cmp	r3, r4
 8002406:	d117      	bne.n	8002438 <HAL_TIM_ConfigClockSource+0xb4>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002408:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800240a:	4b38      	ldr	r3, [pc, #224]	; (80024ec <HAL_TIM_ConfigClockSource+0x168>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800240c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800240e:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002410:	688b      	ldr	r3, [r1, #8]
 8002412:	68c9      	ldr	r1, [r1, #12]
 8002414:	432b      	orrs	r3, r5
 8002416:	0209      	lsls	r1, r1, #8
 8002418:	430b      	orrs	r3, r1
 800241a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800241c:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	6881      	ldr	r1, [r0, #8]
 8002422:	01db      	lsls	r3, r3, #7
 8002424:	430b      	orrs	r3, r1
 8002426:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002428:	2000      	movs	r0, #0
      break;
 800242a:	e7de      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800242c:	2110      	movs	r1, #16
 800242e:	001c      	movs	r4, r3
 8002430:	438c      	bics	r4, r1
 8002432:	d019      	beq.n	8002468 <HAL_TIM_ConfigClockSource+0xe4>
 8002434:	2001      	movs	r0, #1
 8002436:	e7d8      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x66>
 8002438:	2b70      	cmp	r3, #112	; 0x70
 800243a:	d1fb      	bne.n	8002434 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr = TIMx->SMCR;
 800243c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800243e:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002440:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002442:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002444:	688b      	ldr	r3, [r1, #8]
 8002446:	68c9      	ldr	r1, [r1, #12]
 8002448:	432b      	orrs	r3, r5
 800244a:	0209      	lsls	r1, r1, #8
 800244c:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800244e:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002450:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8002452:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002454:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002456:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8002458:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2000      	movs	r0, #0
      break;
 800245c:	e7c5      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800245e:	2b20      	cmp	r3, #32
 8002460:	d002      	beq.n	8002468 <HAL_TIM_ConfigClockSource+0xe4>
 8002462:	d9e3      	bls.n	800242c <HAL_TIM_ConfigClockSource+0xa8>
 8002464:	2b30      	cmp	r3, #48	; 0x30
 8002466:	d1e5      	bne.n	8002434 <HAL_TIM_ConfigClockSource+0xb0>
  tmpsmcr &= ~TIM_SMCR_TS;
 8002468:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800246a:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800246c:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800246e:	430b      	orrs	r3, r1
 8002470:	2107      	movs	r1, #7
 8002472:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002474:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002476:	2000      	movs	r0, #0
}
 8002478:	e7b7      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 800247a:	2000      	movs	r0, #0
 800247c:	e7b5      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 800247e:	2002      	movs	r0, #2
 8002480:	e7b9      	b.n	80023f6 <HAL_TIM_ConfigClockSource+0x72>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002482:	2510      	movs	r5, #16
 8002484:	6a04      	ldr	r4, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8002486:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002488:	43ac      	bics	r4, r5
                               sClockSourceConfig->ClockFilter);
 800248a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800248c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800248e:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002490:	4e17      	ldr	r6, [pc, #92]	; (80024f0 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002492:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002494:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002496:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002498:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 800249a:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800249c:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800249e:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024a0:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 80024a6:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80024a8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80024aa:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024ac:	3909      	subs	r1, #9
 80024ae:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80024b0:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2000      	movs	r0, #0
}
 80024b4:	e799      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 80024b6:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80024b8:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80024ba:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024bc:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024be:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024c0:	43a6      	bics	r6, r4
 80024c2:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024c4:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80024c6:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024c8:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024ca:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024cc:	240a      	movs	r4, #10
 80024ce:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80024d0:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80024d2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80024d4:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80024d6:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80024d8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80024da:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024dc:	3929      	subs	r1, #41	; 0x29
 80024de:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80024e0:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80024e2:	2000      	movs	r0, #0
}
 80024e4:	e781      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x66>
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	ffff0088 	.word	0xffff0088
 80024ec:	ffff00ff 	.word	0xffff00ff
 80024f0:	ffff0fff 	.word	0xffff0fff

080024f4 <HAL_TIMEx_PWMN_Start>:
 80024f4:	2900      	cmp	r1, #0
 80024f6:	d125      	bne.n	8002544 <HAL_TIMEx_PWMN_Start+0x50>
 80024f8:	2342      	movs	r3, #66	; 0x42
 80024fa:	5cc2      	ldrb	r2, [r0, r3]
 80024fc:	2a01      	cmp	r2, #1
 80024fe:	d129      	bne.n	8002554 <HAL_TIMEx_PWMN_Start+0x60>
 8002500:	2202      	movs	r2, #2
 8002502:	54c2      	strb	r2, [r0, r3]
 8002504:	221f      	movs	r2, #31
 8002506:	4011      	ands	r1, r2
 8002508:	3a1b      	subs	r2, #27
 800250a:	408a      	lsls	r2, r1
 800250c:	6803      	ldr	r3, [r0, #0]
 800250e:	6a19      	ldr	r1, [r3, #32]
 8002510:	4391      	bics	r1, r2
 8002512:	6219      	str	r1, [r3, #32]
 8002514:	6a19      	ldr	r1, [r3, #32]
 8002516:	430a      	orrs	r2, r1
 8002518:	621a      	str	r2, [r3, #32]
 800251a:	2280      	movs	r2, #128	; 0x80
 800251c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800251e:	0212      	lsls	r2, r2, #8
 8002520:	430a      	orrs	r2, r1
 8002522:	645a      	str	r2, [r3, #68]	; 0x44
 8002524:	4a15      	ldr	r2, [pc, #84]	; (800257c <HAL_TIMEx_PWMN_Start+0x88>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d016      	beq.n	8002558 <HAL_TIMEx_PWMN_Start+0x64>
 800252a:	2280      	movs	r2, #128	; 0x80
 800252c:	05d2      	lsls	r2, r2, #23
 800252e:	4293      	cmp	r3, r2
 8002530:	d012      	beq.n	8002558 <HAL_TIMEx_PWMN_Start+0x64>
 8002532:	4a13      	ldr	r2, [pc, #76]	; (8002580 <HAL_TIMEx_PWMN_Start+0x8c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d00f      	beq.n	8002558 <HAL_TIMEx_PWMN_Start+0x64>
 8002538:	2101      	movs	r1, #1
 800253a:	2000      	movs	r0, #0
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	4770      	bx	lr
 8002544:	2904      	cmp	r1, #4
 8002546:	d00e      	beq.n	8002566 <HAL_TIMEx_PWMN_Start+0x72>
 8002548:	2908      	cmp	r1, #8
 800254a:	d011      	beq.n	8002570 <HAL_TIMEx_PWMN_Start+0x7c>
 800254c:	2345      	movs	r3, #69	; 0x45
 800254e:	5cc2      	ldrb	r2, [r0, r3]
 8002550:	2a01      	cmp	r2, #1
 8002552:	d0d5      	beq.n	8002500 <HAL_TIMEx_PWMN_Start+0xc>
 8002554:	2001      	movs	r0, #1
 8002556:	e7f4      	b.n	8002542 <HAL_TIMEx_PWMN_Start+0x4e>
 8002558:	2207      	movs	r2, #7
 800255a:	6899      	ldr	r1, [r3, #8]
 800255c:	400a      	ands	r2, r1
 800255e:	2a06      	cmp	r2, #6
 8002560:	d1ea      	bne.n	8002538 <HAL_TIMEx_PWMN_Start+0x44>
 8002562:	2000      	movs	r0, #0
 8002564:	e7ed      	b.n	8002542 <HAL_TIMEx_PWMN_Start+0x4e>
 8002566:	2343      	movs	r3, #67	; 0x43
 8002568:	5cc2      	ldrb	r2, [r0, r3]
 800256a:	2a01      	cmp	r2, #1
 800256c:	d0c8      	beq.n	8002500 <HAL_TIMEx_PWMN_Start+0xc>
 800256e:	e7f1      	b.n	8002554 <HAL_TIMEx_PWMN_Start+0x60>
 8002570:	2344      	movs	r3, #68	; 0x44
 8002572:	5cc2      	ldrb	r2, [r0, r3]
 8002574:	2a01      	cmp	r2, #1
 8002576:	d0c3      	beq.n	8002500 <HAL_TIMEx_PWMN_Start+0xc>
 8002578:	e7ec      	b.n	8002554 <HAL_TIMEx_PWMN_Start+0x60>
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	40012c00 	.word	0x40012c00
 8002580:	40000400 	.word	0x40000400

08002584 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002584:	233c      	movs	r3, #60	; 0x3c
{
 8002586:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002588:	5cc3      	ldrb	r3, [r0, r3]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d021      	beq.n	80025d2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258e:	233d      	movs	r3, #61	; 0x3d
 8002590:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002592:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8002594:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8002596:	6803      	ldr	r3, [r0, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800259a:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800259c:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800259e:	680d      	ldr	r5, [r1, #0]
 80025a0:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a4:	4a0c      	ldr	r2, [pc, #48]	; (80025d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d006      	beq.n	80025b8 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	05d2      	lsls	r2, r2, #23
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d002      	beq.n	80025b8 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d104      	bne.n	80025c2 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b8:	2280      	movs	r2, #128	; 0x80
 80025ba:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025bc:	684a      	ldr	r2, [r1, #4]
 80025be:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025c0:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025c2:	233d      	movs	r3, #61	; 0x3d
 80025c4:	2201      	movs	r2, #1
 80025c6:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80025c8:	2200      	movs	r2, #0
 80025ca:	3b01      	subs	r3, #1
 80025cc:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80025ce:	2000      	movs	r0, #0
}
 80025d0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80025d2:	2002      	movs	r0, #2
 80025d4:	e7fc      	b.n	80025d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	40012c00 	.word	0x40012c00
 80025dc:	40000400 	.word	0x40000400

080025e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80025e0:	223c      	movs	r2, #60	; 0x3c
{
 80025e2:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80025e4:	5c83      	ldrb	r3, [r0, r2]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d01e      	beq.n	8002628 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80025ea:	68cb      	ldr	r3, [r1, #12]
 80025ec:	4c0f      	ldr	r4, [pc, #60]	; (800262c <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 80025ee:	4023      	ands	r3, r4
 80025f0:	688c      	ldr	r4, [r1, #8]
 80025f2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80025f4:	4c0e      	ldr	r4, [pc, #56]	; (8002630 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 80025f6:	4023      	ands	r3, r4
 80025f8:	684c      	ldr	r4, [r1, #4]
 80025fa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80025fc:	4c0d      	ldr	r4, [pc, #52]	; (8002634 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 80025fe:	4023      	ands	r3, r4
 8002600:	680c      	ldr	r4, [r1, #0]
 8002602:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002604:	4c0c      	ldr	r4, [pc, #48]	; (8002638 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8002606:	4023      	ands	r3, r4
 8002608:	690c      	ldr	r4, [r1, #16]
 800260a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800260c:	4c0b      	ldr	r4, [pc, #44]	; (800263c <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 800260e:	4023      	ands	r3, r4
 8002610:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002612:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002614:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002616:	4c0a      	ldr	r4, [pc, #40]	; (8002640 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8002618:	4023      	ands	r3, r4
 800261a:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800261c:	6801      	ldr	r1, [r0, #0]
 800261e:	644b      	str	r3, [r1, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002620:	2300      	movs	r3, #0
 8002622:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8002624:	2000      	movs	r0, #0
}
 8002626:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002628:	2002      	movs	r0, #2
 800262a:	e7fc      	b.n	8002626 <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 800262c:	fffffcff 	.word	0xfffffcff
 8002630:	fffffbff 	.word	0xfffffbff
 8002634:	fffff7ff 	.word	0xfffff7ff
 8002638:	ffffefff 	.word	0xffffefff
 800263c:	ffffdfff 	.word	0xffffdfff
 8002640:	ffffbfff 	.word	0xffffbfff

08002644 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	4657      	mov	r7, sl
 8002648:	464e      	mov	r6, r9
 800264a:	4645      	mov	r5, r8
 800264c:	46de      	mov	lr, fp
 800264e:	b5e0      	push	{r5, r6, r7, lr}
 8002650:	001e      	movs	r6, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002652:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8002654:	0005      	movs	r5, r0
 8002656:	000f      	movs	r7, r1
 8002658:	0014      	movs	r4, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800265a:	2b20      	cmp	r3, #32
 800265c:	d000      	beq.n	8002660 <HAL_UART_Transmit+0x1c>
 800265e:	e0a8      	b.n	80027b2 <HAL_UART_Transmit+0x16e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002660:	2900      	cmp	r1, #0
 8002662:	d04a      	beq.n	80026fa <HAL_UART_Transmit+0xb6>
 8002664:	2a00      	cmp	r2, #0
 8002666:	d048      	beq.n	80026fa <HAL_UART_Transmit+0xb6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	6882      	ldr	r2, [r0, #8]
 800266c:	015b      	lsls	r3, r3, #5
 800266e:	429a      	cmp	r2, r3
 8002670:	d104      	bne.n	800267c <HAL_UART_Transmit+0x38>
 8002672:	6903      	ldr	r3, [r0, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_UART_Transmit+0x38>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002678:	07cb      	lsls	r3, r1, #31
 800267a:	d43e      	bmi.n	80026fa <HAL_UART_Transmit+0xb6>
      {
        return  HAL_ERROR;
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267c:	2200      	movs	r2, #0
 800267e:	2384      	movs	r3, #132	; 0x84
 8002680:	50ea      	str	r2, [r5, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002682:	3b63      	subs	r3, #99	; 0x63
 8002684:	67eb      	str	r3, [r5, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002686:	f7fe fa6b 	bl	8000b60 <HAL_GetTick>

    huart->TxXferSize  = Size;
 800268a:	2350      	movs	r3, #80	; 0x50
 800268c:	52ec      	strh	r4, [r5, r3]
    huart->TxXferCount = Size;
 800268e:	3302      	adds	r3, #2
      pdata16bits = (const uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 8002690:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 8002692:	52ec      	strh	r4, [r5, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	68aa      	ldr	r2, [r5, #8]
    tickstart = HAL_GetTick();
 8002698:	4680      	mov	r8, r0
      pdata16bits = NULL;
 800269a:	468a      	mov	sl, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800269c:	015b      	lsls	r3, r3, #5
 800269e:	429a      	cmp	r2, r3
 80026a0:	d100      	bne.n	80026a4 <HAL_UART_Transmit+0x60>
 80026a2:	e0a3      	b.n	80027ec <HAL_UART_Transmit+0x1a8>
    }

    while (huart->TxXferCount > 0U)
 80026a4:	2352      	movs	r3, #82	; 0x52
 80026a6:	5aeb      	ldrh	r3, [r5, r3]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d100      	bne.n	80026ae <HAL_UART_Transmit+0x6a>
 80026ac:	e0d6      	b.n	800285c <HAL_UART_Transmit+0x218>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80026ae:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026b0:	2480      	movs	r4, #128	; 0x80
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80026b2:	4691      	mov	r9, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026b4:	682b      	ldr	r3, [r5, #0]
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026b6:	2208      	movs	r2, #8
 80026b8:	4693      	mov	fp, r2
 80026ba:	1c72      	adds	r2, r6, #1
 80026bc:	d124      	bne.n	8002708 <HAL_UART_Transmit+0xc4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	4214      	tst	r4, r2
 80026c2:	d0fc      	beq.n	80026be <HAL_UART_Transmit+0x7a>
      if (pdata8bits == NULL)
 80026c4:	2f00      	cmp	r7, #0
 80026c6:	d06b      	beq.n	80027a0 <HAL_UART_Transmit+0x15c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026c8:	783a      	ldrb	r2, [r7, #0]
        pdata8bits++;
 80026ca:	3701      	adds	r7, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026cc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80026ce:	2152      	movs	r1, #82	; 0x52
 80026d0:	5a6a      	ldrh	r2, [r5, r1]
 80026d2:	3a01      	subs	r2, #1
 80026d4:	b292      	uxth	r2, r2
 80026d6:	526a      	strh	r2, [r5, r1]
    while (huart->TxXferCount > 0U)
 80026d8:	5a6a      	ldrh	r2, [r5, r1]
 80026da:	2a00      	cmp	r2, #0
 80026dc:	d1eb      	bne.n	80026b6 <HAL_UART_Transmit+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80026de:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e0:	2440      	movs	r4, #64	; 0x40
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80026e2:	4691      	mov	r9, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026e4:	2708      	movs	r7, #8
 80026e6:	1c72      	adds	r2, r6, #1
 80026e8:	d165      	bne.n	80027b6 <HAL_UART_Transmit+0x172>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ea:	2140      	movs	r1, #64	; 0x40
 80026ec:	69da      	ldr	r2, [r3, #28]
 80026ee:	4211      	tst	r1, r2
 80026f0:	d0fc      	beq.n	80026ec <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_READY;
 80026f2:	2320      	movs	r3, #32
    return HAL_OK;
 80026f4:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 80026f6:	67eb      	str	r3, [r5, #124]	; 0x7c
    return HAL_OK;
 80026f8:	e000      	b.n	80026fc <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 80026fa:	2001      	movs	r0, #1
}
 80026fc:	bcf0      	pop	{r4, r5, r6, r7}
 80026fe:	46bb      	mov	fp, r7
 8002700:	46b2      	mov	sl, r6
 8002702:	46a9      	mov	r9, r5
 8002704:	46a0      	mov	r8, r4
 8002706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	4214      	tst	r4, r2
 800270c:	d1da      	bne.n	80026c4 <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270e:	f7fe fa27 	bl	8000b60 <HAL_GetTick>
 8002712:	4643      	mov	r3, r8
 8002714:	1ac0      	subs	r0, r0, r3
 8002716:	4286      	cmp	r6, r0
 8002718:	d33e      	bcc.n	8002798 <HAL_UART_Transmit+0x154>
 800271a:	2e00      	cmp	r6, #0
 800271c:	d03c      	beq.n	8002798 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800271e:	4649      	mov	r1, r9
 8002720:	682b      	ldr	r3, [r5, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4211      	tst	r1, r2
 8002726:	d0c8      	beq.n	80026ba <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002728:	4659      	mov	r1, fp
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	4211      	tst	r1, r2
 800272e:	d164      	bne.n	80027fa <HAL_UART_Transmit+0x1b6>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002730:	2280      	movs	r2, #128	; 0x80
 8002732:	69d9      	ldr	r1, [r3, #28]
 8002734:	0112      	lsls	r2, r2, #4
 8002736:	4211      	tst	r1, r2
 8002738:	d0bf      	beq.n	80026ba <HAL_UART_Transmit+0x76>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800273a:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800273c:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002740:	2201      	movs	r2, #1
 8002742:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002746:	6829      	ldr	r1, [r5, #0]
 8002748:	4c46      	ldr	r4, [pc, #280]	; (8002864 <HAL_UART_Transmit+0x220>)
 800274a:	680b      	ldr	r3, [r1, #0]
 800274c:	4023      	ands	r3, r4
 800274e:	600b      	str	r3, [r1, #0]
 8002750:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002754:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002758:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275c:	6829      	ldr	r1, [r5, #0]
 800275e:	688b      	ldr	r3, [r1, #8]
 8002760:	4393      	bics	r3, r2
 8002762:	608b      	str	r3, [r1, #8]
 8002764:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002768:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800276a:	2b01      	cmp	r3, #1
 800276c:	d10a      	bne.n	8002784 <HAL_UART_Transmit+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800276e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002772:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002776:	2010      	movs	r0, #16
 8002778:	682a      	ldr	r2, [r5, #0]
 800277a:	6813      	ldr	r3, [r2, #0]
 800277c:	4383      	bics	r3, r0
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002784:	2220      	movs	r2, #32
 8002786:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002788:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800278a:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800278c:	2300      	movs	r3, #0
 800278e:	662b      	str	r3, [r5, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002790:	66ab      	str	r3, [r5, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002792:	506a      	str	r2, [r5, r1]
          __HAL_UNLOCK(huart);
 8002794:	3258      	adds	r2, #88	; 0x58
 8002796:	54ab      	strb	r3, [r5, r2]
      huart->gState = HAL_UART_STATE_READY;
 8002798:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800279a:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 800279c:	67eb      	str	r3, [r5, #124]	; 0x7c
      return HAL_TIMEOUT;
 800279e:	e7ad      	b.n	80026fc <HAL_UART_Transmit+0xb8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027a0:	4652      	mov	r2, sl
 80027a2:	8812      	ldrh	r2, [r2, #0]
 80027a4:	05d2      	lsls	r2, r2, #23
 80027a6:	0dd2      	lsrs	r2, r2, #23
 80027a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027aa:	2202      	movs	r2, #2
 80027ac:	4694      	mov	ip, r2
 80027ae:	44e2      	add	sl, ip
      huart->TxXferCount--;
 80027b0:	e78d      	b.n	80026ce <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 80027b2:	2002      	movs	r0, #2
 80027b4:	e7a2      	b.n	80026fc <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	421c      	tst	r4, r3
 80027ba:	d19a      	bne.n	80026f2 <HAL_UART_Transmit+0xae>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027bc:	f7fe f9d0 	bl	8000b60 <HAL_GetTick>
 80027c0:	4643      	mov	r3, r8
 80027c2:	1ac0      	subs	r0, r0, r3
 80027c4:	4286      	cmp	r6, r0
 80027c6:	d3e7      	bcc.n	8002798 <HAL_UART_Transmit+0x154>
 80027c8:	2e00      	cmp	r6, #0
 80027ca:	d0e5      	beq.n	8002798 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80027cc:	4649      	mov	r1, r9
 80027ce:	682b      	ldr	r3, [r5, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4211      	tst	r1, r2
 80027d4:	d100      	bne.n	80027d8 <HAL_UART_Transmit+0x194>
 80027d6:	e786      	b.n	80026e6 <HAL_UART_Transmit+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	4217      	tst	r7, r2
 80027dc:	d140      	bne.n	8002860 <HAL_UART_Transmit+0x21c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027de:	2280      	movs	r2, #128	; 0x80
 80027e0:	69d9      	ldr	r1, [r3, #28]
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	4211      	tst	r1, r2
 80027e6:	d100      	bne.n	80027ea <HAL_UART_Transmit+0x1a6>
 80027e8:	e77d      	b.n	80026e6 <HAL_UART_Transmit+0xa2>
 80027ea:	e7a6      	b.n	800273a <HAL_UART_Transmit+0xf6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ec:	692b      	ldr	r3, [r5, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d000      	beq.n	80027f4 <HAL_UART_Transmit+0x1b0>
 80027f2:	e757      	b.n	80026a4 <HAL_UART_Transmit+0x60>
 80027f4:	46ba      	mov	sl, r7
      pdata8bits  = NULL;
 80027f6:	2700      	movs	r7, #0
 80027f8:	e754      	b.n	80026a4 <HAL_UART_Transmit+0x60>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027fa:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002800:	2201      	movs	r2, #1
 8002802:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002806:	6829      	ldr	r1, [r5, #0]
 8002808:	4c16      	ldr	r4, [pc, #88]	; (8002864 <HAL_UART_Transmit+0x220>)
 800280a:	680b      	ldr	r3, [r1, #0]
 800280c:	4023      	ands	r3, r4
 800280e:	600b      	str	r3, [r1, #0]
 8002810:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002814:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002818:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800281c:	6829      	ldr	r1, [r5, #0]
 800281e:	688b      	ldr	r3, [r1, #8]
 8002820:	4393      	bics	r3, r2
 8002822:	608b      	str	r3, [r1, #8]
 8002824:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002828:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800282a:	2b01      	cmp	r3, #1
 800282c:	d10a      	bne.n	8002844 <HAL_UART_Transmit+0x200>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800282e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002832:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002836:	2010      	movs	r0, #16
 8002838:	682a      	ldr	r2, [r5, #0]
 800283a:	6813      	ldr	r3, [r2, #0]
 800283c:	4383      	bics	r3, r0
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002848:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800284a:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284c:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800284e:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002850:	662b      	str	r3, [r5, #96]	; 0x60
  huart->RxISR = NULL;
 8002852:	66ab      	str	r3, [r5, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002854:	50a9      	str	r1, [r5, r2]
           __HAL_UNLOCK(huart);
 8002856:	3a0c      	subs	r2, #12
 8002858:	54ab      	strb	r3, [r5, r2]
           return HAL_ERROR;
 800285a:	e79d      	b.n	8002798 <HAL_UART_Transmit+0x154>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800285c:	682b      	ldr	r3, [r5, #0]
 800285e:	e73e      	b.n	80026de <HAL_UART_Transmit+0x9a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002860:	621f      	str	r7, [r3, #32]
 8002862:	e7cb      	b.n	80027fc <HAL_UART_Transmit+0x1b8>
 8002864:	fffffedf 	.word	0xfffffedf

08002868 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002868:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800286a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800286c:	07da      	lsls	r2, r3, #31
 800286e:	d506      	bpl.n	800287e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002870:	6801      	ldr	r1, [r0, #0]
 8002872:	4c28      	ldr	r4, [pc, #160]	; (8002914 <UART_AdvFeatureConfig+0xac>)
 8002874:	684a      	ldr	r2, [r1, #4]
 8002876:	4022      	ands	r2, r4
 8002878:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800287a:	4322      	orrs	r2, r4
 800287c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800287e:	079a      	lsls	r2, r3, #30
 8002880:	d506      	bpl.n	8002890 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002882:	6801      	ldr	r1, [r0, #0]
 8002884:	4c24      	ldr	r4, [pc, #144]	; (8002918 <UART_AdvFeatureConfig+0xb0>)
 8002886:	684a      	ldr	r2, [r1, #4]
 8002888:	4022      	ands	r2, r4
 800288a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800288c:	4322      	orrs	r2, r4
 800288e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002890:	075a      	lsls	r2, r3, #29
 8002892:	d506      	bpl.n	80028a2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002894:	6801      	ldr	r1, [r0, #0]
 8002896:	4c21      	ldr	r4, [pc, #132]	; (800291c <UART_AdvFeatureConfig+0xb4>)
 8002898:	684a      	ldr	r2, [r1, #4]
 800289a:	4022      	ands	r2, r4
 800289c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800289e:	4322      	orrs	r2, r4
 80028a0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028a2:	071a      	lsls	r2, r3, #28
 80028a4:	d506      	bpl.n	80028b4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028a6:	6801      	ldr	r1, [r0, #0]
 80028a8:	4c1d      	ldr	r4, [pc, #116]	; (8002920 <UART_AdvFeatureConfig+0xb8>)
 80028aa:	684a      	ldr	r2, [r1, #4]
 80028ac:	4022      	ands	r2, r4
 80028ae:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80028b0:	4322      	orrs	r2, r4
 80028b2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028b4:	06da      	lsls	r2, r3, #27
 80028b6:	d506      	bpl.n	80028c6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028b8:	6801      	ldr	r1, [r0, #0]
 80028ba:	4c1a      	ldr	r4, [pc, #104]	; (8002924 <UART_AdvFeatureConfig+0xbc>)
 80028bc:	688a      	ldr	r2, [r1, #8]
 80028be:	4022      	ands	r2, r4
 80028c0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80028c2:	4322      	orrs	r2, r4
 80028c4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028c6:	069a      	lsls	r2, r3, #26
 80028c8:	d506      	bpl.n	80028d8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028ca:	6801      	ldr	r1, [r0, #0]
 80028cc:	4c16      	ldr	r4, [pc, #88]	; (8002928 <UART_AdvFeatureConfig+0xc0>)
 80028ce:	688a      	ldr	r2, [r1, #8]
 80028d0:	4022      	ands	r2, r4
 80028d2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80028d4:	4322      	orrs	r2, r4
 80028d6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028d8:	065a      	lsls	r2, r3, #25
 80028da:	d50a      	bpl.n	80028f2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028dc:	6801      	ldr	r1, [r0, #0]
 80028de:	4d13      	ldr	r5, [pc, #76]	; (800292c <UART_AdvFeatureConfig+0xc4>)
 80028e0:	684a      	ldr	r2, [r1, #4]
 80028e2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80028e4:	402a      	ands	r2, r5
 80028e6:	4322      	orrs	r2, r4
 80028e8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	0352      	lsls	r2, r2, #13
 80028ee:	4294      	cmp	r4, r2
 80028f0:	d009      	beq.n	8002906 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028f2:	061b      	lsls	r3, r3, #24
 80028f4:	d506      	bpl.n	8002904 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028f6:	6802      	ldr	r2, [r0, #0]
 80028f8:	490d      	ldr	r1, [pc, #52]	; (8002930 <UART_AdvFeatureConfig+0xc8>)
 80028fa:	6853      	ldr	r3, [r2, #4]
 80028fc:	400b      	ands	r3, r1
 80028fe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002900:	430b      	orrs	r3, r1
 8002902:	6053      	str	r3, [r2, #4]
}
 8002904:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002906:	684a      	ldr	r2, [r1, #4]
 8002908:	4c0a      	ldr	r4, [pc, #40]	; (8002934 <UART_AdvFeatureConfig+0xcc>)
 800290a:	4022      	ands	r2, r4
 800290c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800290e:	4322      	orrs	r2, r4
 8002910:	604a      	str	r2, [r1, #4]
 8002912:	e7ee      	b.n	80028f2 <UART_AdvFeatureConfig+0x8a>
 8002914:	fffdffff 	.word	0xfffdffff
 8002918:	fffeffff 	.word	0xfffeffff
 800291c:	fffbffff 	.word	0xfffbffff
 8002920:	ffff7fff 	.word	0xffff7fff
 8002924:	ffffefff 	.word	0xffffefff
 8002928:	ffffdfff 	.word	0xffffdfff
 800292c:	ffefffff 	.word	0xffefffff
 8002930:	fff7ffff 	.word	0xfff7ffff
 8002934:	ff9fffff 	.word	0xff9fffff

08002938 <UART_CheckIdleState>:
{
 8002938:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293a:	2384      	movs	r3, #132	; 0x84
 800293c:	2200      	movs	r2, #0
{
 800293e:	46c6      	mov	lr, r8
 8002940:	0004      	movs	r4, r0
 8002942:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002944:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002946:	f7fe f90b 	bl	8000b60 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800294a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800294c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	0712      	lsls	r2, r2, #28
 8002952:	d410      	bmi.n	8002976 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	0752      	lsls	r2, r2, #29
 8002958:	d43c      	bmi.n	80029d4 <UART_CheckIdleState+0x9c>
  huart->gState = HAL_UART_STATE_READY;
 800295a:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 800295c:	2280      	movs	r2, #128	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800295e:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002960:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002962:	2300      	movs	r3, #0
  return HAL_OK;
 8002964:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002966:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002968:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 800296a:	2378      	movs	r3, #120	; 0x78
 800296c:	2200      	movs	r2, #0
 800296e:	54e2      	strb	r2, [r4, r3]
}
 8002970:	bc80      	pop	{r7}
 8002972:	46b8      	mov	r8, r7
 8002974:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	0292      	lsls	r2, r2, #10
 800297a:	d4eb      	bmi.n	8002954 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297c:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800297e:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002980:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002982:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002984:	04b6      	lsls	r6, r6, #18
 8002986:	e010      	b.n	80029aa <UART_CheckIdleState+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4217      	tst	r7, r2
 800298e:	d009      	beq.n	80029a4 <UART_CheckIdleState+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002990:	4641      	mov	r1, r8
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	4211      	tst	r1, r2
 8002996:	d158      	bne.n	8002a4a <UART_CheckIdleState+0x112>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002998:	2280      	movs	r2, #128	; 0x80
 800299a:	69d9      	ldr	r1, [r3, #28]
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	4211      	tst	r1, r2
 80029a0:	d000      	beq.n	80029a4 <UART_CheckIdleState+0x6c>
 80029a2:	e083      	b.n	8002aac <UART_CheckIdleState+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	0292      	lsls	r2, r2, #10
 80029a8:	d4d4      	bmi.n	8002954 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029aa:	f7fe f8d9 	bl	8000b60 <HAL_GetTick>
 80029ae:	1b40      	subs	r0, r0, r5
 80029b0:	42b0      	cmp	r0, r6
 80029b2:	d3e9      	bcc.n	8002988 <UART_CheckIdleState+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b8:	2301      	movs	r3, #1
 80029ba:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80029be:	2080      	movs	r0, #128	; 0x80
 80029c0:	6822      	ldr	r2, [r4, #0]
 80029c2:	6813      	ldr	r3, [r2, #0]
 80029c4:	4383      	bics	r3, r0
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80029cc:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80029ce:	387d      	subs	r0, #125	; 0x7d
      huart->gState = HAL_UART_STATE_READY;
 80029d0:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80029d2:	e7ca      	b.n	800296a <UART_CheckIdleState+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	025b      	lsls	r3, r3, #9
 80029d8:	d4bf      	bmi.n	800295a <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029da:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029dc:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029de:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029e0:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e2:	04b6      	lsls	r6, r6, #18
 80029e4:	e011      	b.n	8002a0a <UART_CheckIdleState+0xd2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4217      	tst	r7, r2
 80029ec:	d00a      	beq.n	8002a04 <UART_CheckIdleState+0xcc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029ee:	4641      	mov	r1, r8
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	4211      	tst	r1, r2
 80029f4:	d000      	beq.n	80029f8 <UART_CheckIdleState+0xc0>
 80029f6:	e089      	b.n	8002b0c <UART_CheckIdleState+0x1d4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029f8:	2280      	movs	r2, #128	; 0x80
 80029fa:	69d9      	ldr	r1, [r3, #28]
 80029fc:	0112      	lsls	r2, r2, #4
 80029fe:	4211      	tst	r1, r2
 8002a00:	d000      	beq.n	8002a04 <UART_CheckIdleState+0xcc>
 8002a02:	e0b4      	b.n	8002b6e <UART_CheckIdleState+0x236>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	025b      	lsls	r3, r3, #9
 8002a08:	d4a7      	bmi.n	800295a <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0a:	f7fe f8a9 	bl	8000b60 <HAL_GetTick>
 8002a0e:	1b40      	subs	r0, r0, r5
 8002a10:	42b0      	cmp	r0, r6
 8002a12:	d3e8      	bcc.n	80029e6 <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a14:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a1e:	6821      	ldr	r1, [r4, #0]
 8002a20:	4d6b      	ldr	r5, [pc, #428]	; (8002bd0 <UART_CheckIdleState+0x298>)
 8002a22:	680b      	ldr	r3, [r1, #0]
 8002a24:	402b      	ands	r3, r5
 8002a26:	600b      	str	r3, [r1, #0]
 8002a28:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a2c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a30:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a34:	6821      	ldr	r1, [r4, #0]
 8002a36:	688b      	ldr	r3, [r1, #8]
 8002a38:	4393      	bics	r3, r2
 8002a3a:	608b      	str	r3, [r1, #8]
 8002a3c:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8002a44:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 8002a46:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8002a48:	e78f      	b.n	800296a <UART_CheckIdleState+0x32>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a4a:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a50:	2201      	movs	r2, #1
 8002a52:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a56:	6821      	ldr	r1, [r4, #0]
 8002a58:	4d5d      	ldr	r5, [pc, #372]	; (8002bd0 <UART_CheckIdleState+0x298>)
 8002a5a:	680b      	ldr	r3, [r1, #0]
 8002a5c:	402b      	ands	r3, r5
 8002a5e:	600b      	str	r3, [r1, #0]
 8002a60:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a64:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a68:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6c:	6821      	ldr	r1, [r4, #0]
 8002a6e:	688b      	ldr	r3, [r1, #8]
 8002a70:	4393      	bics	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]
 8002a74:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a78:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d10a      	bne.n	8002a94 <UART_CheckIdleState+0x15c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a7e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a82:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a86:	2010      	movs	r0, #16
 8002a88:	6822      	ldr	r2, [r4, #0]
 8002a8a:	6813      	ldr	r3, [r2, #0]
 8002a8c:	4383      	bics	r3, r0
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a98:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8002a9a:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a9c:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a9e:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa0:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8002aa2:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002aa4:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8002aa6:	3a0c      	subs	r2, #12
 8002aa8:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8002aaa:	e783      	b.n	80029b4 <UART_CheckIdleState+0x7c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ab8:	6821      	ldr	r1, [r4, #0]
 8002aba:	4d45      	ldr	r5, [pc, #276]	; (8002bd0 <UART_CheckIdleState+0x298>)
 8002abc:	680b      	ldr	r3, [r1, #0]
 8002abe:	402b      	ands	r3, r5
 8002ac0:	600b      	str	r3, [r1, #0]
 8002ac2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aca:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ace:	6821      	ldr	r1, [r4, #0]
 8002ad0:	688b      	ldr	r3, [r1, #8]
 8002ad2:	4393      	bics	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
 8002ad6:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ada:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d10a      	bne.n	8002af6 <UART_CheckIdleState+0x1be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae8:	2010      	movs	r0, #16
 8002aea:	6822      	ldr	r2, [r4, #0]
 8002aec:	6813      	ldr	r3, [r2, #0]
 8002aee:	4383      	bics	r3, r0
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002af6:	2220      	movs	r2, #32
 8002af8:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002afa:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002afc:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002afe:	2300      	movs	r3, #0
 8002b00:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8002b02:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b04:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8002b06:	3258      	adds	r2, #88	; 0x58
 8002b08:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8002b0a:	e753      	b.n	80029b4 <UART_CheckIdleState+0x7c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b0c:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b12:	2201      	movs	r2, #1
 8002b14:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b18:	6821      	ldr	r1, [r4, #0]
 8002b1a:	4d2d      	ldr	r5, [pc, #180]	; (8002bd0 <UART_CheckIdleState+0x298>)
 8002b1c:	680b      	ldr	r3, [r1, #0]
 8002b1e:	402b      	ands	r3, r5
 8002b20:	600b      	str	r3, [r1, #0]
 8002b22:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b26:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b2a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2e:	6821      	ldr	r1, [r4, #0]
 8002b30:	688b      	ldr	r3, [r1, #8]
 8002b32:	4393      	bics	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
 8002b36:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b3a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d10a      	bne.n	8002b56 <UART_CheckIdleState+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b40:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b44:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b48:	2010      	movs	r0, #16
 8002b4a:	6822      	ldr	r2, [r4, #0]
 8002b4c:	6813      	ldr	r3, [r2, #0]
 8002b4e:	4383      	bics	r3, r0
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b5a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8002b5c:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5e:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b60:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b62:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8002b64:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b66:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8002b68:	3a0c      	subs	r2, #12
 8002b6a:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8002b6c:	e752      	b.n	8002a14 <UART_CheckIdleState+0xdc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b6e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b70:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b74:	2201      	movs	r2, #1
 8002b76:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b7a:	6821      	ldr	r1, [r4, #0]
 8002b7c:	4d14      	ldr	r5, [pc, #80]	; (8002bd0 <UART_CheckIdleState+0x298>)
 8002b7e:	680b      	ldr	r3, [r1, #0]
 8002b80:	402b      	ands	r3, r5
 8002b82:	600b      	str	r3, [r1, #0]
 8002b84:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b88:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b90:	6821      	ldr	r1, [r4, #0]
 8002b92:	688b      	ldr	r3, [r1, #8]
 8002b94:	4393      	bics	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]
 8002b98:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d10a      	bne.n	8002bb8 <UART_CheckIdleState+0x280>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002baa:	2010      	movs	r0, #16
 8002bac:	6822      	ldr	r2, [r4, #0]
 8002bae:	6813      	ldr	r3, [r2, #0]
 8002bb0:	4383      	bics	r3, r0
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8002bb8:	2220      	movs	r2, #32
 8002bba:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bbc:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002bbe:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8002bc4:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bc6:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8002bc8:	3258      	adds	r2, #88	; 0x58
 8002bca:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8002bcc:	e722      	b.n	8002a14 <UART_CheckIdleState+0xdc>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	fffffedf 	.word	0xfffffedf

08002bd4 <HAL_UART_Init>:
{
 8002bd4:	b570      	push	{r4, r5, r6, lr}
 8002bd6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002bd8:	d100      	bne.n	8002bdc <HAL_UART_Init+0x8>
 8002bda:	e092      	b.n	8002d02 <HAL_UART_Init+0x12e>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002bdc:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d05d      	beq.n	8002c9e <HAL_UART_Init+0xca>
  huart->gState = HAL_UART_STATE_BUSY;
 8002be2:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002be4:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002be6:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002be8:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bea:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	438a      	bics	r2, r1
 8002bf0:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bf2:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bf4:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bf6:	432a      	orrs	r2, r5
 8002bf8:	6965      	ldr	r5, [r4, #20]
 8002bfa:	69e1      	ldr	r1, [r4, #28]
 8002bfc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bfe:	4d4c      	ldr	r5, [pc, #304]	; (8002d30 <HAL_UART_Init+0x15c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c00:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c02:	4028      	ands	r0, r5
 8002c04:	4302      	orrs	r2, r0
 8002c06:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	484a      	ldr	r0, [pc, #296]	; (8002d34 <HAL_UART_Init+0x160>)
  tmpreg |= huart->Init.OneBitSampling;
 8002c0c:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c0e:	4002      	ands	r2, r0
 8002c10:	68e0      	ldr	r0, [r4, #12]
 8002c12:	4302      	orrs	r2, r0
 8002c14:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c16:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c18:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002c1a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c1c:	4d46      	ldr	r5, [pc, #280]	; (8002d38 <HAL_UART_Init+0x164>)
 8002c1e:	4028      	ands	r0, r5
 8002c20:	4302      	orrs	r2, r0
 8002c22:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c24:	4a45      	ldr	r2, [pc, #276]	; (8002d3c <HAL_UART_Init+0x168>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <HAL_UART_Init+0x66>
 8002c2a:	4a45      	ldr	r2, [pc, #276]	; (8002d40 <HAL_UART_Init+0x16c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00b      	beq.n	8002c48 <HAL_UART_Init+0x74>
  huart->RxISR = NULL;
 8002c30:	2300      	movs	r3, #0
    return HAL_ERROR;
 8002c32:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8002c34:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8002c36:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8002c38:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c3a:	4b42      	ldr	r3, [pc, #264]	; (8002d44 <HAL_UART_Init+0x170>)
 8002c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c3e:	2303      	movs	r3, #3
 8002c40:	4013      	ands	r3, r2
 8002c42:	3b01      	subs	r3, #1
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d92f      	bls.n	8002ca8 <HAL_UART_Init+0xd4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	4299      	cmp	r1, r3
 8002c4e:	d03a      	beq.n	8002cc6 <HAL_UART_Init+0xf2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c50:	f7ff f8c6 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002c54:	2800      	cmp	r0, #0
 8002c56:	d00b      	beq.n	8002c70 <HAL_UART_Init+0x9c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c58:	6861      	ldr	r1, [r4, #4]
 8002c5a:	084b      	lsrs	r3, r1, #1
 8002c5c:	1818      	adds	r0, r3, r0
 8002c5e:	f7fd fa65 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c62:	0002      	movs	r2, r0
 8002c64:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <HAL_UART_Init+0x174>)
 8002c66:	3a10      	subs	r2, #16
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d8e1      	bhi.n	8002c30 <HAL_UART_Init+0x5c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8002c74:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d13e      	bne.n	8002cfa <HAL_UART_Init+0x126>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	4933      	ldr	r1, [pc, #204]	; (8002d4c <HAL_UART_Init+0x178>)
 8002c80:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002c82:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c84:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c86:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	3929      	subs	r1, #41	; 0x29
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002c98:	f7ff fe4e 	bl	8002938 <UART_CheckIdleState>
 8002c9c:	e7cc      	b.n	8002c38 <HAL_UART_Init+0x64>
    huart->Lock = HAL_UNLOCKED;
 8002c9e:	2278      	movs	r2, #120	; 0x78
 8002ca0:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8002ca2:	f7fd fea7 	bl	80009f4 <HAL_UART_MspInit>
 8002ca6:	e79c      	b.n	8002be2 <HAL_UART_Init+0xe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca8:	2080      	movs	r0, #128	; 0x80
 8002caa:	4a29      	ldr	r2, [pc, #164]	; (8002d50 <HAL_UART_Init+0x17c>)
 8002cac:	0200      	lsls	r0, r0, #8
 8002cae:	5cd2      	ldrb	r2, [r2, r3]
 8002cb0:	4281      	cmp	r1, r0
 8002cb2:	d02b      	beq.n	8002d0c <HAL_UART_Init+0x138>
    switch (clocksource)
 8002cb4:	2a04      	cmp	r2, #4
 8002cb6:	d026      	beq.n	8002d06 <HAL_UART_Init+0x132>
 8002cb8:	d81c      	bhi.n	8002cf4 <HAL_UART_Init+0x120>
 8002cba:	2a00      	cmp	r2, #0
 8002cbc:	d0c8      	beq.n	8002c50 <HAL_UART_Init+0x7c>
 8002cbe:	2a02      	cmp	r2, #2
 8002cc0:	d1b6      	bne.n	8002c30 <HAL_UART_Init+0x5c>
        pclk = (uint32_t) HSI_VALUE;
 8002cc2:	4824      	ldr	r0, [pc, #144]	; (8002d54 <HAL_UART_Init+0x180>)
 8002cc4:	e7c8      	b.n	8002c58 <HAL_UART_Init+0x84>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cc6:	f7ff f88b 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cca:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	d0cf      	beq.n	8002c70 <HAL_UART_Init+0x9c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cd0:	6861      	ldr	r1, [r4, #4]
 8002cd2:	0848      	lsrs	r0, r1, #1
 8002cd4:	18c0      	adds	r0, r0, r3
 8002cd6:	f7fd fa29 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cda:	0002      	movs	r2, r0
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <HAL_UART_Init+0x174>)
 8002cde:	3a10      	subs	r2, #16
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d8a5      	bhi.n	8002c30 <HAL_UART_Init+0x5c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ce4:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <HAL_UART_Init+0x184>)
        huart->Instance->BRR = brrtemp;
 8002ce6:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ce8:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cea:	0700      	lsls	r0, r0, #28
 8002cec:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002cee:	4303      	orrs	r3, r0
 8002cf0:	60d3      	str	r3, [r2, #12]
  return ret;
 8002cf2:	e7bd      	b.n	8002c70 <HAL_UART_Init+0x9c>
    switch (clocksource)
 8002cf4:	2a08      	cmp	r2, #8
 8002cf6:	d0af      	beq.n	8002c58 <HAL_UART_Init+0x84>
 8002cf8:	e79a      	b.n	8002c30 <HAL_UART_Init+0x5c>
    UART_AdvFeatureConfig(huart);
 8002cfa:	0020      	movs	r0, r4
 8002cfc:	f7ff fdb4 	bl	8002868 <UART_AdvFeatureConfig>
 8002d00:	e7bc      	b.n	8002c7c <HAL_UART_Init+0xa8>
    return HAL_ERROR;
 8002d02:	2001      	movs	r0, #1
 8002d04:	e798      	b.n	8002c38 <HAL_UART_Init+0x64>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d06:	f7ff f827 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
        break;
 8002d0a:	e7a3      	b.n	8002c54 <HAL_UART_Init+0x80>
    switch (clocksource)
 8002d0c:	2a04      	cmp	r2, #4
 8002d0e:	d007      	beq.n	8002d20 <HAL_UART_Init+0x14c>
 8002d10:	d809      	bhi.n	8002d26 <HAL_UART_Init+0x152>
 8002d12:	2a00      	cmp	r2, #0
 8002d14:	d0d7      	beq.n	8002cc6 <HAL_UART_Init+0xf2>
 8002d16:	2a02      	cmp	r2, #2
 8002d18:	d000      	beq.n	8002d1c <HAL_UART_Init+0x148>
 8002d1a:	e789      	b.n	8002c30 <HAL_UART_Init+0x5c>
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_UART_Init+0x188>)
 8002d1e:	e7d7      	b.n	8002cd0 <HAL_UART_Init+0xfc>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d20:	f7ff f81a 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
        break;
 8002d24:	e7d1      	b.n	8002cca <HAL_UART_Init+0xf6>
    switch (clocksource)
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	025b      	lsls	r3, r3, #9
 8002d2a:	2a08      	cmp	r2, #8
 8002d2c:	d0d0      	beq.n	8002cd0 <HAL_UART_Init+0xfc>
 8002d2e:	e77f      	b.n	8002c30 <HAL_UART_Init+0x5c>
 8002d30:	efff69f3 	.word	0xefff69f3
 8002d34:	ffffcfff 	.word	0xffffcfff
 8002d38:	fffff4ff 	.word	0xfffff4ff
 8002d3c:	40013800 	.word	0x40013800
 8002d40:	40004400 	.word	0x40004400
 8002d44:	40021000 	.word	0x40021000
 8002d48:	0000ffef 	.word	0x0000ffef
 8002d4c:	ffffb7ff 	.word	0xffffb7ff
 8002d50:	08003708 	.word	0x08003708
 8002d54:	007a1200 	.word	0x007a1200
 8002d58:	0000fff0 	.word	0x0000fff0
 8002d5c:	00f42400 	.word	0x00f42400

08002d60 <_vsiprintf_r>:
 8002d60:	b500      	push	{lr}
 8002d62:	b09b      	sub	sp, #108	; 0x6c
 8002d64:	9100      	str	r1, [sp, #0]
 8002d66:	9104      	str	r1, [sp, #16]
 8002d68:	4906      	ldr	r1, [pc, #24]	; (8002d84 <_vsiprintf_r+0x24>)
 8002d6a:	9105      	str	r1, [sp, #20]
 8002d6c:	9102      	str	r1, [sp, #8]
 8002d6e:	4906      	ldr	r1, [pc, #24]	; (8002d88 <_vsiprintf_r+0x28>)
 8002d70:	9103      	str	r1, [sp, #12]
 8002d72:	4669      	mov	r1, sp
 8002d74:	f000 f9aa 	bl	80030cc <_svfiprintf_r>
 8002d78:	2200      	movs	r2, #0
 8002d7a:	9b00      	ldr	r3, [sp, #0]
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	b01b      	add	sp, #108	; 0x6c
 8002d80:	bd00      	pop	{pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	7fffffff 	.word	0x7fffffff
 8002d88:	ffff0208 	.word	0xffff0208

08002d8c <vsiprintf>:
 8002d8c:	b510      	push	{r4, lr}
 8002d8e:	4c04      	ldr	r4, [pc, #16]	; (8002da0 <vsiprintf+0x14>)
 8002d90:	0013      	movs	r3, r2
 8002d92:	000a      	movs	r2, r1
 8002d94:	0001      	movs	r1, r0
 8002d96:	6820      	ldr	r0, [r4, #0]
 8002d98:	f7ff ffe2 	bl	8002d60 <_vsiprintf_r>
 8002d9c:	bd10      	pop	{r4, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	20000058 	.word	0x20000058

08002da4 <memset>:
 8002da4:	0003      	movs	r3, r0
 8002da6:	1882      	adds	r2, r0, r2
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d100      	bne.n	8002dae <memset+0xa>
 8002dac:	4770      	bx	lr
 8002dae:	7019      	strb	r1, [r3, #0]
 8002db0:	3301      	adds	r3, #1
 8002db2:	e7f9      	b.n	8002da8 <memset+0x4>

08002db4 <__errno>:
 8002db4:	4b01      	ldr	r3, [pc, #4]	; (8002dbc <__errno+0x8>)
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	4770      	bx	lr
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	20000058 	.word	0x20000058

08002dc0 <__libc_init_array>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	2600      	movs	r6, #0
 8002dc4:	4c0c      	ldr	r4, [pc, #48]	; (8002df8 <__libc_init_array+0x38>)
 8002dc6:	4d0d      	ldr	r5, [pc, #52]	; (8002dfc <__libc_init_array+0x3c>)
 8002dc8:	1b64      	subs	r4, r4, r5
 8002dca:	10a4      	asrs	r4, r4, #2
 8002dcc:	42a6      	cmp	r6, r4
 8002dce:	d109      	bne.n	8002de4 <__libc_init_array+0x24>
 8002dd0:	2600      	movs	r6, #0
 8002dd2:	f000 fc6d 	bl	80036b0 <_init>
 8002dd6:	4c0a      	ldr	r4, [pc, #40]	; (8002e00 <__libc_init_array+0x40>)
 8002dd8:	4d0a      	ldr	r5, [pc, #40]	; (8002e04 <__libc_init_array+0x44>)
 8002dda:	1b64      	subs	r4, r4, r5
 8002ddc:	10a4      	asrs	r4, r4, #2
 8002dde:	42a6      	cmp	r6, r4
 8002de0:	d105      	bne.n	8002dee <__libc_init_array+0x2e>
 8002de2:	bd70      	pop	{r4, r5, r6, pc}
 8002de4:	00b3      	lsls	r3, r6, #2
 8002de6:	58eb      	ldr	r3, [r5, r3]
 8002de8:	4798      	blx	r3
 8002dea:	3601      	adds	r6, #1
 8002dec:	e7ee      	b.n	8002dcc <__libc_init_array+0xc>
 8002dee:	00b3      	lsls	r3, r6, #2
 8002df0:	58eb      	ldr	r3, [r5, r3]
 8002df2:	4798      	blx	r3
 8002df4:	3601      	adds	r6, #1
 8002df6:	e7f2      	b.n	8002dde <__libc_init_array+0x1e>
 8002df8:	08003740 	.word	0x08003740
 8002dfc:	08003740 	.word	0x08003740
 8002e00:	08003744 	.word	0x08003744
 8002e04:	08003740 	.word	0x08003740

08002e08 <__retarget_lock_acquire_recursive>:
 8002e08:	4770      	bx	lr

08002e0a <__retarget_lock_release_recursive>:
 8002e0a:	4770      	bx	lr

08002e0c <_free_r>:
 8002e0c:	b570      	push	{r4, r5, r6, lr}
 8002e0e:	0005      	movs	r5, r0
 8002e10:	2900      	cmp	r1, #0
 8002e12:	d010      	beq.n	8002e36 <_free_r+0x2a>
 8002e14:	1f0c      	subs	r4, r1, #4
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	da00      	bge.n	8002e1e <_free_r+0x12>
 8002e1c:	18e4      	adds	r4, r4, r3
 8002e1e:	0028      	movs	r0, r5
 8002e20:	f000 f8e2 	bl	8002fe8 <__malloc_lock>
 8002e24:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <_free_r+0x90>)
 8002e26:	6813      	ldr	r3, [r2, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <_free_r+0x2c>
 8002e2c:	6063      	str	r3, [r4, #4]
 8002e2e:	6014      	str	r4, [r2, #0]
 8002e30:	0028      	movs	r0, r5
 8002e32:	f000 f8e1 	bl	8002ff8 <__malloc_unlock>
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	42a3      	cmp	r3, r4
 8002e3a:	d908      	bls.n	8002e4e <_free_r+0x42>
 8002e3c:	6820      	ldr	r0, [r4, #0]
 8002e3e:	1821      	adds	r1, r4, r0
 8002e40:	428b      	cmp	r3, r1
 8002e42:	d1f3      	bne.n	8002e2c <_free_r+0x20>
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	1809      	adds	r1, r1, r0
 8002e4a:	6021      	str	r1, [r4, #0]
 8002e4c:	e7ee      	b.n	8002e2c <_free_r+0x20>
 8002e4e:	001a      	movs	r2, r3
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <_free_r+0x4e>
 8002e56:	42a3      	cmp	r3, r4
 8002e58:	d9f9      	bls.n	8002e4e <_free_r+0x42>
 8002e5a:	6811      	ldr	r1, [r2, #0]
 8002e5c:	1850      	adds	r0, r2, r1
 8002e5e:	42a0      	cmp	r0, r4
 8002e60:	d10b      	bne.n	8002e7a <_free_r+0x6e>
 8002e62:	6820      	ldr	r0, [r4, #0]
 8002e64:	1809      	adds	r1, r1, r0
 8002e66:	1850      	adds	r0, r2, r1
 8002e68:	6011      	str	r1, [r2, #0]
 8002e6a:	4283      	cmp	r3, r0
 8002e6c:	d1e0      	bne.n	8002e30 <_free_r+0x24>
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	1841      	adds	r1, r0, r1
 8002e74:	6011      	str	r1, [r2, #0]
 8002e76:	6053      	str	r3, [r2, #4]
 8002e78:	e7da      	b.n	8002e30 <_free_r+0x24>
 8002e7a:	42a0      	cmp	r0, r4
 8002e7c:	d902      	bls.n	8002e84 <_free_r+0x78>
 8002e7e:	230c      	movs	r3, #12
 8002e80:	602b      	str	r3, [r5, #0]
 8002e82:	e7d5      	b.n	8002e30 <_free_r+0x24>
 8002e84:	6820      	ldr	r0, [r4, #0]
 8002e86:	1821      	adds	r1, r4, r0
 8002e88:	428b      	cmp	r3, r1
 8002e8a:	d103      	bne.n	8002e94 <_free_r+0x88>
 8002e8c:	6819      	ldr	r1, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	1809      	adds	r1, r1, r0
 8002e92:	6021      	str	r1, [r4, #0]
 8002e94:	6063      	str	r3, [r4, #4]
 8002e96:	6054      	str	r4, [r2, #4]
 8002e98:	e7ca      	b.n	8002e30 <_free_r+0x24>
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	200003a0 	.word	0x200003a0

08002ea0 <sbrk_aligned>:
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	4e0f      	ldr	r6, [pc, #60]	; (8002ee0 <sbrk_aligned+0x40>)
 8002ea4:	000d      	movs	r5, r1
 8002ea6:	6831      	ldr	r1, [r6, #0]
 8002ea8:	0004      	movs	r4, r0
 8002eaa:	2900      	cmp	r1, #0
 8002eac:	d102      	bne.n	8002eb4 <sbrk_aligned+0x14>
 8002eae:	f000 fba1 	bl	80035f4 <_sbrk_r>
 8002eb2:	6030      	str	r0, [r6, #0]
 8002eb4:	0029      	movs	r1, r5
 8002eb6:	0020      	movs	r0, r4
 8002eb8:	f000 fb9c 	bl	80035f4 <_sbrk_r>
 8002ebc:	1c43      	adds	r3, r0, #1
 8002ebe:	d00a      	beq.n	8002ed6 <sbrk_aligned+0x36>
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	1cc5      	adds	r5, r0, #3
 8002ec4:	439d      	bics	r5, r3
 8002ec6:	42a8      	cmp	r0, r5
 8002ec8:	d007      	beq.n	8002eda <sbrk_aligned+0x3a>
 8002eca:	1a29      	subs	r1, r5, r0
 8002ecc:	0020      	movs	r0, r4
 8002ece:	f000 fb91 	bl	80035f4 <_sbrk_r>
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	d101      	bne.n	8002eda <sbrk_aligned+0x3a>
 8002ed6:	2501      	movs	r5, #1
 8002ed8:	426d      	negs	r5, r5
 8002eda:	0028      	movs	r0, r5
 8002edc:	bd70      	pop	{r4, r5, r6, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	200003a4 	.word	0x200003a4

08002ee4 <_malloc_r>:
 8002ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	1ccb      	adds	r3, r1, #3
 8002eea:	4393      	bics	r3, r2
 8002eec:	3308      	adds	r3, #8
 8002eee:	0006      	movs	r6, r0
 8002ef0:	001f      	movs	r7, r3
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d238      	bcs.n	8002f68 <_malloc_r+0x84>
 8002ef6:	270c      	movs	r7, #12
 8002ef8:	42b9      	cmp	r1, r7
 8002efa:	d837      	bhi.n	8002f6c <_malloc_r+0x88>
 8002efc:	0030      	movs	r0, r6
 8002efe:	f000 f873 	bl	8002fe8 <__malloc_lock>
 8002f02:	4b38      	ldr	r3, [pc, #224]	; (8002fe4 <_malloc_r+0x100>)
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	001c      	movs	r4, r3
 8002f0a:	2c00      	cmp	r4, #0
 8002f0c:	d133      	bne.n	8002f76 <_malloc_r+0x92>
 8002f0e:	0039      	movs	r1, r7
 8002f10:	0030      	movs	r0, r6
 8002f12:	f7ff ffc5 	bl	8002ea0 <sbrk_aligned>
 8002f16:	0004      	movs	r4, r0
 8002f18:	1c43      	adds	r3, r0, #1
 8002f1a:	d15e      	bne.n	8002fda <_malloc_r+0xf6>
 8002f1c:	9b00      	ldr	r3, [sp, #0]
 8002f1e:	681c      	ldr	r4, [r3, #0]
 8002f20:	0025      	movs	r5, r4
 8002f22:	2d00      	cmp	r5, #0
 8002f24:	d14e      	bne.n	8002fc4 <_malloc_r+0xe0>
 8002f26:	2c00      	cmp	r4, #0
 8002f28:	d051      	beq.n	8002fce <_malloc_r+0xea>
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	0029      	movs	r1, r5
 8002f2e:	18e3      	adds	r3, r4, r3
 8002f30:	0030      	movs	r0, r6
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	f000 fb5e 	bl	80035f4 <_sbrk_r>
 8002f38:	9b01      	ldr	r3, [sp, #4]
 8002f3a:	4283      	cmp	r3, r0
 8002f3c:	d147      	bne.n	8002fce <_malloc_r+0xea>
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	0030      	movs	r0, r6
 8002f42:	1aff      	subs	r7, r7, r3
 8002f44:	0039      	movs	r1, r7
 8002f46:	f7ff ffab 	bl	8002ea0 <sbrk_aligned>
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	d03f      	beq.n	8002fce <_malloc_r+0xea>
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	19db      	adds	r3, r3, r7
 8002f52:	6023      	str	r3, [r4, #0]
 8002f54:	9b00      	ldr	r3, [sp, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d040      	beq.n	8002fde <_malloc_r+0xfa>
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	42a2      	cmp	r2, r4
 8002f60:	d133      	bne.n	8002fca <_malloc_r+0xe6>
 8002f62:	2200      	movs	r2, #0
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	e014      	b.n	8002f92 <_malloc_r+0xae>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	dac5      	bge.n	8002ef8 <_malloc_r+0x14>
 8002f6c:	230c      	movs	r3, #12
 8002f6e:	2500      	movs	r5, #0
 8002f70:	6033      	str	r3, [r6, #0]
 8002f72:	0028      	movs	r0, r5
 8002f74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f76:	6821      	ldr	r1, [r4, #0]
 8002f78:	1bc9      	subs	r1, r1, r7
 8002f7a:	d420      	bmi.n	8002fbe <_malloc_r+0xda>
 8002f7c:	290b      	cmp	r1, #11
 8002f7e:	d918      	bls.n	8002fb2 <_malloc_r+0xce>
 8002f80:	19e2      	adds	r2, r4, r7
 8002f82:	6027      	str	r7, [r4, #0]
 8002f84:	42a3      	cmp	r3, r4
 8002f86:	d112      	bne.n	8002fae <_malloc_r+0xca>
 8002f88:	9b00      	ldr	r3, [sp, #0]
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	6863      	ldr	r3, [r4, #4]
 8002f8e:	6011      	str	r1, [r2, #0]
 8002f90:	6053      	str	r3, [r2, #4]
 8002f92:	0030      	movs	r0, r6
 8002f94:	0025      	movs	r5, r4
 8002f96:	f000 f82f 	bl	8002ff8 <__malloc_unlock>
 8002f9a:	2207      	movs	r2, #7
 8002f9c:	350b      	adds	r5, #11
 8002f9e:	1d23      	adds	r3, r4, #4
 8002fa0:	4395      	bics	r5, r2
 8002fa2:	1aea      	subs	r2, r5, r3
 8002fa4:	429d      	cmp	r5, r3
 8002fa6:	d0e4      	beq.n	8002f72 <_malloc_r+0x8e>
 8002fa8:	1b5b      	subs	r3, r3, r5
 8002faa:	50a3      	str	r3, [r4, r2]
 8002fac:	e7e1      	b.n	8002f72 <_malloc_r+0x8e>
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	e7ec      	b.n	8002f8c <_malloc_r+0xa8>
 8002fb2:	6862      	ldr	r2, [r4, #4]
 8002fb4:	42a3      	cmp	r3, r4
 8002fb6:	d1d5      	bne.n	8002f64 <_malloc_r+0x80>
 8002fb8:	9b00      	ldr	r3, [sp, #0]
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e7e9      	b.n	8002f92 <_malloc_r+0xae>
 8002fbe:	0023      	movs	r3, r4
 8002fc0:	6864      	ldr	r4, [r4, #4]
 8002fc2:	e7a2      	b.n	8002f0a <_malloc_r+0x26>
 8002fc4:	002c      	movs	r4, r5
 8002fc6:	686d      	ldr	r5, [r5, #4]
 8002fc8:	e7ab      	b.n	8002f22 <_malloc_r+0x3e>
 8002fca:	0013      	movs	r3, r2
 8002fcc:	e7c4      	b.n	8002f58 <_malloc_r+0x74>
 8002fce:	230c      	movs	r3, #12
 8002fd0:	0030      	movs	r0, r6
 8002fd2:	6033      	str	r3, [r6, #0]
 8002fd4:	f000 f810 	bl	8002ff8 <__malloc_unlock>
 8002fd8:	e7cb      	b.n	8002f72 <_malloc_r+0x8e>
 8002fda:	6027      	str	r7, [r4, #0]
 8002fdc:	e7d9      	b.n	8002f92 <_malloc_r+0xae>
 8002fde:	605b      	str	r3, [r3, #4]
 8002fe0:	deff      	udf	#255	; 0xff
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	200003a0 	.word	0x200003a0

08002fe8 <__malloc_lock>:
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	4802      	ldr	r0, [pc, #8]	; (8002ff4 <__malloc_lock+0xc>)
 8002fec:	f7ff ff0c 	bl	8002e08 <__retarget_lock_acquire_recursive>
 8002ff0:	bd10      	pop	{r4, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	2000039c 	.word	0x2000039c

08002ff8 <__malloc_unlock>:
 8002ff8:	b510      	push	{r4, lr}
 8002ffa:	4802      	ldr	r0, [pc, #8]	; (8003004 <__malloc_unlock+0xc>)
 8002ffc:	f7ff ff05 	bl	8002e0a <__retarget_lock_release_recursive>
 8003000:	bd10      	pop	{r4, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	2000039c 	.word	0x2000039c

08003008 <__ssputs_r>:
 8003008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300a:	b085      	sub	sp, #20
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	9203      	str	r2, [sp, #12]
 8003010:	688e      	ldr	r6, [r1, #8]
 8003012:	9a01      	ldr	r2, [sp, #4]
 8003014:	0007      	movs	r7, r0
 8003016:	000c      	movs	r4, r1
 8003018:	680b      	ldr	r3, [r1, #0]
 800301a:	4296      	cmp	r6, r2
 800301c:	d831      	bhi.n	8003082 <__ssputs_r+0x7a>
 800301e:	898a      	ldrh	r2, [r1, #12]
 8003020:	2190      	movs	r1, #144	; 0x90
 8003022:	00c9      	lsls	r1, r1, #3
 8003024:	420a      	tst	r2, r1
 8003026:	d029      	beq.n	800307c <__ssputs_r+0x74>
 8003028:	2003      	movs	r0, #3
 800302a:	6921      	ldr	r1, [r4, #16]
 800302c:	1a5b      	subs	r3, r3, r1
 800302e:	9302      	str	r3, [sp, #8]
 8003030:	6963      	ldr	r3, [r4, #20]
 8003032:	4343      	muls	r3, r0
 8003034:	0fdd      	lsrs	r5, r3, #31
 8003036:	18ed      	adds	r5, r5, r3
 8003038:	9b01      	ldr	r3, [sp, #4]
 800303a:	9802      	ldr	r0, [sp, #8]
 800303c:	3301      	adds	r3, #1
 800303e:	181b      	adds	r3, r3, r0
 8003040:	106d      	asrs	r5, r5, #1
 8003042:	42ab      	cmp	r3, r5
 8003044:	d900      	bls.n	8003048 <__ssputs_r+0x40>
 8003046:	001d      	movs	r5, r3
 8003048:	0552      	lsls	r2, r2, #21
 800304a:	d529      	bpl.n	80030a0 <__ssputs_r+0x98>
 800304c:	0029      	movs	r1, r5
 800304e:	0038      	movs	r0, r7
 8003050:	f7ff ff48 	bl	8002ee4 <_malloc_r>
 8003054:	1e06      	subs	r6, r0, #0
 8003056:	d02d      	beq.n	80030b4 <__ssputs_r+0xac>
 8003058:	9a02      	ldr	r2, [sp, #8]
 800305a:	6921      	ldr	r1, [r4, #16]
 800305c:	f000 fae7 	bl	800362e <memcpy>
 8003060:	89a2      	ldrh	r2, [r4, #12]
 8003062:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <__ssputs_r+0xc0>)
 8003064:	401a      	ands	r2, r3
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	4313      	orrs	r3, r2
 800306a:	81a3      	strh	r3, [r4, #12]
 800306c:	9b02      	ldr	r3, [sp, #8]
 800306e:	6126      	str	r6, [r4, #16]
 8003070:	18f6      	adds	r6, r6, r3
 8003072:	6026      	str	r6, [r4, #0]
 8003074:	6165      	str	r5, [r4, #20]
 8003076:	9e01      	ldr	r6, [sp, #4]
 8003078:	1aed      	subs	r5, r5, r3
 800307a:	60a5      	str	r5, [r4, #8]
 800307c:	9b01      	ldr	r3, [sp, #4]
 800307e:	429e      	cmp	r6, r3
 8003080:	d900      	bls.n	8003084 <__ssputs_r+0x7c>
 8003082:	9e01      	ldr	r6, [sp, #4]
 8003084:	0032      	movs	r2, r6
 8003086:	9903      	ldr	r1, [sp, #12]
 8003088:	6820      	ldr	r0, [r4, #0]
 800308a:	f000 fa9f 	bl	80035cc <memmove>
 800308e:	2000      	movs	r0, #0
 8003090:	68a3      	ldr	r3, [r4, #8]
 8003092:	1b9b      	subs	r3, r3, r6
 8003094:	60a3      	str	r3, [r4, #8]
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	199b      	adds	r3, r3, r6
 800309a:	6023      	str	r3, [r4, #0]
 800309c:	b005      	add	sp, #20
 800309e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a0:	002a      	movs	r2, r5
 80030a2:	0038      	movs	r0, r7
 80030a4:	f000 facc 	bl	8003640 <_realloc_r>
 80030a8:	1e06      	subs	r6, r0, #0
 80030aa:	d1df      	bne.n	800306c <__ssputs_r+0x64>
 80030ac:	0038      	movs	r0, r7
 80030ae:	6921      	ldr	r1, [r4, #16]
 80030b0:	f7ff feac 	bl	8002e0c <_free_r>
 80030b4:	230c      	movs	r3, #12
 80030b6:	2001      	movs	r0, #1
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	89a2      	ldrh	r2, [r4, #12]
 80030bc:	3334      	adds	r3, #52	; 0x34
 80030be:	4313      	orrs	r3, r2
 80030c0:	81a3      	strh	r3, [r4, #12]
 80030c2:	4240      	negs	r0, r0
 80030c4:	e7ea      	b.n	800309c <__ssputs_r+0x94>
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	fffffb7f 	.word	0xfffffb7f

080030cc <_svfiprintf_r>:
 80030cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ce:	b0a1      	sub	sp, #132	; 0x84
 80030d0:	9003      	str	r0, [sp, #12]
 80030d2:	001d      	movs	r5, r3
 80030d4:	898b      	ldrh	r3, [r1, #12]
 80030d6:	000f      	movs	r7, r1
 80030d8:	0016      	movs	r6, r2
 80030da:	061b      	lsls	r3, r3, #24
 80030dc:	d511      	bpl.n	8003102 <_svfiprintf_r+0x36>
 80030de:	690b      	ldr	r3, [r1, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10e      	bne.n	8003102 <_svfiprintf_r+0x36>
 80030e4:	2140      	movs	r1, #64	; 0x40
 80030e6:	f7ff fefd 	bl	8002ee4 <_malloc_r>
 80030ea:	6038      	str	r0, [r7, #0]
 80030ec:	6138      	str	r0, [r7, #16]
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d105      	bne.n	80030fe <_svfiprintf_r+0x32>
 80030f2:	230c      	movs	r3, #12
 80030f4:	9a03      	ldr	r2, [sp, #12]
 80030f6:	3801      	subs	r0, #1
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	b021      	add	sp, #132	; 0x84
 80030fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030fe:	2340      	movs	r3, #64	; 0x40
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	2300      	movs	r3, #0
 8003104:	ac08      	add	r4, sp, #32
 8003106:	6163      	str	r3, [r4, #20]
 8003108:	3320      	adds	r3, #32
 800310a:	7663      	strb	r3, [r4, #25]
 800310c:	3310      	adds	r3, #16
 800310e:	76a3      	strb	r3, [r4, #26]
 8003110:	9507      	str	r5, [sp, #28]
 8003112:	0035      	movs	r5, r6
 8003114:	782b      	ldrb	r3, [r5, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <_svfiprintf_r+0x52>
 800311a:	2b25      	cmp	r3, #37	; 0x25
 800311c:	d148      	bne.n	80031b0 <_svfiprintf_r+0xe4>
 800311e:	1bab      	subs	r3, r5, r6
 8003120:	9305      	str	r3, [sp, #20]
 8003122:	42b5      	cmp	r5, r6
 8003124:	d00b      	beq.n	800313e <_svfiprintf_r+0x72>
 8003126:	0032      	movs	r2, r6
 8003128:	0039      	movs	r1, r7
 800312a:	9803      	ldr	r0, [sp, #12]
 800312c:	f7ff ff6c 	bl	8003008 <__ssputs_r>
 8003130:	3001      	adds	r0, #1
 8003132:	d100      	bne.n	8003136 <_svfiprintf_r+0x6a>
 8003134:	e0af      	b.n	8003296 <_svfiprintf_r+0x1ca>
 8003136:	6963      	ldr	r3, [r4, #20]
 8003138:	9a05      	ldr	r2, [sp, #20]
 800313a:	189b      	adds	r3, r3, r2
 800313c:	6163      	str	r3, [r4, #20]
 800313e:	782b      	ldrb	r3, [r5, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d100      	bne.n	8003146 <_svfiprintf_r+0x7a>
 8003144:	e0a7      	b.n	8003296 <_svfiprintf_r+0x1ca>
 8003146:	2201      	movs	r2, #1
 8003148:	2300      	movs	r3, #0
 800314a:	4252      	negs	r2, r2
 800314c:	6062      	str	r2, [r4, #4]
 800314e:	a904      	add	r1, sp, #16
 8003150:	3254      	adds	r2, #84	; 0x54
 8003152:	1852      	adds	r2, r2, r1
 8003154:	1c6e      	adds	r6, r5, #1
 8003156:	6023      	str	r3, [r4, #0]
 8003158:	60e3      	str	r3, [r4, #12]
 800315a:	60a3      	str	r3, [r4, #8]
 800315c:	7013      	strb	r3, [r2, #0]
 800315e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003160:	4b55      	ldr	r3, [pc, #340]	; (80032b8 <_svfiprintf_r+0x1ec>)
 8003162:	2205      	movs	r2, #5
 8003164:	0018      	movs	r0, r3
 8003166:	7831      	ldrb	r1, [r6, #0]
 8003168:	9305      	str	r3, [sp, #20]
 800316a:	f000 fa55 	bl	8003618 <memchr>
 800316e:	1c75      	adds	r5, r6, #1
 8003170:	2800      	cmp	r0, #0
 8003172:	d11f      	bne.n	80031b4 <_svfiprintf_r+0xe8>
 8003174:	6822      	ldr	r2, [r4, #0]
 8003176:	06d3      	lsls	r3, r2, #27
 8003178:	d504      	bpl.n	8003184 <_svfiprintf_r+0xb8>
 800317a:	2353      	movs	r3, #83	; 0x53
 800317c:	a904      	add	r1, sp, #16
 800317e:	185b      	adds	r3, r3, r1
 8003180:	2120      	movs	r1, #32
 8003182:	7019      	strb	r1, [r3, #0]
 8003184:	0713      	lsls	r3, r2, #28
 8003186:	d504      	bpl.n	8003192 <_svfiprintf_r+0xc6>
 8003188:	2353      	movs	r3, #83	; 0x53
 800318a:	a904      	add	r1, sp, #16
 800318c:	185b      	adds	r3, r3, r1
 800318e:	212b      	movs	r1, #43	; 0x2b
 8003190:	7019      	strb	r1, [r3, #0]
 8003192:	7833      	ldrb	r3, [r6, #0]
 8003194:	2b2a      	cmp	r3, #42	; 0x2a
 8003196:	d016      	beq.n	80031c6 <_svfiprintf_r+0xfa>
 8003198:	0035      	movs	r5, r6
 800319a:	2100      	movs	r1, #0
 800319c:	200a      	movs	r0, #10
 800319e:	68e3      	ldr	r3, [r4, #12]
 80031a0:	782a      	ldrb	r2, [r5, #0]
 80031a2:	1c6e      	adds	r6, r5, #1
 80031a4:	3a30      	subs	r2, #48	; 0x30
 80031a6:	2a09      	cmp	r2, #9
 80031a8:	d94e      	bls.n	8003248 <_svfiprintf_r+0x17c>
 80031aa:	2900      	cmp	r1, #0
 80031ac:	d111      	bne.n	80031d2 <_svfiprintf_r+0x106>
 80031ae:	e017      	b.n	80031e0 <_svfiprintf_r+0x114>
 80031b0:	3501      	adds	r5, #1
 80031b2:	e7af      	b.n	8003114 <_svfiprintf_r+0x48>
 80031b4:	9b05      	ldr	r3, [sp, #20]
 80031b6:	6822      	ldr	r2, [r4, #0]
 80031b8:	1ac0      	subs	r0, r0, r3
 80031ba:	2301      	movs	r3, #1
 80031bc:	4083      	lsls	r3, r0
 80031be:	4313      	orrs	r3, r2
 80031c0:	002e      	movs	r6, r5
 80031c2:	6023      	str	r3, [r4, #0]
 80031c4:	e7cc      	b.n	8003160 <_svfiprintf_r+0x94>
 80031c6:	9b07      	ldr	r3, [sp, #28]
 80031c8:	1d19      	adds	r1, r3, #4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	9107      	str	r1, [sp, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	db01      	blt.n	80031d6 <_svfiprintf_r+0x10a>
 80031d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80031d4:	e004      	b.n	80031e0 <_svfiprintf_r+0x114>
 80031d6:	425b      	negs	r3, r3
 80031d8:	60e3      	str	r3, [r4, #12]
 80031da:	2302      	movs	r3, #2
 80031dc:	4313      	orrs	r3, r2
 80031de:	6023      	str	r3, [r4, #0]
 80031e0:	782b      	ldrb	r3, [r5, #0]
 80031e2:	2b2e      	cmp	r3, #46	; 0x2e
 80031e4:	d10a      	bne.n	80031fc <_svfiprintf_r+0x130>
 80031e6:	786b      	ldrb	r3, [r5, #1]
 80031e8:	2b2a      	cmp	r3, #42	; 0x2a
 80031ea:	d135      	bne.n	8003258 <_svfiprintf_r+0x18c>
 80031ec:	9b07      	ldr	r3, [sp, #28]
 80031ee:	3502      	adds	r5, #2
 80031f0:	1d1a      	adds	r2, r3, #4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	9207      	str	r2, [sp, #28]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	db2b      	blt.n	8003252 <_svfiprintf_r+0x186>
 80031fa:	9309      	str	r3, [sp, #36]	; 0x24
 80031fc:	4e2f      	ldr	r6, [pc, #188]	; (80032bc <_svfiprintf_r+0x1f0>)
 80031fe:	2203      	movs	r2, #3
 8003200:	0030      	movs	r0, r6
 8003202:	7829      	ldrb	r1, [r5, #0]
 8003204:	f000 fa08 	bl	8003618 <memchr>
 8003208:	2800      	cmp	r0, #0
 800320a:	d006      	beq.n	800321a <_svfiprintf_r+0x14e>
 800320c:	2340      	movs	r3, #64	; 0x40
 800320e:	1b80      	subs	r0, r0, r6
 8003210:	4083      	lsls	r3, r0
 8003212:	6822      	ldr	r2, [r4, #0]
 8003214:	3501      	adds	r5, #1
 8003216:	4313      	orrs	r3, r2
 8003218:	6023      	str	r3, [r4, #0]
 800321a:	7829      	ldrb	r1, [r5, #0]
 800321c:	2206      	movs	r2, #6
 800321e:	4828      	ldr	r0, [pc, #160]	; (80032c0 <_svfiprintf_r+0x1f4>)
 8003220:	1c6e      	adds	r6, r5, #1
 8003222:	7621      	strb	r1, [r4, #24]
 8003224:	f000 f9f8 	bl	8003618 <memchr>
 8003228:	2800      	cmp	r0, #0
 800322a:	d03c      	beq.n	80032a6 <_svfiprintf_r+0x1da>
 800322c:	4b25      	ldr	r3, [pc, #148]	; (80032c4 <_svfiprintf_r+0x1f8>)
 800322e:	2b00      	cmp	r3, #0
 8003230:	d125      	bne.n	800327e <_svfiprintf_r+0x1b2>
 8003232:	2207      	movs	r2, #7
 8003234:	9b07      	ldr	r3, [sp, #28]
 8003236:	3307      	adds	r3, #7
 8003238:	4393      	bics	r3, r2
 800323a:	3308      	adds	r3, #8
 800323c:	9307      	str	r3, [sp, #28]
 800323e:	6963      	ldr	r3, [r4, #20]
 8003240:	9a04      	ldr	r2, [sp, #16]
 8003242:	189b      	adds	r3, r3, r2
 8003244:	6163      	str	r3, [r4, #20]
 8003246:	e764      	b.n	8003112 <_svfiprintf_r+0x46>
 8003248:	4343      	muls	r3, r0
 800324a:	0035      	movs	r5, r6
 800324c:	2101      	movs	r1, #1
 800324e:	189b      	adds	r3, r3, r2
 8003250:	e7a6      	b.n	80031a0 <_svfiprintf_r+0xd4>
 8003252:	2301      	movs	r3, #1
 8003254:	425b      	negs	r3, r3
 8003256:	e7d0      	b.n	80031fa <_svfiprintf_r+0x12e>
 8003258:	2300      	movs	r3, #0
 800325a:	200a      	movs	r0, #10
 800325c:	001a      	movs	r2, r3
 800325e:	3501      	adds	r5, #1
 8003260:	6063      	str	r3, [r4, #4]
 8003262:	7829      	ldrb	r1, [r5, #0]
 8003264:	1c6e      	adds	r6, r5, #1
 8003266:	3930      	subs	r1, #48	; 0x30
 8003268:	2909      	cmp	r1, #9
 800326a:	d903      	bls.n	8003274 <_svfiprintf_r+0x1a8>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0c5      	beq.n	80031fc <_svfiprintf_r+0x130>
 8003270:	9209      	str	r2, [sp, #36]	; 0x24
 8003272:	e7c3      	b.n	80031fc <_svfiprintf_r+0x130>
 8003274:	4342      	muls	r2, r0
 8003276:	0035      	movs	r5, r6
 8003278:	2301      	movs	r3, #1
 800327a:	1852      	adds	r2, r2, r1
 800327c:	e7f1      	b.n	8003262 <_svfiprintf_r+0x196>
 800327e:	aa07      	add	r2, sp, #28
 8003280:	9200      	str	r2, [sp, #0]
 8003282:	0021      	movs	r1, r4
 8003284:	003a      	movs	r2, r7
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <_svfiprintf_r+0x1fc>)
 8003288:	9803      	ldr	r0, [sp, #12]
 800328a:	e000      	b.n	800328e <_svfiprintf_r+0x1c2>
 800328c:	bf00      	nop
 800328e:	9004      	str	r0, [sp, #16]
 8003290:	9b04      	ldr	r3, [sp, #16]
 8003292:	3301      	adds	r3, #1
 8003294:	d1d3      	bne.n	800323e <_svfiprintf_r+0x172>
 8003296:	89bb      	ldrh	r3, [r7, #12]
 8003298:	980d      	ldr	r0, [sp, #52]	; 0x34
 800329a:	065b      	lsls	r3, r3, #25
 800329c:	d400      	bmi.n	80032a0 <_svfiprintf_r+0x1d4>
 800329e:	e72c      	b.n	80030fa <_svfiprintf_r+0x2e>
 80032a0:	2001      	movs	r0, #1
 80032a2:	4240      	negs	r0, r0
 80032a4:	e729      	b.n	80030fa <_svfiprintf_r+0x2e>
 80032a6:	aa07      	add	r2, sp, #28
 80032a8:	9200      	str	r2, [sp, #0]
 80032aa:	0021      	movs	r1, r4
 80032ac:	003a      	movs	r2, r7
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <_svfiprintf_r+0x1fc>)
 80032b0:	9803      	ldr	r0, [sp, #12]
 80032b2:	f000 f87b 	bl	80033ac <_printf_i>
 80032b6:	e7ea      	b.n	800328e <_svfiprintf_r+0x1c2>
 80032b8:	0800370b 	.word	0x0800370b
 80032bc:	08003711 	.word	0x08003711
 80032c0:	08003715 	.word	0x08003715
 80032c4:	00000000 	.word	0x00000000
 80032c8:	08003009 	.word	0x08003009

080032cc <_printf_common>:
 80032cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032ce:	0016      	movs	r6, r2
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	688a      	ldr	r2, [r1, #8]
 80032d4:	690b      	ldr	r3, [r1, #16]
 80032d6:	000c      	movs	r4, r1
 80032d8:	9000      	str	r0, [sp, #0]
 80032da:	4293      	cmp	r3, r2
 80032dc:	da00      	bge.n	80032e0 <_printf_common+0x14>
 80032de:	0013      	movs	r3, r2
 80032e0:	0022      	movs	r2, r4
 80032e2:	6033      	str	r3, [r6, #0]
 80032e4:	3243      	adds	r2, #67	; 0x43
 80032e6:	7812      	ldrb	r2, [r2, #0]
 80032e8:	2a00      	cmp	r2, #0
 80032ea:	d001      	beq.n	80032f0 <_printf_common+0x24>
 80032ec:	3301      	adds	r3, #1
 80032ee:	6033      	str	r3, [r6, #0]
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	069b      	lsls	r3, r3, #26
 80032f4:	d502      	bpl.n	80032fc <_printf_common+0x30>
 80032f6:	6833      	ldr	r3, [r6, #0]
 80032f8:	3302      	adds	r3, #2
 80032fa:	6033      	str	r3, [r6, #0]
 80032fc:	6822      	ldr	r2, [r4, #0]
 80032fe:	2306      	movs	r3, #6
 8003300:	0015      	movs	r5, r2
 8003302:	401d      	ands	r5, r3
 8003304:	421a      	tst	r2, r3
 8003306:	d027      	beq.n	8003358 <_printf_common+0x8c>
 8003308:	0023      	movs	r3, r4
 800330a:	3343      	adds	r3, #67	; 0x43
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	1e5a      	subs	r2, r3, #1
 8003310:	4193      	sbcs	r3, r2
 8003312:	6822      	ldr	r2, [r4, #0]
 8003314:	0692      	lsls	r2, r2, #26
 8003316:	d430      	bmi.n	800337a <_printf_common+0xae>
 8003318:	0022      	movs	r2, r4
 800331a:	9901      	ldr	r1, [sp, #4]
 800331c:	9800      	ldr	r0, [sp, #0]
 800331e:	9d08      	ldr	r5, [sp, #32]
 8003320:	3243      	adds	r2, #67	; 0x43
 8003322:	47a8      	blx	r5
 8003324:	3001      	adds	r0, #1
 8003326:	d025      	beq.n	8003374 <_printf_common+0xa8>
 8003328:	2206      	movs	r2, #6
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	2500      	movs	r5, #0
 800332e:	4013      	ands	r3, r2
 8003330:	2b04      	cmp	r3, #4
 8003332:	d105      	bne.n	8003340 <_printf_common+0x74>
 8003334:	6833      	ldr	r3, [r6, #0]
 8003336:	68e5      	ldr	r5, [r4, #12]
 8003338:	1aed      	subs	r5, r5, r3
 800333a:	43eb      	mvns	r3, r5
 800333c:	17db      	asrs	r3, r3, #31
 800333e:	401d      	ands	r5, r3
 8003340:	68a3      	ldr	r3, [r4, #8]
 8003342:	6922      	ldr	r2, [r4, #16]
 8003344:	4293      	cmp	r3, r2
 8003346:	dd01      	ble.n	800334c <_printf_common+0x80>
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	18ed      	adds	r5, r5, r3
 800334c:	2600      	movs	r6, #0
 800334e:	42b5      	cmp	r5, r6
 8003350:	d120      	bne.n	8003394 <_printf_common+0xc8>
 8003352:	2000      	movs	r0, #0
 8003354:	e010      	b.n	8003378 <_printf_common+0xac>
 8003356:	3501      	adds	r5, #1
 8003358:	68e3      	ldr	r3, [r4, #12]
 800335a:	6832      	ldr	r2, [r6, #0]
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	42ab      	cmp	r3, r5
 8003360:	ddd2      	ble.n	8003308 <_printf_common+0x3c>
 8003362:	0022      	movs	r2, r4
 8003364:	2301      	movs	r3, #1
 8003366:	9901      	ldr	r1, [sp, #4]
 8003368:	9800      	ldr	r0, [sp, #0]
 800336a:	9f08      	ldr	r7, [sp, #32]
 800336c:	3219      	adds	r2, #25
 800336e:	47b8      	blx	r7
 8003370:	3001      	adds	r0, #1
 8003372:	d1f0      	bne.n	8003356 <_printf_common+0x8a>
 8003374:	2001      	movs	r0, #1
 8003376:	4240      	negs	r0, r0
 8003378:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800337a:	2030      	movs	r0, #48	; 0x30
 800337c:	18e1      	adds	r1, r4, r3
 800337e:	3143      	adds	r1, #67	; 0x43
 8003380:	7008      	strb	r0, [r1, #0]
 8003382:	0021      	movs	r1, r4
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	3145      	adds	r1, #69	; 0x45
 8003388:	7809      	ldrb	r1, [r1, #0]
 800338a:	18a2      	adds	r2, r4, r2
 800338c:	3243      	adds	r2, #67	; 0x43
 800338e:	3302      	adds	r3, #2
 8003390:	7011      	strb	r1, [r2, #0]
 8003392:	e7c1      	b.n	8003318 <_printf_common+0x4c>
 8003394:	0022      	movs	r2, r4
 8003396:	2301      	movs	r3, #1
 8003398:	9901      	ldr	r1, [sp, #4]
 800339a:	9800      	ldr	r0, [sp, #0]
 800339c:	9f08      	ldr	r7, [sp, #32]
 800339e:	321a      	adds	r2, #26
 80033a0:	47b8      	blx	r7
 80033a2:	3001      	adds	r0, #1
 80033a4:	d0e6      	beq.n	8003374 <_printf_common+0xa8>
 80033a6:	3601      	adds	r6, #1
 80033a8:	e7d1      	b.n	800334e <_printf_common+0x82>
	...

080033ac <_printf_i>:
 80033ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ae:	b08b      	sub	sp, #44	; 0x2c
 80033b0:	9206      	str	r2, [sp, #24]
 80033b2:	000a      	movs	r2, r1
 80033b4:	3243      	adds	r2, #67	; 0x43
 80033b6:	9307      	str	r3, [sp, #28]
 80033b8:	9005      	str	r0, [sp, #20]
 80033ba:	9204      	str	r2, [sp, #16]
 80033bc:	7e0a      	ldrb	r2, [r1, #24]
 80033be:	000c      	movs	r4, r1
 80033c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80033c2:	2a78      	cmp	r2, #120	; 0x78
 80033c4:	d809      	bhi.n	80033da <_printf_i+0x2e>
 80033c6:	2a62      	cmp	r2, #98	; 0x62
 80033c8:	d80b      	bhi.n	80033e2 <_printf_i+0x36>
 80033ca:	2a00      	cmp	r2, #0
 80033cc:	d100      	bne.n	80033d0 <_printf_i+0x24>
 80033ce:	e0be      	b.n	800354e <_printf_i+0x1a2>
 80033d0:	497c      	ldr	r1, [pc, #496]	; (80035c4 <_printf_i+0x218>)
 80033d2:	9103      	str	r1, [sp, #12]
 80033d4:	2a58      	cmp	r2, #88	; 0x58
 80033d6:	d100      	bne.n	80033da <_printf_i+0x2e>
 80033d8:	e093      	b.n	8003502 <_printf_i+0x156>
 80033da:	0026      	movs	r6, r4
 80033dc:	3642      	adds	r6, #66	; 0x42
 80033de:	7032      	strb	r2, [r6, #0]
 80033e0:	e022      	b.n	8003428 <_printf_i+0x7c>
 80033e2:	0010      	movs	r0, r2
 80033e4:	3863      	subs	r0, #99	; 0x63
 80033e6:	2815      	cmp	r0, #21
 80033e8:	d8f7      	bhi.n	80033da <_printf_i+0x2e>
 80033ea:	f7fc fe95 	bl	8000118 <__gnu_thumb1_case_shi>
 80033ee:	0016      	.short	0x0016
 80033f0:	fff6001f 	.word	0xfff6001f
 80033f4:	fff6fff6 	.word	0xfff6fff6
 80033f8:	001ffff6 	.word	0x001ffff6
 80033fc:	fff6fff6 	.word	0xfff6fff6
 8003400:	fff6fff6 	.word	0xfff6fff6
 8003404:	003600a3 	.word	0x003600a3
 8003408:	fff60083 	.word	0xfff60083
 800340c:	00b4fff6 	.word	0x00b4fff6
 8003410:	0036fff6 	.word	0x0036fff6
 8003414:	fff6fff6 	.word	0xfff6fff6
 8003418:	0087      	.short	0x0087
 800341a:	0026      	movs	r6, r4
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	3642      	adds	r6, #66	; 0x42
 8003420:	1d11      	adds	r1, r2, #4
 8003422:	6019      	str	r1, [r3, #0]
 8003424:	6813      	ldr	r3, [r2, #0]
 8003426:	7033      	strb	r3, [r6, #0]
 8003428:	2301      	movs	r3, #1
 800342a:	e0a2      	b.n	8003572 <_printf_i+0x1c6>
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	6809      	ldr	r1, [r1, #0]
 8003430:	1d02      	adds	r2, r0, #4
 8003432:	060d      	lsls	r5, r1, #24
 8003434:	d50b      	bpl.n	800344e <_printf_i+0xa2>
 8003436:	6805      	ldr	r5, [r0, #0]
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	2d00      	cmp	r5, #0
 800343c:	da03      	bge.n	8003446 <_printf_i+0x9a>
 800343e:	232d      	movs	r3, #45	; 0x2d
 8003440:	9a04      	ldr	r2, [sp, #16]
 8003442:	426d      	negs	r5, r5
 8003444:	7013      	strb	r3, [r2, #0]
 8003446:	4b5f      	ldr	r3, [pc, #380]	; (80035c4 <_printf_i+0x218>)
 8003448:	270a      	movs	r7, #10
 800344a:	9303      	str	r3, [sp, #12]
 800344c:	e01b      	b.n	8003486 <_printf_i+0xda>
 800344e:	6805      	ldr	r5, [r0, #0]
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	0649      	lsls	r1, r1, #25
 8003454:	d5f1      	bpl.n	800343a <_printf_i+0x8e>
 8003456:	b22d      	sxth	r5, r5
 8003458:	e7ef      	b.n	800343a <_printf_i+0x8e>
 800345a:	680d      	ldr	r5, [r1, #0]
 800345c:	6819      	ldr	r1, [r3, #0]
 800345e:	1d08      	adds	r0, r1, #4
 8003460:	6018      	str	r0, [r3, #0]
 8003462:	062e      	lsls	r6, r5, #24
 8003464:	d501      	bpl.n	800346a <_printf_i+0xbe>
 8003466:	680d      	ldr	r5, [r1, #0]
 8003468:	e003      	b.n	8003472 <_printf_i+0xc6>
 800346a:	066d      	lsls	r5, r5, #25
 800346c:	d5fb      	bpl.n	8003466 <_printf_i+0xba>
 800346e:	680d      	ldr	r5, [r1, #0]
 8003470:	b2ad      	uxth	r5, r5
 8003472:	4b54      	ldr	r3, [pc, #336]	; (80035c4 <_printf_i+0x218>)
 8003474:	2708      	movs	r7, #8
 8003476:	9303      	str	r3, [sp, #12]
 8003478:	2a6f      	cmp	r2, #111	; 0x6f
 800347a:	d000      	beq.n	800347e <_printf_i+0xd2>
 800347c:	3702      	adds	r7, #2
 800347e:	0023      	movs	r3, r4
 8003480:	2200      	movs	r2, #0
 8003482:	3343      	adds	r3, #67	; 0x43
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	6863      	ldr	r3, [r4, #4]
 8003488:	60a3      	str	r3, [r4, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	db03      	blt.n	8003496 <_printf_i+0xea>
 800348e:	2104      	movs	r1, #4
 8003490:	6822      	ldr	r2, [r4, #0]
 8003492:	438a      	bics	r2, r1
 8003494:	6022      	str	r2, [r4, #0]
 8003496:	2d00      	cmp	r5, #0
 8003498:	d102      	bne.n	80034a0 <_printf_i+0xf4>
 800349a:	9e04      	ldr	r6, [sp, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00c      	beq.n	80034ba <_printf_i+0x10e>
 80034a0:	9e04      	ldr	r6, [sp, #16]
 80034a2:	0028      	movs	r0, r5
 80034a4:	0039      	movs	r1, r7
 80034a6:	f7fc fec7 	bl	8000238 <__aeabi_uidivmod>
 80034aa:	9b03      	ldr	r3, [sp, #12]
 80034ac:	3e01      	subs	r6, #1
 80034ae:	5c5b      	ldrb	r3, [r3, r1]
 80034b0:	7033      	strb	r3, [r6, #0]
 80034b2:	002b      	movs	r3, r5
 80034b4:	0005      	movs	r5, r0
 80034b6:	429f      	cmp	r7, r3
 80034b8:	d9f3      	bls.n	80034a2 <_printf_i+0xf6>
 80034ba:	2f08      	cmp	r7, #8
 80034bc:	d109      	bne.n	80034d2 <_printf_i+0x126>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	07db      	lsls	r3, r3, #31
 80034c2:	d506      	bpl.n	80034d2 <_printf_i+0x126>
 80034c4:	6862      	ldr	r2, [r4, #4]
 80034c6:	6923      	ldr	r3, [r4, #16]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	dc02      	bgt.n	80034d2 <_printf_i+0x126>
 80034cc:	2330      	movs	r3, #48	; 0x30
 80034ce:	3e01      	subs	r6, #1
 80034d0:	7033      	strb	r3, [r6, #0]
 80034d2:	9b04      	ldr	r3, [sp, #16]
 80034d4:	1b9b      	subs	r3, r3, r6
 80034d6:	6123      	str	r3, [r4, #16]
 80034d8:	9b07      	ldr	r3, [sp, #28]
 80034da:	0021      	movs	r1, r4
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	9805      	ldr	r0, [sp, #20]
 80034e0:	9b06      	ldr	r3, [sp, #24]
 80034e2:	aa09      	add	r2, sp, #36	; 0x24
 80034e4:	f7ff fef2 	bl	80032cc <_printf_common>
 80034e8:	3001      	adds	r0, #1
 80034ea:	d147      	bne.n	800357c <_printf_i+0x1d0>
 80034ec:	2001      	movs	r0, #1
 80034ee:	4240      	negs	r0, r0
 80034f0:	b00b      	add	sp, #44	; 0x2c
 80034f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034f4:	2220      	movs	r2, #32
 80034f6:	6809      	ldr	r1, [r1, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	6022      	str	r2, [r4, #0]
 80034fc:	2278      	movs	r2, #120	; 0x78
 80034fe:	4932      	ldr	r1, [pc, #200]	; (80035c8 <_printf_i+0x21c>)
 8003500:	9103      	str	r1, [sp, #12]
 8003502:	0021      	movs	r1, r4
 8003504:	3145      	adds	r1, #69	; 0x45
 8003506:	700a      	strb	r2, [r1, #0]
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	6822      	ldr	r2, [r4, #0]
 800350c:	c920      	ldmia	r1!, {r5}
 800350e:	0610      	lsls	r0, r2, #24
 8003510:	d402      	bmi.n	8003518 <_printf_i+0x16c>
 8003512:	0650      	lsls	r0, r2, #25
 8003514:	d500      	bpl.n	8003518 <_printf_i+0x16c>
 8003516:	b2ad      	uxth	r5, r5
 8003518:	6019      	str	r1, [r3, #0]
 800351a:	07d3      	lsls	r3, r2, #31
 800351c:	d502      	bpl.n	8003524 <_printf_i+0x178>
 800351e:	2320      	movs	r3, #32
 8003520:	4313      	orrs	r3, r2
 8003522:	6023      	str	r3, [r4, #0]
 8003524:	2710      	movs	r7, #16
 8003526:	2d00      	cmp	r5, #0
 8003528:	d1a9      	bne.n	800347e <_printf_i+0xd2>
 800352a:	2220      	movs	r2, #32
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	4393      	bics	r3, r2
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	e7a4      	b.n	800347e <_printf_i+0xd2>
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	680d      	ldr	r5, [r1, #0]
 8003538:	1d10      	adds	r0, r2, #4
 800353a:	6949      	ldr	r1, [r1, #20]
 800353c:	6018      	str	r0, [r3, #0]
 800353e:	6813      	ldr	r3, [r2, #0]
 8003540:	062e      	lsls	r6, r5, #24
 8003542:	d501      	bpl.n	8003548 <_printf_i+0x19c>
 8003544:	6019      	str	r1, [r3, #0]
 8003546:	e002      	b.n	800354e <_printf_i+0x1a2>
 8003548:	066d      	lsls	r5, r5, #25
 800354a:	d5fb      	bpl.n	8003544 <_printf_i+0x198>
 800354c:	8019      	strh	r1, [r3, #0]
 800354e:	2300      	movs	r3, #0
 8003550:	9e04      	ldr	r6, [sp, #16]
 8003552:	6123      	str	r3, [r4, #16]
 8003554:	e7c0      	b.n	80034d8 <_printf_i+0x12c>
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	1d11      	adds	r1, r2, #4
 800355a:	6019      	str	r1, [r3, #0]
 800355c:	6816      	ldr	r6, [r2, #0]
 800355e:	2100      	movs	r1, #0
 8003560:	0030      	movs	r0, r6
 8003562:	6862      	ldr	r2, [r4, #4]
 8003564:	f000 f858 	bl	8003618 <memchr>
 8003568:	2800      	cmp	r0, #0
 800356a:	d001      	beq.n	8003570 <_printf_i+0x1c4>
 800356c:	1b80      	subs	r0, r0, r6
 800356e:	6060      	str	r0, [r4, #4]
 8003570:	6863      	ldr	r3, [r4, #4]
 8003572:	6123      	str	r3, [r4, #16]
 8003574:	2300      	movs	r3, #0
 8003576:	9a04      	ldr	r2, [sp, #16]
 8003578:	7013      	strb	r3, [r2, #0]
 800357a:	e7ad      	b.n	80034d8 <_printf_i+0x12c>
 800357c:	0032      	movs	r2, r6
 800357e:	6923      	ldr	r3, [r4, #16]
 8003580:	9906      	ldr	r1, [sp, #24]
 8003582:	9805      	ldr	r0, [sp, #20]
 8003584:	9d07      	ldr	r5, [sp, #28]
 8003586:	47a8      	blx	r5
 8003588:	3001      	adds	r0, #1
 800358a:	d0af      	beq.n	80034ec <_printf_i+0x140>
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	079b      	lsls	r3, r3, #30
 8003590:	d415      	bmi.n	80035be <_printf_i+0x212>
 8003592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003594:	68e0      	ldr	r0, [r4, #12]
 8003596:	4298      	cmp	r0, r3
 8003598:	daaa      	bge.n	80034f0 <_printf_i+0x144>
 800359a:	0018      	movs	r0, r3
 800359c:	e7a8      	b.n	80034f0 <_printf_i+0x144>
 800359e:	0022      	movs	r2, r4
 80035a0:	2301      	movs	r3, #1
 80035a2:	9906      	ldr	r1, [sp, #24]
 80035a4:	9805      	ldr	r0, [sp, #20]
 80035a6:	9e07      	ldr	r6, [sp, #28]
 80035a8:	3219      	adds	r2, #25
 80035aa:	47b0      	blx	r6
 80035ac:	3001      	adds	r0, #1
 80035ae:	d09d      	beq.n	80034ec <_printf_i+0x140>
 80035b0:	3501      	adds	r5, #1
 80035b2:	68e3      	ldr	r3, [r4, #12]
 80035b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	42ab      	cmp	r3, r5
 80035ba:	dcf0      	bgt.n	800359e <_printf_i+0x1f2>
 80035bc:	e7e9      	b.n	8003592 <_printf_i+0x1e6>
 80035be:	2500      	movs	r5, #0
 80035c0:	e7f7      	b.n	80035b2 <_printf_i+0x206>
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	0800371c 	.word	0x0800371c
 80035c8:	0800372d 	.word	0x0800372d

080035cc <memmove>:
 80035cc:	b510      	push	{r4, lr}
 80035ce:	4288      	cmp	r0, r1
 80035d0:	d902      	bls.n	80035d8 <memmove+0xc>
 80035d2:	188b      	adds	r3, r1, r2
 80035d4:	4298      	cmp	r0, r3
 80035d6:	d303      	bcc.n	80035e0 <memmove+0x14>
 80035d8:	2300      	movs	r3, #0
 80035da:	e007      	b.n	80035ec <memmove+0x20>
 80035dc:	5c8b      	ldrb	r3, [r1, r2]
 80035de:	5483      	strb	r3, [r0, r2]
 80035e0:	3a01      	subs	r2, #1
 80035e2:	d2fb      	bcs.n	80035dc <memmove+0x10>
 80035e4:	bd10      	pop	{r4, pc}
 80035e6:	5ccc      	ldrb	r4, [r1, r3]
 80035e8:	54c4      	strb	r4, [r0, r3]
 80035ea:	3301      	adds	r3, #1
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1fa      	bne.n	80035e6 <memmove+0x1a>
 80035f0:	e7f8      	b.n	80035e4 <memmove+0x18>
	...

080035f4 <_sbrk_r>:
 80035f4:	2300      	movs	r3, #0
 80035f6:	b570      	push	{r4, r5, r6, lr}
 80035f8:	4d06      	ldr	r5, [pc, #24]	; (8003614 <_sbrk_r+0x20>)
 80035fa:	0004      	movs	r4, r0
 80035fc:	0008      	movs	r0, r1
 80035fe:	602b      	str	r3, [r5, #0]
 8003600:	f7fd f8fc 	bl	80007fc <_sbrk>
 8003604:	1c43      	adds	r3, r0, #1
 8003606:	d103      	bne.n	8003610 <_sbrk_r+0x1c>
 8003608:	682b      	ldr	r3, [r5, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d000      	beq.n	8003610 <_sbrk_r+0x1c>
 800360e:	6023      	str	r3, [r4, #0]
 8003610:	bd70      	pop	{r4, r5, r6, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	20000398 	.word	0x20000398

08003618 <memchr>:
 8003618:	b2c9      	uxtb	r1, r1
 800361a:	1882      	adds	r2, r0, r2
 800361c:	4290      	cmp	r0, r2
 800361e:	d101      	bne.n	8003624 <memchr+0xc>
 8003620:	2000      	movs	r0, #0
 8003622:	4770      	bx	lr
 8003624:	7803      	ldrb	r3, [r0, #0]
 8003626:	428b      	cmp	r3, r1
 8003628:	d0fb      	beq.n	8003622 <memchr+0xa>
 800362a:	3001      	adds	r0, #1
 800362c:	e7f6      	b.n	800361c <memchr+0x4>

0800362e <memcpy>:
 800362e:	2300      	movs	r3, #0
 8003630:	b510      	push	{r4, lr}
 8003632:	429a      	cmp	r2, r3
 8003634:	d100      	bne.n	8003638 <memcpy+0xa>
 8003636:	bd10      	pop	{r4, pc}
 8003638:	5ccc      	ldrb	r4, [r1, r3]
 800363a:	54c4      	strb	r4, [r0, r3]
 800363c:	3301      	adds	r3, #1
 800363e:	e7f8      	b.n	8003632 <memcpy+0x4>

08003640 <_realloc_r>:
 8003640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003642:	0007      	movs	r7, r0
 8003644:	000e      	movs	r6, r1
 8003646:	0014      	movs	r4, r2
 8003648:	2900      	cmp	r1, #0
 800364a:	d105      	bne.n	8003658 <_realloc_r+0x18>
 800364c:	0011      	movs	r1, r2
 800364e:	f7ff fc49 	bl	8002ee4 <_malloc_r>
 8003652:	0005      	movs	r5, r0
 8003654:	0028      	movs	r0, r5
 8003656:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003658:	2a00      	cmp	r2, #0
 800365a:	d103      	bne.n	8003664 <_realloc_r+0x24>
 800365c:	f7ff fbd6 	bl	8002e0c <_free_r>
 8003660:	0025      	movs	r5, r4
 8003662:	e7f7      	b.n	8003654 <_realloc_r+0x14>
 8003664:	f000 f81b 	bl	800369e <_malloc_usable_size_r>
 8003668:	9001      	str	r0, [sp, #4]
 800366a:	4284      	cmp	r4, r0
 800366c:	d803      	bhi.n	8003676 <_realloc_r+0x36>
 800366e:	0035      	movs	r5, r6
 8003670:	0843      	lsrs	r3, r0, #1
 8003672:	42a3      	cmp	r3, r4
 8003674:	d3ee      	bcc.n	8003654 <_realloc_r+0x14>
 8003676:	0021      	movs	r1, r4
 8003678:	0038      	movs	r0, r7
 800367a:	f7ff fc33 	bl	8002ee4 <_malloc_r>
 800367e:	1e05      	subs	r5, r0, #0
 8003680:	d0e8      	beq.n	8003654 <_realloc_r+0x14>
 8003682:	9b01      	ldr	r3, [sp, #4]
 8003684:	0022      	movs	r2, r4
 8003686:	429c      	cmp	r4, r3
 8003688:	d900      	bls.n	800368c <_realloc_r+0x4c>
 800368a:	001a      	movs	r2, r3
 800368c:	0031      	movs	r1, r6
 800368e:	0028      	movs	r0, r5
 8003690:	f7ff ffcd 	bl	800362e <memcpy>
 8003694:	0031      	movs	r1, r6
 8003696:	0038      	movs	r0, r7
 8003698:	f7ff fbb8 	bl	8002e0c <_free_r>
 800369c:	e7da      	b.n	8003654 <_realloc_r+0x14>

0800369e <_malloc_usable_size_r>:
 800369e:	1f0b      	subs	r3, r1, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1f18      	subs	r0, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	da01      	bge.n	80036ac <_malloc_usable_size_r+0xe>
 80036a8:	580b      	ldr	r3, [r1, r0]
 80036aa:	18c0      	adds	r0, r0, r3
 80036ac:	4770      	bx	lr
	...

080036b0 <_init>:
 80036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b6:	bc08      	pop	{r3}
 80036b8:	469e      	mov	lr, r3
 80036ba:	4770      	bx	lr

080036bc <_fini>:
 80036bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036c2:	bc08      	pop	{r3}
 80036c4:	469e      	mov	lr, r3
 80036c6:	4770      	bx	lr
